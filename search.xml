<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[转]109个数据指标，全方位剖析零售业</title>
    <url>/2019/05/11/109%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%8C%87%E6%A0%87%EF%BC%8C%E5%85%A8%E6%96%B9%E4%BD%8D%E5%89%96%E6%9E%90%E9%9B%B6%E5%94%AE%E4%B8%9A/</url>
    <content><![CDATA[<p>原文链接：<a href="http://www.gzjundian.com/show-19-93-1.html" target="_blank" rel="noopener">http://www.gzjundian.com/show-19-93-1.html</a></p>
<p>如何能让你的分析报告真正为企业带来价值？如何拉近一套数据与实际生活生产之间距离，做到报告从数据中来、分析到业务中去？今天我们就零售行业中涉及到的三大块业务，探究如何为零售企业做切实有用的分析报告。</p>
<p>众所周知，人、货、场是零售业基本的思维模式。无论是线上还是线下，人、货、场都是零售营运的核心三要素。我们今天的探讨就从零售行业的人、货、场三个维度开始思考。</p>
<p>人包括店铺员工、顾客和第三方人员等；货泛指商品；场指卖场、电子商务的销售平台、渠道等，因此，零售业常用的分析指标有：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190511155053.png"></p>
<p>人货场只是第一个层次，员工、顾客、卖场、商品等为第二层。</p>
<h1 id="一、“人”的部分"><a href="#一、“人”的部分" class="headerlink" title="一、“人”的部分"></a>一、“人”的部分</h1><h2 id="1-销售指标"><a href="#1-销售指标" class="headerlink" title="1.销售指标"></a>1.销售指标</h2><p>【成交率】=成交顾客数÷客流量×100%</p>
<p>成交率和店员和销售技巧、产品陈列、产品销售价格、促销价格等都有关系。但是在产品、促销状态等都一致的情况下，成交率就只和店员的销售技巧有关了，所以这个指标可以用来判断店铺员工的销售能力。</p>
<p>【完成率】=销售完成数÷目标数×100%</p>
<p>这是一个判断销售目标进度的一个指标，在人货场三个领域都可以用到。</p>
<h2 id="2-服务指标"><a href="#2-服务指标" class="headerlink" title="2.服务指标"></a>2.服务指标</h2><p>【平均成交时长】=每一位顾客成交的时间总和÷成交顾客数</p>
<p>这是一个考察店铺员工效率的指标。一般还需要和客单价结合起来看会比较客观（可以做四象限），用最短的时间成交最高的金额，这样员工一般认为都是最优秀的员工。</p>
<p>【平均接待时长】=接待每一位顾客的时间总和÷接待顾客数</p>
<p>目前需要店铺手动计算这个指标。还有一个指标和平均接待时长类似，就是顾客平均停留时长。区别是前者是从开始接待顾客到离开店铺的时间段计算时长，后者是用顾客进门到出门的时间段来计算的。这两个指标同样不仅仅和“人”有关，还与“场”“货”有关。对于零售店铺来说大部分时候是希望顾客的停留时间越长越好。</p>
<p>【投诉率】=投诉的顾客总数÷顾客总数×100%</p>
<h2 id="3-管理指标"><a href="#3-管理指标" class="headerlink" title="3.管理指标"></a>3.管理指标</h2><p>【定编满足率】=实际员工总数÷标准配置人数×100%</p>
<p>这是考核企业招聘能力强弱的一个指标，同时它也是一个内控指标。定编满足率太低势必会影响效率，太高且超过100%又会造成人效的浪费。定编满足率还可以细分为部门定编满足率、普通员工定编满足率、管理层员工定编满足率等。</p>
<p>【员工流失率】=某段周期内流失员工数÷（（期初员工总数+期末员工总数）÷2）×100%</p>
<p>员工流失率分月流失率、季度流失率、年流失率等。处在不同周期的流失率是不能直接对比的。人事部经常用的是员工离职率，员工流失率和员工离职率有一点点区别，员工离职指正常人才转移，而员工流失包含不正常人才流失。</p>
<p>【工资占比】=企业支付的员工工资总额÷销售额×100%</p>
<h2 id="4-顾客指标"><a href="#4-顾客指标" class="headerlink" title="4.顾客指标"></a>4.顾客指标</h2><p>【客单价】=销售总金额÷有交易的顾客总数</p>
<p>一般用成交总笔数来代替顾客总数，理论上这两个数字是一致的，但是顾客经常会出现逛一次商场多次开单交易的情况，所以成交笔数实际上是大于等于有交易顾客数的。客单价既可以反映顾客的质量，也可以反映店铺员工的销售能力，还可以反映店铺的商品组合等。</p>
<p>【件单价】=销售总金额÷销售总数量</p>
<p>【连带率】=销售总数量÷成交总单数</p>
<p>连带率有不同的称谓，例如附加值、效益比、平均客件数、购物篮系数等。连带率反映的是顾客每次购物的深度。对于超市来说，除了分析常规连带率之外，还可以分析单品连带率、品类连带率，连带率越大说明该单品或品类越重要，需要在陈列、促销、库存管理等方面特别关注。百货行业还可以统计叫品牌连带率的指标，即计算顾客每次购物时平均消费几个品牌的产品。</p>
<h2 id="5-会员指标"><a href="#5-会员指标" class="headerlink" title="5.会员指标"></a>5.会员指标</h2><p>【新增会员数】=期末会员数—期初会员总数</p>
<p>如果将会员看成是企业的财富，新增会员就是在不断地积累财富。大部分零售企业会把这一项作为店铺员工KPI考核指标之一。新增会员数的一个附加指标是未办卡率，统计那些达到会员办卡条件却没有开新卡的顾客占比情况，这个指标可以反映店铺开新卡的能力以及顾客对品牌的喜好程度，这是一个分析指标，不建议作为考核治疗。</p>
<p>【会员增长率】=某段时间内新增会员数÷期初有效会员数×100%</p>
<p>会员增长率是体现企业会员增长速度的一个指标。</p>
<p>【会员贡献率】=会员销售总金额÷销售总金额×100%</p>
<p>会员贡献率不是越高越好，在每个企业会有一个合理的区间，太高就显得新增顾客太少，增长被局限了，太低则没有稳定的销售来源。行业不一样这个区间段也会不一样，店铺间也会不一样，例如商业区的店铺和写字楼、社区店铺的会员贡献率都是不一样的。</p>
<p>【有效会员数】</p>
<p>【有效会员占比】=有效会员数÷累积会员数×100%</p>
<p>会员总数多不一定强，有效会员数多才是硬道理。有效会员就是满足一定贸易条件的会员。随着企业的发展，必然会存在很在一段时间内没有交易过的会员，这些会员实际上已经没有任何的价值了，需要在分析中剔除出去，否则会员分析也没有意义。有效会员的贸易条件一般根据时间和交易量来设定，例如在12个月内必须有至少1次消费，6个月内必须有不少于3次消费记录等，这两个设定标准需要结合顾客的消费频率来定，行业不同标准也会有差异。</p>
<p>【会员回购率】=某段时间内有交易的老会员数÷期初有效会员总数×100%</p>
<p>会员回购率一般用在月、季和年度的分析上，是衡量顾客忠诚度的一个指标，严格地说这是一个老会员的回购率公式，因为期间新增会员的回购不包含在其中。</p>
<p>回购率和回头率常被误解为一回事，其实会员回购率和会员回头率是有区别的，回头率公式中的分子应该是某段时间内到达过店铺的会员，他们不一定实施了购物。对于店铺来说，先得让顾客回头，其次才是回购，所以这个两个指标是有先后顺序的。没有高的回头率，哪来的高回购率，所以零售商们都在想尽办法促使会员顾客高频次地回头。</p>
<p>【会员流失率】=某段时间内流失掉的会员数÷期初有效会员总数×100%</p>
<p>这个指标反映了会员顾客的流失速度，也反应了企业营运现状，它和会员增长率是一对相向指标，建议每月都追踪这两个指标。会员流失有它合理的一面，例如对定位在20~30岁的服装品牌来说，顾客年龄变大自然就会流失，再如对超市来说，如果顾客搬家了，流失也是合理的。</p>
<p>会员流失率反应了顾客总量的流失情况，却没有办法反映出流失顾客的质量，流失掉一个客单价为300元和流失掉客单价为3000元的顾客显然不能划等号。这就衍生出一个新的指标，相对会员流失率，公式如下：</p>
<p>【相对会员流失率】=某段时间流失的会员数量÷期初有效会员数×流失率权重值×100%</p>
<p>【流失率权重值】=流失会员的平均客单价÷有效会员的平均客单价</p>
<p>【会员回购频率】</p>
<p>【会员回购频率1】=某段时间内所有会员消费次数÷（期初有效会员总数+期中新增会员数）</p>
<p>【会员回购频率2】=某段时间内所有老会员消费次数÷期初有效会员总数</p>
<p>该指标反映会员顾客在某个时间段内的消费频次，分析这个指标选取合适的时间周期很重要，时间周期太短，这个值基本上就接近为1.0，没有丝毫意义。服装专卖店、手机专卖、电器专卖等可按6或12个月为一个滚动周期，百货商场一般用3或6个月为一个滚动周期，超市可以按1或者3个月来滚动分析。3个月为一个滚动周期并不是数一个季度才分析一次，而是每个月都可以分析。</p>
<p>【会员回购频率3】=某段时间内所有会员消费次数÷期间有交易的会员总数</p>
<p>【会员回购频率4】=某段时间内所有老会员消费次数÷期间有交易的老会员总数</p>
<p>这4个公式各有侧重，公式1或2侧重于研究回购频率的趋势，公司3和4侧重短期会员购物行为分析，零售企业在实践使用时应该以老会员的分析为主。</p>
<p>【平均年龄】=某个事件点会员年龄总和÷有效会员总数</p>
<p>平均年龄是衡量品牌定位的一个标准，不过这个指标收数据源的影响非常大。有很多顾客不愿意提供自己的私人信息，还有就是终端店员不负责任地录入数据，所以在系统中很可能看到上有古稀老人，下有婴儿的年龄数据。分析平均年龄时需要剔除这些异常数据，否则那些90岁以上的顾客就足以把平均年龄拉大好几岁。对年龄的扩展分析是将顾客年龄分段分析，就是年龄分析。<br>平均年龄属于对顾客基础信息分析的范畴，这个范畴还包括性别、职业、地域、收入等。</p>
<h1 id="二、“货”的部分"><a href="#二、“货”的部分" class="headerlink" title="二、“货”的部分"></a>二、“货”的部分</h1><p>正如“人”“货”“场”是零售分析的基本思维模式一样，商品分析也有它的基本模式，这就是“进”“销”“存”，“进”即为采购环节，“销”自然是销售环节，狭义的“存”指商品库存管理环节，广义的“存”指整个商品的供应链管理。人货场是一个平行关系，而进销存却是一个又先后顺序的三角关系，前者是基于业务的分析管理，后者是基于商品的流程管理。大部分零售业的POS系统都是基于进销存的一种软件系统。</p>
<p>某种商品的库存太大、占用资金，我们常常理所当然地认为是采购进货不合理，进得太多，所以采购部经常背黑锅。其实销售环节和供应链环节都会影响库存，例如商品在卖场陈列不合理，仓库发货不及时，盘点错误造成系统显示有库存而实际库存为0等。所以分析商品的问题务必从进销存三个维度进行思考，不能一遇到问题就武断地认为是进销存某个环节的问题。</p>
<p>商品的分析指标很多，常用的如商品的折扣率、动销率、周转率等，还有商品的三度（广度、宽度、深度）等。一般来说大店看重商品的周转，小店看重商品的单词利润，线上看重商品的折扣，线下侧重商品的库存。大家的侧重点不同，不过总体来说商品的分析如图所示。</p>
<h2 id="1-采购环节"><a href="#1-采购环节" class="headerlink" title="1.采购环节"></a>1.采购环节</h2><h3 id="（1）采购三度"><a href="#（1）采购三度" class="headerlink" title="（1）采购三度"></a>（1）采购三度</h3><p>【广度】</p>
<p>广度=采购的商品品类</p>
<p>广度比=采购的商品品类数÷可采购的商品总品类数×100%</p>
<p>广度关系到商品品类多样化，很多追求消费者一站式购买的卖场就是追求大广度。例如一个服装专卖店，公司当季商品有20个品类，买手实际采购了16个品类，则广度为16，广度比未80%。再比如一个中型超市有200个品类的商品在销售，可供销售的总品类数是300个，则广度为200，广度比为67%。商品的广度体现了商品的丰富程度。广度也不是越大越好，这和零售店铺的消费群体有关，也和营运成本有关，所以最佳的广度是指用最经济的成本且最能满足目标消费群体绝大部分需求的值。</p>
<p>【宽度】</p>
<p>宽度=采购的SKU总数</p>
<p>宽度比=采购的SKU总数÷可采购的商品SKU总数×100%</p>
<p>商品的宽度代表了商品的丰富且可供选择的程度，宽度越大的店铺消费者挑选的余地就越大。而宽度比则是反应和竞争对手宽度、自己目标宽度或上游供应商宽度的对比程度。例如对于一个化妆品专卖店来说，店铺共有1000个SKU商品在销售，而最大的竞争对手同期销售的商品是1500个SKU，则该专卖店商品的宽度为1000，相对于竞争对手的宽度比67%。由于资源局限性，大型超市等一般会限定商品的宽度值，所以就会出现每新增一个商品必须要剔除一个旧品的规定。电子商务网网站则相对宽松一些，他们的陈列没有实体零售店铺的空间限制，所以理想状态下宽度是可以做大无限大。</p>
<p>【深度】</p>
<p>深度=采购的商品总数量÷采购的SKU总数</p>
<p>深度比=深度÷采购目标深度×100%</p>
<p>深度是指平均每个SKU的商品数量，它的意义代表了商品可销售的数量的多少，比如某个服装专卖店某次采购了400个SKU的商品，一共1000件，则深度为2.5。深度越大越不容易缺货，但是也可能会造成高库存。</p>
<h3 id="（2）覆盖度（也叫铺货率）"><a href="#（2）覆盖度（也叫铺货率）" class="headerlink" title="（2）覆盖度（也叫铺货率）"></a>（2）覆盖度（也叫铺货率）</h3><p>覆盖度=有某款或品类产品销售的店铺数÷适合销售该产品的总店铺数×100%<br>商品的覆盖度指标适合连锁性质的公司使用，它是衡量商品铺货率的一个指标，需要注意覆盖度公式的分母不是总店铺数，而是适合销售该产品的总店铺数，二者差距较大。一般来讲，覆盖度越大商品的销售就会越好。</p>
<h3 id="（3）采销匹配度"><a href="#（3）采销匹配度" class="headerlink" title="（3）采销匹配度"></a>（3）采销匹配度</h3><p>采销匹配度不是一个具体的指标，它实际上是一种分析方法。通过对比品类、型号、价格等方面在某段销售周期内采购和销售的比重来判断商品销售进度的一种方式。</p>
<h2 id="2-供应链环节"><a href="#2-供应链环节" class="headerlink" title="2.供应链环节"></a>2.供应链环节</h2><h3 id="（1）服务指标"><a href="#（1）服务指标" class="headerlink" title="（1）服务指标"></a>（1）服务指标</h3><p>【订单满足率】=订单中能够供应的商品数量总和÷订单商品数量总和×100%</p>
<p>例如物流部收到5张订单供1000件商品，由于缺货等原因实际可以发出的商品只有920件，则订单满足率就是92%。这是一个反应仓库缺货状态的指标，对于连锁企业来讲，100%的订单满足率是一个理想状态，一般都达不到。如果真能够做到100%满足率，意味着不但需要预测非常准，还需要增加更多库存来满足突发订单，这样的代价就是仓储成本增加，资金成本增加，这也是一种资源的浪费。</p>
<p>【订单执行率】=能够执行的订单数量÷总订单数量×100%</p>
<p>某天物流部收到100张订单，但是其中10张订单由于缺货或其他原因不能执行，则订单执行率90%。仓库缺货，物流配送（有货但是送不出去）等都会影响这个指标。</p>
<p>订单满足率和订单执行率的区别是，前者计算的是商品数量的满足情况，后者计算的是订单数量的执行情况。后者常常被很多企业作为订单满足率，这其实是不严谨的。订单满足率侧重用来衡量商品库存状况，订单执行率侧重用来衡量储运状况。</p>
<p>【准时交货率】=准时交货的订单数÷能够执行的订单总数×100%</p>
<p>准时交货率是一个反应供应链效率的指标，需要注意的是分母并不是订单总数，而是能够执行的订单总数，对于那些不能执行的订单去计算他们的准时交货率是非常滑稽的一件事。计算准时交货率的前提是先要明确什么是“准时交货”，24小时？48小时？还是根据距离远近区别对待？</p>
<p>【订单响应周期】=系统中收货时确认的时间-系统中下订单的时间</p>
<p>一张订单的处理是从客户在系统中下订单（对于非系统下单的情况，就应该以收到订单的时间来准）开始到确认收货这样的一个完整的流程，这是一个反应供货效率的指标，一般计算平均订单响应周期。需要注意的是，随着新客户的不断增加、客户类型的变化等，平均订单响应周期自然会发生变化。所以平均订单响应周期变长和供应链效率降低并不能划等号，要进一步分析数据突变的原因。</p>
<p>在实际分析过程中还需要结合订单区域、产品类型、客户类型等进行详细分析。</p>
<h3 id="（2）管理指标"><a href="#（2）管理指标" class="headerlink" title="（2）管理指标"></a>（2）管理指标</h3><p>【库存周转率】</p>
<p>库存周转率1=出库数量÷（（期初库存数量+期末库存数量）÷2）</p>
<p>库存周转率2=销售数量÷（（期初库存数量+期末库存数量）÷2）</p>
<p>公式1是从供应链管理角度的指标，公司2是对公司销售周转率的衡量，二者是有区别的。一件商品一般只会被销售一次，但是因为退货回仓库的原因而会有大于1次的出库情况。“（（期初库存数量+期末库存数量）÷2）”这部分也可以用评价库存来代替，就是每月的平均库存。用平均库存的好处是营运人员投机取巧拉高周转率的难度加大，有的营运人员会在期初和期末这两个时间节点故意压低库存，甚至是牺牲销售的前提下压低节点库存，如果计算12个月的平均库存则投机难度就非常大了。</p>
<p>【物流成本占比】=物流成本÷（（期末库存金额+期中库存金额）÷2）×100%</p>
<p>广义的物流成本包括仓储成本、运输成本、管理成本等。狭义的物流成本仅仅指运输成本，狭义的物流成本占比就是运输成本和所运输的商品总值的比。</p>
<p>【客户投诉率】=客户投诉率=客户投诉订单批次÷订单总数×100%</p>
<p>这个公式很理解，但是在实际操作中缺失错误百出。问题出在公式的分子和分母的不对等上面。</p>
<h3 id="（3）库存指标"><a href="#（3）库存指标" class="headerlink" title="（3）库存指标"></a>（3）库存指标</h3><p>【期初库存、期末库存、平均库存】</p>
<p>平均库存=（期初库存+期末库存）÷2</p>
<p>年平均库存还可以直接取每月末库存的平均值，一般财务部习惯用期初加期末除以2的计算方法，销售营运部喜欢用平均库存的算法。</p>
<p>【库存天数】=期末库存金额÷（某个销售期的销售金额÷销售期天数）</p>
<p>库存天数是一个极为重要的库存管理指标，是有效衡量库存滚动变化的量化标准，也是用来衡量库存可持续销售时间的追踪指标。</p>
<p>我们可以用库存天数来判断店铺是否有缺货的风险，某个店铺的安全库存天数是45天，如果实际库存低于这个值则有缺货风险，反之则表示库存过大。这个指标既可以计算整体企业的库存天数，也可以计算每个品类或单品的库存天数，在分析具体问题的时候，常常需要结合起来看。另外，有些企业喜欢用库存周数的概念，实质是一样的，将库存天数除以7即为库存周数。一般来讲快速消费品行业使用库存天数，耐用消费品使用库存周数。</p>
<p>【库销比】=期末库存金额÷某个销售期的销售金额×100%</p>
<p>库销比的销售周期一般取月，也就是月库销比，当然也可以取周，如果是周库销比实际上就是和库存周数一个概念。月库销比在年度同比的时候是有参考价值的，但是在环比时就有问题了，因为每个月的天数是不一致的，有28天、29天、30天和31天4种情况，销售期不同销售金额就会不同，这样的月库销比实际上是没有可比性的。而库存周数和库存天数就不存在这个问题，所以我一般很少用这个指标。</p>
<p>【有效库存比】=有效库存金额÷总库存金额×100%</p>
<p>要计算有效库存比首先需要定义有效库存的标准，有效库存是指能给门店带来销售价值的商品库存，也就是能产生销售贡献的商品库存。从定义上看残次商品、过季商品和没有销售的商品都不属于有效库存商品。不过在实际上的分析过程中有效库存的确会复杂很多，首先需要剔除残次商品、过季商品、一段时间内没有销售的商品，然后再确定一个标准值将有销售的商品分成有效库存和无效库存，这个标准一般以周销售量或月销售量来衡量，并且渠道不同标准是不一样的。</p>
<p>确定有效库存的标准可以利用二八法则来辅助计算，占总销售20%的商品的平均销量值即为有无效库存的分界线。当然也可以人为确定这个分界线的值。</p>
<h2 id="3-销售环节"><a href="#3-销售环节" class="headerlink" title="3.销售环节"></a>3.销售环节</h2><h3 id="（1）商品指标"><a href="#（1）商品指标" class="headerlink" title="（1）商品指标"></a>（1）商品指标</h3><p>【货龄】=商品的年龄</p>
<p>对于有保质期的商品，例如食品、饮料等，货龄是从生产日期开始计算的，对于没有严格保质期或有效期的商品，例如服装、手机等，货龄应该是从开始上架销售的日期开始计算的。分析货龄目的一是防止商品过期，二是作为制定商品价格调整的依据。货龄越大，库存越高的商品就是价格调整的首选。</p>
<p>【售罄率】=某段时间内的销售数量÷（期初库存数量+期中进货数量）×100%</p>
<p>售罄率是检验商品库存消化速度的一个指标。一般采取期货制订货的企业，如鞋服行业用得比较多，可以随时补货的快速消费品一般不同这个指标。特殊时期的囤货制也可以使用售罄率这个指标，例如包销或买断销售都属于囤货制。根据销售期的不同，一般有周售罄率、月售罄率、季售罄率、季末售罄率等。季末售罄率指整个商品消化期的销售数量和商品的总到货数量的比值。</p>
<p>【折扣率】=商品实收金额÷商品标准零售价金额×100%</p>
<p>商品的折扣率直接影响到企业的利润水平，是企业的生命线，但遗憾的是很多企业只是在财务报表中才有这个数据。财务报表只是一个结果，折扣率更应该是一个营运指标，需要定期追踪它是否正常、分析趋势是否向坏等。</p>
<p>【动销率】=某段周期内销售过的商品SKU数÷（期初有库存的商品SKU数+期中新进商品SKU数）×100%</p>
<p>动销率的统计周期一般是周、月、季度，分析的对象可以是品类、类别、SKU等。动销率属于一个追踪和管理指标，一般传统零售比较重视这个指标，动销率都比较高。但是电子商务由于追求长尾效应，动销率都比较低，不过最近有些电子商务也开始重视这个指标了。</p>
<p>【缺货率】=某个周期内卖场有缺货记录的商品数÷（期初有库存的商品数+期中新进商品数）×100%</p>
<p>对于供应链的缺货分析建议使用【订单满足率】，这里的缺货率主要是针对销售端的缺货，适用于采购部和销售部。注意这个缺货率是分析缺货的商品比率，不是缺货的数量或金额多少（缺货数量和缺货金额很难量化）。缺货率比较难以统计的是缺货记录，POS系统弱的门店只能靠人工统计，软件系统好的客户可以通过设置商品零库存状态用来自动判断是否缺货。库存为0一般是缺货，但是库存大于0的商品也可能是“缺货”状态，因为这里的库存很可能是残次或虚假库存，实际可供销售的库存为0，这种情况比较难以统计，需要人工加系统的方法来识别。缺货率中的销售周期最短可以是1天，最长不建议超过1个月。在计算年平均缺货率的时候可以计算月缺货率的平均值。</p>
<h3 id="（2）结构指标"><a href="#（2）结构指标" class="headerlink" title="（2）结构指标"></a>（2）结构指标</h3><p>【品类结构占比】=某品类销售额÷总销售额×100%</p>
<p>【价位段占比】=某价格段销售额÷总销售额×100%</p>
<p>【正价销售占比】=正价商品销售额÷总销售额×100%</p>
<p>正价商品为标准零售价的商品，与之对应的是折扣商品或特价商品。正价商品销售占比越高，企业利润越高。对于促销频率高的行业，以及有议价空间的行业（如手机专卖店）等该指标显得尤为重要，它是员工销售能力和企业管理水平的综合体现。但遗憾的是很多企业只重视折扣率，而忽视了这个指标。</p>
<h3 id="（3）价格体系指标"><a href="#（3）价格体系指标" class="headerlink" title="（3）价格体系指标"></a>（3）价格体系指标</h3><p>【商品现值】</p>
<p>商品现值就是商品当前被消费者认可的价值。一台手机刚出来时售价是4000元，一年后消费者可以接受的零售价只有2800元，这个2800元就是这台手机目前的现值。随着时间的流逝，新机型的推出，手机现值还会不断变化着。商品价格会随着时间流逝而变化的商品适合用商品现值的概念来管理，例如服装、手机、食品等。</p>
<p>【价格弹性指数】</p>
<p>价格弹性指数是商品价格变化1%时，商品销量变化的百分比。例如某款商品价格下降1%时，销量就上升5%，则价格弹性指数就是5.0%。价格变动时不光会影响到自身的销量变化，还会影响到竞争对手的销售变化。所以还有一个品牌间的价格弹性指数，品牌A相对于品牌B的价格弹性指数为4.2，这表示品牌A的价格每下降1%便能够从品牌B那里抢到相当于品牌B4.2%的销量，也就是品牌B销售会下降4.2%。确定商品的价格弹性指数最好的方法是最随机测试。</p>
<h3 id="（4）畅滞销分析"><a href="#（4）畅滞销分析" class="headerlink" title="（4）畅滞销分析"></a>（4）畅滞销分析</h3><p>【前十大销售及占比】</p>
<p>前十大销售就是在所有商品中销售额或销售量最好的十个商品的总销量，前十大商品占比也就是他们的销售额或销售量占总销售量的比重。这是一个常规分析指标和追踪指标，除了对总销售进行前十大排名分析外，还可以对具体的类别进行同样的分析。</p>
<p>前十大商品销售占比越大，商品销售就越集中，销售管理更容易，但是销售风险也会加大。很多电子商务的卖家非常追求爆款，恨不得前三个商品就能占到公司总销售的80%以上。爆款一般综合毛利都偏低，且一旦生产或物流环节出现状况，对企业的销售影响可能是致命的。</p>
<p>【前十大库存及占比】</p>
<p>和前十大销售及占比概念一样，只是前者是基于销售，后者是基于库存。这是一个库存管理指标，同样是看趋势，看数据是否异常。</p>
<p>【滞销品销售占比】</p>
<p>滞销商品销售占比指的是滞销商品占总销售的比重，同理还可以演化出一个滞销商品库存占比。</p>
<h2 id="4-售后环节"><a href="#4-售后环节" class="headerlink" title="4.售后环节"></a>4.售后环节</h2><p>【退货率】</p>
<p>退货率1=某个周期内退货数÷总销售数×100%</p>
<p>退货率2=某个周期内退货单数÷总销售单数×100%</p>
<p>退货率公式非常简单，不过它和【客户投诉率】有一个同样的问题，就是本周期内的退货数并不一定来源于本期内的销售即不含在分母中。处理方法同客户投诉率一样有三种方法：综合处理法（不考虑退货单的来源问题），追踪来源法（将退货单还原到发货期进行分析），剔除法（将非当日退单剔除再计算退货率）。</p>
<p>【特殊服务率】=特殊服务的顾客÷总销售顾客数×100%</p>
<p>有些零售店铺为了提高顾客的体验感，会搞一些特殊的服务活动，例如有的服装专卖店有免费熨洗服务，有些电器商场有以旧换新的服务等，这个指标就是用啦检验这种服务效果的。</p>
<p>【残损率】=残损商品数÷商品总数×100%</p>
<p>残损商品会影响企业和门店的销售和利润，残损率不仅仅是一个分析指标，它更应该是一个追踪指标，并且还应该根据残损商品的来源进行分析，找到残损的主要原因，是仓储残损率高，还是销售渠道残损率高等。</p>
<h1 id="三、“场”的部分"><a href="#三、“场”的部分" class="headerlink" title="三、“场”的部分"></a>三、“场”的部分</h1><h2 id="1-销售额"><a href="#1-销售额" class="headerlink" title="1.销售额"></a>1.销售额</h2><p>【时段、日、周、月、季度、年】</p>
<p>月销售额指标、季度销售额指标、年销售额指标这是最常用且和绩效挂钩的硬指标。日和时段指标往往不受管理层重视，其实这是不合理的。零售行业的销售是靠一个个时段、一天天追出来的，没有基础指标的完成，谈何月、年指标的完成？</p>
<p>【预测额】</p>
<p>一般分为【日销售预测额】、【月销售预测额】和【年销售预测额】，日销售预测在大型百货商场、超市、电子商务的销售中经常使用，对日销售进行预测，只需要根据历史数据中每日各个时段的销售百分比就可以计算出来。月和年的预测，前面已经讲解过了。</p>
<h2 id="2-追踪指标"><a href="#2-追踪指标" class="headerlink" title="2.追踪指标"></a>2.追踪指标</h2><p>【进店率】=进店人数÷路过人数×100%</p>
<p>进店率公式并不难，难的是如何提高进店率，此时各位又可以搬出人货场的思维模式来操练一下。进店率有个系统误差，就是店铺工作人员的进出会影响精度，可以统计工作人员每天大致的重复进店次数然后在进店人数中扣除。</p>
<p>【上楼率】=本层向上的顾客数÷进入本层的顾客数×100%</p>
<p>有5000名顾客进入首层，总共有3000名顾客上到二层及以上楼层，则一层的上楼率为60%。上楼率对多层经营的卖场来说是一个非常重要的指标。</p>
<p>【接触率】</p>
<p>随着科技的发展，管理更多精细化，接触率越来越受零售商重视，通过它可以深层次地了解顾客的购买行为。接触率就是消费者和商品的接触比率。又可以分为试穿率、试用率、触摸率等。</p>
<p>（1）【试穿率】=试穿顾客数÷进店人数×100%</p>
<p>这个指标常用语鞋服行业，目前还没有发现有仪器能监控此指标，大多靠人工统计，需要注意的是同一个顾客无论试穿多少次都只能统计一次。</p>
<p>（2）【试用率】=试用顾客数÷进店人数×100%</p>
<p>这个指标常用于化妆品、食品等行业，如果是封闭销售（例如专卖店）则用进店人数作为分母，不过这些行业大多在超市和百货商场开放式销售，所以进店人数可以转换为有接触的顾客数（例如和促销人员有语言交流的或者是驻足一段时间的顾客），绝对不能轻易用路过人数。</p>
<p>（3）【触摸率】=触摸某商品的顾客数÷路过某商品的人数×100%</p>
<p>触摸率反应商品外观被关注的程度，目前借助一些视频设备可以自动采集这个数据。一般来说某商品的触摸率和成交数量成正比，但是有时候触摸率很高，但是交易很低，作为管理者可能需要分析这种现象产生的原因，为什么消费者有冲动而无行动，出现这种情况很大可能是价格原因。</p>
<p>【成交率】=成交顾客数÷进店人数×100%</p>
<p>【完成率】=完成数÷目标数×100%</p>
<p>完成率根据统计时间段的不同又可以分为实时完成率、滚动完成率、累积完成率、预测完成率。</p>
<p>【大宗交易占比】=大宗购物金额÷总销售额×100%</p>
<p>大宗交易需要企业自己定义何为大宗交易，例如超市可定义单笔成交额大于1万为大宗交易，化妆品和服务专卖店可以定义每次购物数量大于10件为大宗交易等。之所以要监控大宗交易，是因为大宗交易中藏着很多见不得人的交易，而这些交易对渠道和品牌都是伤害。现在很多百货公司的团购部俨然变成了网购批发入口。</p>
<p>很多服装品牌为了维护价格的统一性，会严格控制向非直接客户的发货，而很多网络销售的店主没办法直接从品牌商进货，于是他们选择在店铺做大型促销的时候从零售店铺大量采购，这里面大多会有里应外合的配合，甚至很多零售百货公司会有专人来促进这种交易，大家各取所需。对于很多大型超市，为了冲业绩，采购人员会伙同供应商做虚假交易，首先由超市向供应商下一张大订单，供应商也会发货，不过这批货不会进入超市仓库（采购人员会协调仓库人员做虚拟入仓），直接会以较低的价格卖给如批发市场等渠道，最后采购人员再用这批货款从超市将这批已经不存在的货买出来，这样所有流程走完，采购和供应商都收获了销售额。</p>
<h2 id="3-分析指标"><a href="#3-分析指标" class="headerlink" title="3.分析指标"></a>3.分析指标</h2><p>【增长率】=增长数÷基础数×100%=（报告期数-基础数）÷基础数×100%</p>
<p>基础数的选择有三种情况，基础数为同期的数据则是同比，基础数为上一个周期的数据则为环比，和2013年9月的销售额对比就是环比，和2013年1月对比为定基比。这三种情况分别对应同比增长率、环比增长率、相对增长率，前两者是用得最多的。</p>
<p>同比增长率中经常使用同店同比增长率（以下简称同店同比）的概念，即本期和同期在对等条件下（相同的店铺）进行对比。同比增长率体现了企业总体的增长情况，同店同比则可以看出企业绝对增长情况。很多企业的增长率非常高，但是大部分增长都来源于新开门店的增长，靠新开店铺的增长是不可能长期持续的。</p>
<h2 id="4-效率指标"><a href="#4-效率指标" class="headerlink" title="4.效率指标"></a>4.效率指标</h2><p>【坪效】</p>
<p>【销售坪效】=销售额÷店铺面积</p>
<p>【利润坪效】=利润额÷店铺面积</p>
<p>坪效是反映店铺单位面积产出的指标，常常纳入KPI考核项目。坪效的使用需要注意已下几点：</p>
<p>（1）计算坪效的最小周期是月，完全没有必须要去计算周、日坪效</p>
<p>（2）如果店铺面积、位置等状态没有发生变化，销售坪效一定和销售成正比，没有必要再去分析坪效趋势。</p>
<p>（3）坪效的对比具有强弱对比性，同一个商场同一楼层的同品类商品具有强对比性，不同品类的对比性会稍微弱一些，不同楼层的不同品类对比又更加弱。同一个商圈的同样业态对比性强，不同的商圈同样业态对比稍弱，不同的商圈不同的业态有可能根本就没有可对比性。同一品牌专卖店在一线城市和三线城市的坪效对比性也不强。所以不要轻易以坪效论营销。</p>
<p>（4）坪效另一个意义在于店铺面积、位置发生变化后进行前后差异的对比分析。</p>
<p>（5）有的企业将坪效用在新开门店销售预估的使用上，这是可以的，但是一定要注意可比性。</p>
<p>【人效】</p>
<p>【销售人效】=销售额÷店铺面积</p>
<p>【利润人效】=利润额÷店铺面积</p>
<p>人效反应的是单人产出，它常常用来管理店铺的人力资源配置、人力成本核算等。</p>
<p>【每平米租金】=租金÷面积</p>
<p>这是用来判断店铺租金相对高低的一个指标。包括每平米日租金、每平米月租金、每平米年租金等</p>
<p>【租金倍率】=销售额÷租金</p>
<p>租金倍率是衡量投入1元租金能产生多少销售额的一个指标。每平米租金由于城市、商圈等差异，没办法直接对比，而租金倍率由于考虑到租金产生的效益则可以直接对比。</p>
<h2 id="5-竞争状况"><a href="#5-竞争状况" class="headerlink" title="5.竞争状况"></a>5.竞争状况</h2><p>【市场占有率】</p>
<p>也称市场份额，是指一个企业的销售量或销售额在同类市场产品中所占的比重，它直接反应了消费者对商品的喜好程度，同类市场是一个变化的值，既可以是广义的总体市场，也可以是企业的目标市场，甚至可以是某个商圈或商场。例如含氟牙膏可以和牙膏对比，也可以和含氟牙膏对比，甚至计算它在家乐福或沃尔玛超市中的市场占有率。正因为标准的多样性，市场中才充斥着各种号称自己市场占有率第一的品牌。这个指标一般通过市场调查获得。</p>
<p>【竞品指数】=本公司销售额/量÷竞争对手销售额/量</p>
<p>竞品指数是对市场占有率的一种简化，因为我们大部分时间没有办法统计出同类市场的销售数据，所以只能锚定其中一个或几个对手的数据对比。通过分析竞品指标我们也能大致了解自己品牌的市场占有率走势。</p>
<p>【平均排名】</p>
<p>竞争对手的销售数据也不是很容易拿到的，但是每个商场自己品牌的排名值却比较容易到手，这时就可以计算品牌间的平均排名值，通过分析平均排名的变化也可以侧面了解自己的市场占有率情况。平均排名常常被鞋服、化妆品等行业用来作为对店长、销售主管、区域经理等的考核指标。</p>
<h2 id="6-促销指标"><a href="#6-促销指标" class="headerlink" title="6.促销指标"></a>6.促销指标</h2><p>【费销比】=促销费用金额÷促销期间产生的销售额×100%</p>
<p>【目标完成率】=促销期间销售完成数÷促销目标×100%</p>
<p>【同比增长率】=同比增长数÷同期销售额×100%</p>
<p>【促销爆发度】=（促销期间的平均权重销售额-促销后的平均权重销售额）÷促销前的平均权重销售额×100%</p>
<p>【品牌参活度】=参与促销活动的品牌数÷卖场总品牌数×100%</p>
<p>这个指标常常用在百货和超市的促销活动准备期，用来衡量营运经理促销活动时的执行力。对于品牌商可以将此指标修改为单品参活度，例如公司一共有200个SKU产品，五一期间有40个SKU做促销，单品参活度即为20%。十一促销有50个SKU参与，但是总SKU为300个，单品参活度反而降低为16.7%</p>
<p>【会员参与率】=参与促销活动的会员数÷有效会员总数×100%</p>
<p>促销活动前我们一般会通过邮件、短信、微信、电话等手段通知会员顾客，而会员参与度就是用来评估这些手段效果的一个指标。</p>
<h2 id="7-渠道扩展"><a href="#7-渠道扩展" class="headerlink" title="7.渠道扩展"></a>7.渠道扩展</h2><p>【净开店率】=（开店数-关店数）÷期初店铺数×100%</p>
<p>【渠道结构占比】=该渠道销售额÷总销售×100%</p>
<p>渠道结构分析是销售分析中最常见的一种分析方式，也是著名的营销4P理论中的一个P（place）。</p>
<p>【重要客户占比】=重要客户销售额÷总销售额×100%</p>
<p>重要客户如何定义是这个指标的关键，有如下几种确定重要客户的方法供参考：</p>
<p>①以销售额的前N名客户作为重要客户，例如前十大客户等</p>
<p>②根据二八法则，以总销售额80%的客户作为重要客户</p>
<p>③根据ABC分析法以A类客户作为重点客户</p>
<p>④根据企业未来战略制定重点客户</p>
<p>单看每个月的重要客户占比没有太大的意义，需要连续观察该数据的走势才有判断的依据，同时需要注意不能经常更改重要客户名单。</p>
<h1 id="四、财务-部分"><a href="#四、财务-部分" class="headerlink" title="四、财务-部分"></a>四、财务-部分</h1><h2 id="1-销售利润率"><a href="#1-销售利润率" class="headerlink" title="1.销售利润率"></a>1.销售利润率</h2><p>【毛利率】=（销售收入-营业成本）÷销售收入×100%</p>
<p>【纯毛利】=（销售收入-营业成本-费用）÷销售收入×100%</p>
<p>【交叉比率】=商品毛利率×商品周转率</p>
<p>商品周转率=销售收入÷（（期初库存值+期末库存值）÷2）</p>
<p>毛利率大，周转次数高的商品是优质产品，但是这种商品是比较少的。很多商家采取薄利多销的策略实际上就是牺牲部分商品的毛利率，从而换取较高的周转率。交叉比率一般以季度、半年、年为计算周期。</p>
<h2 id="2-回款指标"><a href="#2-回款指标" class="headerlink" title="2.回款指标"></a>2.回款指标</h2><p>【回款（金额）达标率】=回款金额÷欠款金额×100%</p>
<p>【回款（客户）达标率】=回款客户÷欠款客户×100%</p>
<p>回款考核中的金额达标率和客户达标率两个指标是孪生兄弟，谁也离不开谁。前者确保回款金额的重要性，后者确保回款客户的普遍性。有的企业只考核回款金额达标率，这就有可能造成一些小额欠款客户的款不被收款人员关心，因为对金额回款率的影响极小。</p>
<h2 id="3-贸易条件"><a href="#3-贸易条件" class="headerlink" title="3.贸易条件"></a>3.贸易条件</h2><p>【联营扣率】</p>
<p>联营扣率是百货公司为了确保自己的经营利润而和商家合同约定在销售收入中扣除的比率，例如商场某品牌的联营扣率是23%，意味着在商场结款时只能结到销售收入的77%</p>
<p>【租售比】=租金÷销售额×100%</p>
<p>对品牌商来说租售比可以和联营扣率进行对比分析，都是为了取得经营权所需要付出的代价。前面谈到的租金倍率指标实际上是租售比的倒数。</p>
<p>这是个竞争不断加剧的时代，我们必须更加专业的利用数据。数据并不是人们最终需要的东西，他们需要的是信息，是对未来发展的洞察力。</p>
<p>作为数据分析师，最怕你的分析报告没有产生价值，本文的指标可以帮助你在分析零售数据的时候，提高对数据的认识，并真正帮助企业提高运营管理深度。</p>
<p>除此之外，如何从数据中发现商业规则、洞察消费者行为、量化商业价值，都需要数据分析师们拥有能融合商业理解、数据分析并具备从海量数据中发现知识的能力。希望本文章能作为大家学习零售数据分析指标的小手册，随取随用。</p>
]]></content>
      <categories>
        <category>零售业剖析</category>
      </categories>
      <tags>
        <tag>零售</tag>
        <tag>零售业</tag>
        <tag>数据指标</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年10大战略性科技趋势5·6</title>
    <url>/2019/06/04/2019%E5%B9%B410%E5%A4%A7%E6%88%98%E7%95%A5%E6%80%A7%E7%A7%91%E6%8A%80%E8%B6%8B%E5%8A%BF5%C2%B76/</url>
    <content><![CDATA[<h1 id="2019年十大战略技术趋势"><a href="#2019年十大战略技术趋势" class="headerlink" title="2019年十大战略技术趋势"></a>2019年十大战略技术趋势</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190527105918.png"></p>
<h2 id="趋势5-赋能边缘"><a href="#趋势5-赋能边缘" class="headerlink" title="趋势5:赋能边缘"></a>趋势5:赋能边缘</h2><p>边缘计算描述了一种计算拓扑结构，其中信息处理、内容收集和传递更靠近这些信息的源和存储库。边缘计算借鉴了网格网络和分布式处理的概念。它试图将流量和处理保持在本地，目标是减少流量和延迟。因此，边缘内容交付的概念已经存在很多年了。“在哪里处理数据”的钟摆在高度集中的方法（如大型机或集中云服务）和更分散的方法（如PC和移动设备）之间摇摆。连接和延迟挑战、带宽限制以及嵌入在边缘的更大功能都有利于分布式部署模型。处理能力的优势和在超尺度下运行的低成本，加上管理和协调数千个地理上分离的端点的复杂性，有利于集中化模型。</p>
<p>当前对边缘计算的大部分关注来自于物联网系统向特定行业（如制造业或零售业）的嵌入式物联网世界提供断开连接或分布式功能的需求。拓扑的广泛应用以及明确的应用和网络体系结构还不常见。需要扩展系统和网络管理平台，以包括边缘位置和边缘功能特定技术。边缘计算解决了许多紧迫的问题，例如高广域网成本和不可接受的延迟。边缘计算拓扑结构将使数字业务和IT解决方案在不久的将来具有独特的优势。</p>
<p>边缘计算和云计算是互补的概念</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190604233613.png"></p>
<h2 id="趋势6-沉浸体验"><a href="#趋势6-沉浸体验" class="headerlink" title="趋势6:沉浸体验"></a>趋势6:沉浸体验</h2><p>到2028年，用户体验将经历用户对数字的感知方式的重大转变。<br>世界以及他们如何与之互动。对话平台正在改变人们与数字世界互动的方式。虚拟现实（VR）、增强现实（AR）和混合现实（MR）正在改变人们对数字世界的感知方式。这种感知和交互模式的结合转变将带来未来的沉浸式用户体验。这种模式将从一个懂技术的人转变为一个懂技术的人。翻译意图的负担将从用户转移到计算机上。通过许多人的感官与用户交流的能力将为传递细微信息提供更丰富的环境。</p>
<h3 id="VR-and-AR"><a href="#VR-and-AR" class="headerlink" title="VR and AR"></a>VR and AR</h3><p>虚拟现实和现实现实是分开的，但相关的技术。MR扩展了两种方法，以更强大的方式将物理世界结合起来。体验的视觉方面很重要，但其他感官模型也很重要，如触觉（触觉反馈）和声音（空间音频）。特别是在MR中，用户可以与数字和现实世界中的对象交互，同时在物理世界中保持存在。</p>
<p>虚拟现实提供了一个计算机生成的三维环境，它围绕着一个用户，以一种自然的方式响应一个人的行为。这通常是通过一个身临其境的头戴式显示器（HMD），阻止用户的整个视野。手势识别或手持控制器提供手和身体跟踪，并可结合触摸敏感反馈。位置跟踪使一个或多个参与者能够在没有位置的房间中行走。基于房间的系统提供了更深的沉浸感，为多个参与者提供了一种3D体验，或者一个人可以在没有房间的房间里行走。</p>
<p>增强现实是以文本、图形、视频和其他与现实世界对象集成的虚拟增强的形式实时使用信息。它是使用HMD或移动设备呈现的。虚拟世界元素在现实世界背景上的叠加将AR与虚拟现实区分开来。增强现实旨在增强用户与真实物理环境的交互，而不是将它们与实际物理环境分离。这个定义也适用于MR。一般来说，MR使人们能够与虚拟对象交互。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190604235653.png"></p>
<hr>
<pre><code>摘译自：https://www.gartner.com</code></pre>
]]></content>
      <categories>
        <category>Gartner</category>
        <category>趋势</category>
      </categories>
      <tags>
        <tag>科技趋势</tag>
        <tag>Gartner</tag>
        <tag>战略研究</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年10大战略性科技趋势7·8·9·10</title>
    <url>/2019/06/05/2019%E5%B9%B410%E5%A4%A7%E6%88%98%E7%95%A5%E6%80%A7%E7%A7%91%E6%8A%80%E8%B6%8B%E5%8A%BF7%C2%B78%C2%B79%C2%B710/</url>
    <content><![CDATA[<h1 id="2019年十大战略技术趋势"><a href="#2019年十大战略技术趋势" class="headerlink" title="2019年十大战略技术趋势"></a>2019年十大战略技术趋势</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190527105918.png"></p>
<h2 id="趋势7-区块链"><a href="#趋势7-区块链" class="headerlink" title="趋势7:区块链"></a>趋势7:区块链</h2><p>区块链是一种分布式账本。分布式账本是一个按时间顺序扩展的加密签名、不可撤销的交易记录列表，由网络中的所有参与者共享。</p>
<p>区块链通过消除业务摩擦提供业务价值，通过使分类账独立于单个应用程序和参与者来实现这一点，并在分布式网络中复制分类账，以创建基于共识的重大事件权威记录。</p>
<p>区块链还支持分布式信任架构，允许不受信任方进行商业交易，并使用各种资产创造和交换价值。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190605225914.png"></p>
<p>区块链承诺通过建立信任、提供透明度和减少业务生态系统之间的摩擦、潜在地降低成本、减少交易结算时间和改善现金流来重塑行业。</p>
<p>完整的区块链解决方案面临着关键挑战，这些挑战将成为2023年强大的可扩展解决方案的交付的巨大阻碍。区块链技术和概念是不成熟的，在关键任务和规模业务运营中无法被理解和验证。</p>
<p>尽管如此，到2030年，区块链将创造3.1万亿美元的商业价值。</p>
<p>区块链的实用方法发展需求：</p>
<ul>
<li>清楚了解业务机会和潜在的行业影响</li>
<li>清楚了解区块链技术的能力和局限性</li>
<li>信任架构</li>
<li>实现技术发展所需的技能</li>
</ul>
<h2 id="趋势8-智能空间"><a href="#趋势8-智能空间" class="headerlink" title="趋势8:智能空间"></a>趋势8:智能空间</h2><p>智能空间是一种物理或数字环境，在这种环境中，人类和技术支持的系统在日益开放、连接、协调和智能的生态系统中相互作用。多个元素——包括人、流程、服务和事物——在一个智能空间中聚集在一起，为一组目标人物或行业场景创造一种更加沉浸式、交互式和自动化的体验。</p>
<p>一段时间以来，这一趋势一直围绕着智能城市、数字工作场所、智能家居和互联工厂等要素展开。我们相信，市场正进入一个快速交付强大智能空间的时期，无论是作为员工、客户、消费者、社区成员还是公民，技术都将成为我们日常生活中不可或缺的一部分。人工智能相关趋势、物联网连接边缘设备的扩展、物联网和组织的数字孪生兄弟的发展以及区块链的成熟，为推动目标环境中更多的连接、协调和智能解决方案提供了越来越多的机会。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190605230838.png"></p>
<p>智能空间正沿着五个关键维度发展：</p>
<ul>
<li>开放 Openness</li>
<li>互联 Connectedness</li>
<li>协调 Coordination</li>
<li>智能 Intelligence</li>
<li>有界 Scope</li>
</ul>
<p>一看就明白，不多解释了。</p>
<h2 id="趋势9-数字伦理和隐私"><a href="#趋势9-数字伦理和隐私" class="headerlink" title="趋势9:数字伦理和隐私"></a>趋势9:数字伦理和隐私</h2><p>数字道德和隐私正日益受到个人、组织和政府的关注。消费者越来越意识到他们的个人信息是有价值的，并要求控制。各组织认识到保护和管理个人数据的风险越来越大，各国政府正在实施严格的立法，以确保做到这一点。</p>
<p>任何关于隐私的讨论都必须以更广泛的数字道德和客户、参与者和员工的信任为基础。虽然隐私和安全是建立信任的基础组件，但信任实际上不仅仅是这些组件。正如牛津词典所定义的，“信任”是对某人或某物的可靠性、真实性或能力的坚定信念。信任是在没有证据或调查的情况下接受陈述的真实性。最终，一个组织在隐私方面的立场必须由其在伦理和信任方面的更广泛立场所驱动。从隐私到道德的转变将对话从“我们是否顺从”转向“我们是否做了正确的事情”。从合规驱动的组织到道德驱动的组织的转变可以被描述为以下几个意图层次：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190605231415.png"></p>
<p>Mind compliance：作为层次结构中的最低级别，心理依从性是由外部驱动的，并专注于避免问题。在这里，企业根据允许的内容来决定技术的使用。如果没有反对建议的规则，就允许这样做。</p>
<p>Mitigating risk：这一级别的重点是企业愿意承担的风险，而不会对自身造成伤害。这包括评估对他人造成伤害的风险，以及“被抓住”做一些会导致公众尴尬和名誉风险的事情。</p>
<p>Makeing a difference：伦理考虑可以用来改变客户、行业甚至整个社会。对于商业企业来说，这意味着通过在道德之外创造价值主张来实现竞争差异化。对于公共部门机构来说，这可能意味着根据他们的期望为公民创造价值。</p>
<p>Following your values：这是指由你的道德指南针驱动的决策。你的品牌代表什么？你有什么公司价值观？你的“品牌许可”是什么？</p>
<h2 id="趋势10-量子计算"><a href="#趋势10-量子计算" class="headerlink" title="趋势10:量子计算"></a>趋势10:量子计算</h2><p>一种商业化、价格合理、可靠的量子计算（qc）产品或服务可以改变一个行业。一个例子是药品，在药品中，新的药物化合物可以快速衍生，客户或人群的细分可以发生在地方政府、航空公司、零售和金融服务部门。在过去的两年里，Gartner对质量控制的调查每年增加了三倍多。引起这一兴趣的因素有三个：</p>
<ul>
<li>量子计算控制对密码术的威胁</li>
<li>对量子计算的能力和特定应用的时间框架的好奇</li>
<li>量子计算作为竞争优势的潜在用途</li>
</ul>
<p>量子计算的主要潜在应用包括：</p>
<ul>
<li>优化。优化问题很可能是质量控制的第一个用例。质量控制优化可能有助于机器学习、人工智能和神经网络。他们的承诺是，随着技术的成熟，到2023年，他们将能够显著提高模式识别的加速。</li>
<li>材料科学。质量控制可用于分析复杂的原子相互作用，从而更快地发现新材料，从而实现新经济和新发现。创造新的可申请专利的材料是关键行业早期采用者的主要潜在利润来源。</li>
<li>化学。qc可以在原子尺度上实现量子模拟，允许设计新的化学过程。</li>
<li>个性化药物。质量控制可以用来模拟原子水平的分子相互作用，以加快新的癌症治疗药物上市的时间。质量控制可以加速并更准确地预测蛋白质的相互作用，从而产生新的药物方法。</li>
<li>生物学。qc可用于光合作用等过程的自然量子模拟，或用于模拟能量系统和相互作用。质量控制可以帮助加速新的或改进肥料的开发，帮助改善世界粮食来源。</li>
</ul>
<p>许多挑战仍然存在：</p>
<ul>
<li>量子误差。当谈到量子优势时，最小化量子误差是很重要的。将通用的门模型量子计算机扩展到实际的有用尺寸将需要加入量子误差校正方案。人们相信，当量子计算机达到100到300个逻辑量子比特，并且有些复杂的问题需要更多的解决时，就可以完成有意义的工作。</li>
<li>去相干。当一个量子系统不完全与环境隔离，而是与环境接触时，相干随时间衰减。这个过程叫做量子退相干。量子算法只在相干到位时执行。目前，只有很短的相干时间是可能的。</li>
<li>缺乏标准的开发语言。由于系统的量子性质，质量控制开发语言将与现有的开发语言非常不同。随着硬件的进步，招募和培训开发人员，建立产品的思想共享，使其成为标准，这是一场竞赛。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190605232213.png"></p>
<hr>
<pre><code>摘译自：https://www.gartner.com</code></pre>
]]></content>
      <categories>
        <category>Gartner</category>
        <category>趋势</category>
      </categories>
      <tags>
        <tag>科技趋势</tag>
        <tag>Gartner</tag>
        <tag>战略研究</tag>
      </tags>
  </entry>
  <entry>
    <title>2小时带你读完《每天学点实用心理学》</title>
    <url>/2020/01/21/2%E5%B0%8F%E6%97%B6%E5%B8%A6%E4%BD%A0%E8%AF%BB%E5%AE%8C%E3%80%8A%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9%E5%AE%9E%E7%94%A8%E5%BF%83%E7%90%86%E5%AD%A6%E3%80%8B/</url>
    <content><![CDATA[<h1 id="遇见心理学，看清真实的自己"><a href="#遇见心理学，看清真实的自己" class="headerlink" title="遇见心理学，看清真实的自己"></a>遇见心理学，看清真实的自己</h1><ol>
<li>看到“鬼”了，大多数情况下是视觉后效</li>
<li>梦境反应的是潜意识</li>
<li>经常与自己沟通，心理暗示远远比你想象的更重要</li>
</ol>
<h1 id="解读心理学，心理无时不在被“出卖”"><a href="#解读心理学，心理无时不在被“出卖”" class="headerlink" title="解读心理学，心理无时不在被“出卖”"></a>解读心理学，心理无时不在被“出卖”</h1><h2 id="微表情"><a href="#微表情" class="headerlink" title="微表情"></a>微表情</h2><h3 id="眼睛"><a href="#眼睛" class="headerlink" title="眼睛"></a>眼睛</h3><ol>
<li>眼球左上：回忆</li>
<li>眼球左下：思考，与自己对话</li>
<li>眼球右上：创造视觉想象（说谎）</li>
<li>眼球右下：感受情感、触觉</li>
<li>眼球向左、向右平视：思考，弄懂别人的话</li>
<li>眨眼频率先变快后变慢：很有可能在说假话</li>
<li>长时间凝视对方：极度自信，目空一切</li>
</ol>
<h3 id="眉毛"><a href="#眉毛" class="headerlink" title="眉毛"></a>眉毛</h3><ol>
<li>眉毛上扬：积极情绪</li>
<li>皱眉：防护性、侵略性</li>
<li>耸眉：不愉快、无可奈何</li>
</ol>
<h3 id="鼻子"><a href="#鼻子" class="headerlink" title="鼻子"></a>鼻子</h3><ol>
<li>鼻孔长大：兴奋、紧张、恐惧</li>
<li>鼻头冒汗：焦躁、紧张</li>
<li>鼻子提起：轻蔑</li>
</ol>
<h3 id="嘴巴"><a href="#嘴巴" class="headerlink" title="嘴巴"></a>嘴巴</h3><ol>
<li>咬嘴唇：认真、专注</li>
<li>缩拢嘴唇：否定</li>
<li>嘴角上扬/下拉：高兴/沮丧</li>
<li>嘴唇圆满呈现：放松</li>
<li>嘴唇闭起来：紧张</li>
</ol>
<h2 id="微行为"><a href="#微行为" class="headerlink" title="微行为"></a>微行为</h2><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><ol>
<li>抬头：有意投入</li>
<li>低头：谦卑、害羞</li>
<li>点头/摇头：同意/否定</li>
<li>歪头：示弱（头和脸向一侧歪，露出脖颈）、怀疑（下巴向一侧歪）</li>
<li>猛然上扬：惊讶</li>
<li>僵直：无畏或者无聊</li>
</ol>
<h3 id="舌头"><a href="#舌头" class="headerlink" title="舌头"></a>舌头</h3><ol>
<li>吐舌头：专注，或是为了缓解紧张以表示准备完毕</li>
<li>舔嘴唇：压力大</li>
<li>露出舌尖：调皮</li>
</ol>
<h3 id="手"><a href="#手" class="headerlink" title="手"></a>手</h3><ol>
<li>尖塔式：自信</li>
<li>交叉式：压力、焦虑</li>
<li>竖起大拇指：优越感</li>
<li>双手摊开：真诚、坦率</li>
<li>双手紧握：显示力量、安全感</li>
<li>双手插兜：不打算行动</li>
<li>双手冻结（手部动作大大减少）：精神紧张，大概率在说谎</li>
<li>搓手、摩拳擦掌：期待、自信</li>
<li>摸鼻子：内心换乱，紧张</li>
<li>摸下巴：自我安慰</li>
<li>摸耳朵：紧张、抗拒、说谎，说话喜欢摸耳朵的人通常心思超极细腻</li>
</ol>
<h3 id="手臂"><a href="#手臂" class="headerlink" title="手臂"></a>手臂</h3><ol>
<li>收紧或合于身前：防御</li>
<li>手臂挥动：高兴</li>
<li>手臂下沉：消极情绪</li>
<li>张开双臂：放松</li>
<li>背在身后：自信</li>
<li>叉腰：维护权威</li>
<li>双手抱头，打开手臂：投降，或者极度放松、声明统治权</li>
</ol>
<h3 id="腿"><a href="#腿" class="headerlink" title="腿"></a>腿</h3><ol>
<li>双腿抖动：兴奋、高兴</li>
<li>双腿交叉：放松、自信</li>
<li>跷二郎腿：舒服、自信</li>
<li>双腿分开站立：有信心、膨胀</li>
<li>脚踝相扣：克制情绪、隐藏信息</li>
<li>双脚转向：期望离开</li>
<li>脚跟着地、脚尖上翘：心情很好</li>
<li>双脚冻结：遇到威胁</li>
</ol>
<h2 id="色彩心理学"><a href="#色彩心理学" class="headerlink" title="色彩心理学"></a>色彩心理学</h2><h3 id="色彩使用的讲究"><a href="#色彩使用的讲究" class="headerlink" title="色彩使用的讲究"></a>色彩使用的讲究</h3><ol>
<li>色彩的温度：有冷到暖-&gt;蓝色，绿色，紫色，黄色，红色</li>
<li>色彩的重量：搬家用浅色的白箱，保险柜用深色的黑箱</li>
<li>色彩的距离感：蓝色的汽车遇到的追尾事故比红色的汽车要多，因为冷色系让人感觉更远</li>
<li>色彩的时间感：浅色让人感觉到的时间变慢，深色让人感觉到的时间变快</li>
</ol>
<h3 id="色彩代表的性格"><a href="#色彩代表的性格" class="headerlink" title="色彩代表的性格"></a>色彩代表的性格</h3><ol>
<li>红色：行动者</li>
<li>蓝色：思想者</li>
<li>黄色：领导者</li>
<li>绿色：和平主义者</li>
</ol>
<h2 id="情绪心理学"><a href="#情绪心理学" class="headerlink" title="情绪心理学"></a>情绪心理学</h2><h3 id="情绪定律"><a href="#情绪定律" class="headerlink" title="情绪定律"></a>情绪定律</h3><p>人在情绪高涨的时候，看什么都顺眼，做什么都顺手；人在情绪低落的时候，做什么都不顺手，做什么都别扭。</p>
<h3 id="给自己的坏情绪找个排泄的出口"><a href="#给自己的坏情绪找个排泄的出口" class="headerlink" title="给自己的坏情绪找个排泄的出口"></a>给自己的坏情绪找个排泄的出口</h3><ul>
<li>补偿法：用新的目标代替原本失败的目标</li>
<li>发泄法：语言上的发泄或者肢体上的发泄</li>
</ul>
<h1 id="成功心理学：成功是可以“想”出来的"><a href="#成功心理学：成功是可以“想”出来的" class="headerlink" title="成功心理学：成功是可以“想”出来的"></a>成功心理学：成功是可以“想”出来的</h1><h2 id="让成功的信念破土而出"><a href="#让成功的信念破土而出" class="headerlink" title="让成功的信念破土而出"></a>让成功的信念破土而出</h2><h3 id="贝尔效应：时刻强化自己的成功意识"><a href="#贝尔效应：时刻强化自己的成功意识" class="headerlink" title="贝尔效应：时刻强化自己的成功意识"></a>贝尔效应：时刻强化自己的成功意识</h3><p>人们只要想着成功，成功的景象就会出现在心中。</p>
<h3 id="舍恩定理：胸怀必胜的信念"><a href="#舍恩定理：胸怀必胜的信念" class="headerlink" title="舍恩定理：胸怀必胜的信念"></a>舍恩定理：胸怀必胜的信念</h3><p>新思想只有在真正相信它、对它着迷的人手中，才可以开怀结果。</p>
<h3 id="詹森效应：摒弃杂念，别让自己发挥失常"><a href="#詹森效应：摒弃杂念，别让自己发挥失常" class="headerlink" title="詹森效应：摒弃杂念，别让自己发挥失常"></a>詹森效应：摒弃杂念，别让自己发挥失常</h3><p>平时表现良好，但因为没有足够的心理准备而在关键比赛场合失败的现象。</p>
<h2 id="向着成功的目标前进"><a href="#向着成功的目标前进" class="headerlink" title="向着成功的目标前进"></a>向着成功的目标前进</h2><h3 id="手表效应：朝着一个目标前行才会更专注"><a href="#手表效应：朝着一个目标前行才会更专注" class="headerlink" title="手表效应：朝着一个目标前行才会更专注"></a>手表效应：朝着一个目标前行才会更专注</h3><p>每个人都不能同时挑选两种或两种以上的行为准则或者目标信念，否则他的工作和生活很快就会陷入混乱。</p>
<h3 id="自我选择效应：三年前的选择决定你的今天"><a href="#自我选择效应：三年前的选择决定你的今天" class="headerlink" title="自我选择效应：三年前的选择决定你的今天"></a>自我选择效应：三年前的选择决定你的今天</h3><p>我们今天的选择将决定我们三年后的生活，什么样的选择会产生什么样的结果。</p>
<h3 id="客服半途效应：大目标，小步子"><a href="#客服半途效应：大目标，小步子" class="headerlink" title="客服半途效应：大目标，小步子"></a>客服半途效应：大目标，小步子</h3><p>当一个人对某一特定目标的追求进行到一半时，通常会对自己能否完成最终目标而产生怀疑，甚至对完成这一目标的意义产生怀疑。</p>
<h3 id="执着心理：不要停止，从开始一直走到最后"><a href="#执着心理：不要停止，从开始一直走到最后" class="headerlink" title="执着心理：不要停止，从开始一直走到最后"></a>执着心理：不要停止，从开始一直走到最后</h3><p>执着能让我们获得更多的机会，执着能让我们的行为受到钦佩，执着能让我们距离成功更近一步。</p>
<h2 id="走出思维局限，把握成功机遇"><a href="#走出思维局限，把握成功机遇" class="headerlink" title="走出思维局限，把握成功机遇"></a>走出思维局限，把握成功机遇</h2><h3 id="墨菲定律：成功都伴随着错误发生"><a href="#墨菲定律：成功都伴随着错误发生" class="headerlink" title="墨菲定律：成功都伴随着错误发生"></a>墨菲定律：成功都伴随着错误发生</h3><p>事情如果有变坏的可能，不过这种可能性有多小，它总会发生，并造成最大可能的破坏。</p>
<h3 id="约拿情结：畏首畏尾将一事无成"><a href="#约拿情结：畏首畏尾将一事无成" class="headerlink" title="约拿情结：畏首畏尾将一事无成"></a>约拿情结：畏首畏尾将一事无成</h3><p>期待机会，却又恐惧机会，对迎面而来的机会感到恐惧。</p>
<h3 id="避免塞里格曼效应：冷静面对失败的定居"><a href="#避免塞里格曼效应：冷静面对失败的定居" class="headerlink" title="避免塞里格曼效应：冷静面对失败的定居"></a>避免塞里格曼效应：冷静面对失败的定居</h3><p>因失败而产生的绝望、抑郁和意志消沉。</p>
<h3 id="瓦拉赫效应：要懂得经营自己的长处"><a href="#瓦拉赫效应：要懂得经营自己的长处" class="headerlink" title="瓦拉赫效应：要懂得经营自己的长处"></a>瓦拉赫效应：要懂得经营自己的长处</h3><p>每个人都不可能是全才，每个人都有其独特的优势和劣势，只要让一个人的优势得到充分的发挥，他一定能够取得惊人的成绩。</p>
<h3 id="避免竞争优势效应：合作才能共赢"><a href="#避免竞争优势效应：合作才能共赢" class="headerlink" title="避免竞争优势效应：合作才能共赢"></a>避免竞争优势效应：合作才能共赢</h3><p>通常来说，在双方有共同利益的时候，人们都会优先选择竞争，而不是选择对双方都有利的合作。</p>
<h1 id="社交心理学：相逢即是缘，四海皆兄弟"><a href="#社交心理学：相逢即是缘，四海皆兄弟" class="headerlink" title="社交心理学：相逢即是缘，四海皆兄弟"></a>社交心理学：相逢即是缘，四海皆兄弟</h1><h2 id="轻松吸引他人的秘诀"><a href="#轻松吸引他人的秘诀" class="headerlink" title="轻松吸引他人的秘诀"></a>轻松吸引他人的秘诀</h2><h3 id="首因效应：第一印象是重头戏"><a href="#首因效应：第一印象是重头戏" class="headerlink" title="首因效应：第一印象是重头戏"></a>首因效应：第一印象是重头戏</h3><p>人们第一次与某物或某人接触时会给对方留下深刻的印象。</p>
<h3 id="真诚原则：没有真诚，就会丧失一切"><a href="#真诚原则：没有真诚，就会丧失一切" class="headerlink" title="真诚原则：没有真诚，就会丧失一切"></a>真诚原则：没有真诚，就会丧失一切</h3><p>人与人相遇靠的是一点缘分，人与人相处靠的则是一份诚意。</p>
<h3 id="南风法则：“热情”让你轻松走进他人心中"><a href="#南风法则：“热情”让你轻松走进他人心中" class="headerlink" title="南风法则：“热情”让你轻松走进他人心中"></a>南风法则：“热情”让你轻松走进他人心中</h3><p>南风法则也叫温暖法则，它源于法国作家拉·封丹的一则寓言：南风的温暖比北风的凌冽更容易让人脱下大衣。</p>
<h3 id="亲和效应：学会成为他人的“自己人”"><a href="#亲和效应：学会成为他人的“自己人”" class="headerlink" title="亲和效应：学会成为他人的“自己人”"></a>亲和效应：学会成为他人的“自己人”</h3><p>在人们的交际过程中，如果彼此间存在着某种共同之处或者相似的地方，那么双方就更容易互相接近，也更容易萌生亲密感。</p>
<h3 id="暴露缺点效应：有一些小缺点比完美更好"><a href="#暴露缺点效应：有一些小缺点比完美更好" class="headerlink" title="暴露缺点效应：有一些小缺点比完美更好"></a>暴露缺点效应：有一些小缺点比完美更好</h3><p>一个人往往会因为有些小小的缺点，而显得更加可敬可爱。</p>
<h2 id="有效互动，缩短彼此间的距离"><a href="#有效互动，缩短彼此间的距离" class="headerlink" title="有效互动，缩短彼此间的距离"></a>有效互动，缩短彼此间的距离</h2><h3 id="自我暴露原则：适度袒露心声，增进彼此感情"><a href="#自我暴露原则：适度袒露心声，增进彼此感情" class="headerlink" title="自我暴露原则：适度袒露心声，增进彼此感情"></a>自我暴露原则：适度袒露心声，增进彼此感情</h3><p>良好的人际关系是在双方间自我爆率逐渐增加的过程中发展起来的。</p>
<h3 id="同情效应：亮“辛酸史”，用悲情牌套近乎"><a href="#同情效应：亮“辛酸史”，用悲情牌套近乎" class="headerlink" title="同情效应：亮“辛酸史”，用悲情牌套近乎"></a>同情效应：亮“辛酸史”，用悲情牌套近乎</h3><p>同情容易引起好感</p>
<h3 id="倾听定律：“听”比“说”更重要"><a href="#倾听定律：“听”比“说”更重要" class="headerlink" title="倾听定律：“听”比“说”更重要"></a>倾听定律：“听”比“说”更重要</h3><p>人们对自己的关注大多胜于他人，所以如果你想进入他人的世界，获得他人的认可，就要学会关注他人。</p>
<h3 id="跷跷板定律：投桃报李，礼尚往来"><a href="#跷跷板定律：投桃报李，礼尚往来" class="headerlink" title="跷跷板定律：投桃报李，礼尚往来"></a>跷跷板定律：投桃报李，礼尚往来</h3><p>要让对方高一些，就必须使自己低一些；要让自己高一些，就必须使对方低一些。</p>
<h3 id="频率原则：见面长不如常见面"><a href="#频率原则：见面长不如常见面" class="headerlink" title="频率原则：见面长不如常见面"></a>频率原则：见面长不如常见面</h3><p>见面频率低的朋友远不如见面频率高的朋友间的情谊深。</p>
<h3 id="刺猬法则：拿捏好彼此间的最佳距离"><a href="#刺猬法则：拿捏好彼此间的最佳距离" class="headerlink" title="刺猬法则：拿捏好彼此间的最佳距离"></a>刺猬法则：拿捏好彼此间的最佳距离</h3><p>刺猬彼此靠近取暖，但是距离太近又会被刺痛。</p>
<h2 id="化解问题和冲突的黄金法则"><a href="#化解问题和冲突的黄金法则" class="headerlink" title="化解问题和冲突的黄金法则"></a>化解问题和冲突的黄金法则</h2><h3 id="登门槛效应：步步为营，登入对方心境"><a href="#登门槛效应：步步为营，登入对方心境" class="headerlink" title="登门槛效应：步步为营，登入对方心境"></a>登门槛效应：步步为营，登入对方心境</h3><p>一个人若是接受了他人提出的一个小要求后，他会更容易接受后续更高的要求。</p>
<h3 id="无声定律：在适当的时候保持沉默"><a href="#无声定律：在适当的时候保持沉默" class="headerlink" title="无声定律：在适当的时候保持沉默"></a>无声定律：在适当的时候保持沉默</h3><p>沉默可以给人一种特别的压力，让对方望而却步，从而在适当的时候化解矛盾和冲突。</p>
<h3 id="留面子效应：处处要给别人留面子"><a href="#留面子效应：处处要给别人留面子" class="headerlink" title="留面子效应：处处要给别人留面子"></a>留面子效应：处处要给别人留面子</h3><p>先提出一个大要求，在被拒绝之后，再提出小要求，小要求被接受的可能性更高。</p>
<h3 id="换位思考：用换位思维“化敌为友”"><a href="#换位思考：用换位思维“化敌为友”" class="headerlink" title="换位思考：用换位思维“化敌为友”"></a>换位思考：用换位思维“化敌为友”</h3><p>站在对方的立场上去体验和思考问题。</p>
<h3 id="标签效应：给自己贴上宽容的标签"><a href="#标签效应：给自己贴上宽容的标签" class="headerlink" title="标签效应：给自己贴上宽容的标签"></a>标签效应：给自己贴上宽容的标签</h3><p>人们一旦被贴上某种标签，就会成为标签所标定的人。</p>
<h1 id="职场心理学：左右逢源，叱咤职场"><a href="#职场心理学：左右逢源，叱咤职场" class="headerlink" title="职场心理学：左右逢源，叱咤职场"></a>职场心理学：左右逢源，叱咤职场</h1><h2 id="求职第一步，把握好面试的关键时刻"><a href="#求职第一步，把握好面试的关键时刻" class="headerlink" title="求职第一步，把握好面试的关键时刻"></a>求职第一步，把握好面试的关键时刻</h2><h3 id="杜根定律：用自信的明灯展现你的风采"><a href="#杜根定律：用自信的明灯展现你的风采" class="headerlink" title="杜根定律：用自信的明灯展现你的风采"></a>杜根定律：用自信的明灯展现你的风采</h3><p>强者不一定是胜利者，但胜利迟早都属于那些有信心的人。</p>
<h3 id="避免羊群效应：不盲从，不打无准备之仗"><a href="#避免羊群效应：不盲从，不打无准备之仗" class="headerlink" title="避免羊群效应：不盲从，不打无准备之仗"></a>避免羊群效应：不盲从，不打无准备之仗</h3><p>全面认识自己，知己知彼，摆脱盲从的误区。</p>
<h3 id="近因效应：应变能力不容忽视"><a href="#近因效应：应变能力不容忽视" class="headerlink" title="近因效应：应变能力不容忽视"></a>近因效应：应变能力不容忽视</h3><p>人们识记一系列事物时，通常末尾部分形成的记忆最强烈。</p>
<h2 id="脚踏实地，做一个受欢迎的职场人士"><a href="#脚踏实地，做一个受欢迎的职场人士" class="headerlink" title="脚踏实地，做一个受欢迎的职场人士"></a>脚踏实地，做一个受欢迎的职场人士</h2><h3 id="路径依赖法则：职场的第一步决定成败"><a href="#路径依赖法则：职场的第一步决定成败" class="headerlink" title="路径依赖法则：职场的第一步决定成败"></a>路径依赖法则：职场的第一步决定成败</h3><p>人们一旦选择进入某一路径，无论这一路径是好是坏，惯性的力量会使这一选择不断自我强化，让其轻易走不出去。</p>
<h3 id="蘑菇定律：成蝶需先破茧"><a href="#蘑菇定律：成蝶需先破茧" class="headerlink" title="蘑菇定律：成蝶需先破茧"></a>蘑菇定律：成蝶需先破茧</h3><p>人们在刚刚步入某一领域时，常常在一段时间内完全被置于自生自灭的状态下。</p>
<h3 id="榜样效应：三人行，必有我师"><a href="#榜样效应：三人行，必有我师" class="headerlink" title="榜样效应：三人行，必有我师"></a>榜样效应：三人行，必有我师</h3><p>在心中梳理某方面的榜样有助于我们梳理正确的人生理想。</p>
<h3 id="冷热水效应：学会调控他人的心理期待"><a href="#冷热水效应：学会调控他人的心理期待" class="headerlink" title="冷热水效应：学会调控他人的心理期待"></a>冷热水效应：学会调控他人的心理期待</h3><p>同样一杯温水，如果摸之前先摸了冷水，会觉得更热；如果摸之前先摸了热水，会觉得更冷。</p>
<h2 id="突破心理关，掌控好你的工作节奏"><a href="#突破心理关，掌控好你的工作节奏" class="headerlink" title="突破心理关，掌控好你的工作节奏"></a>突破心理关，掌控好你的工作节奏</h2><h3 id="杜利奥定理：时刻保持工作热情"><a href="#杜利奥定理：时刻保持工作热情" class="headerlink" title="杜利奥定理：时刻保持工作热情"></a>杜利奥定理：时刻保持工作热情</h3><p>没有什么比市区热忱更使人觉得垂垂老矣。精神状态不佳，一切都将处于不佳状态。</p>
<h3 id="齐加尼克效应：提高效率，适时放松"><a href="#齐加尼克效应：提高效率，适时放松" class="headerlink" title="齐加尼克效应：提高效率，适时放松"></a>齐加尼克效应：提高效率，适时放松</h3><p>第一天的工作没有做完，在休息时间，也会出现心里紧张状态。</p>
<h3 id="酝酿效应：遇到难题，歇一歇"><a href="#酝酿效应：遇到难题，歇一歇" class="headerlink" title="酝酿效应：遇到难题，歇一歇"></a>酝酿效应：遇到难题，歇一歇</h3><p>不知道从何下手的事情，搁置一段时间后会忽然茅塞顿开。</p>
<h2 id="发挥优势，推动职业生涯发展"><a href="#发挥优势，推动职业生涯发展" class="headerlink" title="发挥优势，推动职业生涯发展"></a>发挥优势，推动职业生涯发展</h2><h3 id="青蛙效应：安逸是晋升最大的“敌人”"><a href="#青蛙效应：安逸是晋升最大的“敌人”" class="headerlink" title="青蛙效应：安逸是晋升最大的“敌人”"></a>青蛙效应：安逸是晋升最大的“敌人”</h3><p>温水煮青蛙，安逸不仅能让我们忽略周围环境的变化，还会让我们失去很多机会。</p>
<h3 id="避免升职负效应：戒骄戒躁，升职先升值"><a href="#避免升职负效应：戒骄戒躁，升职先升值" class="headerlink" title="避免升职负效应：戒骄戒躁，升职先升值"></a>避免升职负效应：戒骄戒躁，升职先升值</h3><p>如果水平不够提前升值，容易出现：</p>
<ol>
<li>未及时改变时间规划，疲于奔命，总感觉时间不够用</li>
<li>升值后故步自封，不再有更长远的职业规划</li>
</ol>
<h1 id="管理心理学：一呼百应的管理秘诀"><a href="#管理心理学：一呼百应的管理秘诀" class="headerlink" title="管理心理学：一呼百应的管理秘诀"></a>管理心理学：一呼百应的管理秘诀</h1><h2 id="以人为本，赢得员工的心"><a href="#以人为本，赢得员工的心" class="headerlink" title="以人为本，赢得员工的心"></a>以人为本，赢得员工的心</h2><h3 id="雷尼尔效应：增强自身的感召力"><a href="#雷尼尔效应：增强自身的感召力" class="headerlink" title="雷尼尔效应：增强自身的感召力"></a>雷尼尔效应：增强自身的感召力</h3><p>因为可以从华盛顿大学食堂看到雷尼尔山峰，教授们就算工资低一些也愿意在这里工作。</p>
<h3 id="马斯洛需求层次理论"><a href="#马斯洛需求层次理论" class="headerlink" title="马斯洛需求层次理论"></a>马斯洛需求层次理论</h3><p>胜利需求、安全需求、归属与爱的需求、尊重需求、自我实现需求。</p>
<h3 id="避免刻板效应：沟通让管理更顺畅"><a href="#避免刻板效应：沟通让管理更顺畅" class="headerlink" title="避免刻板效应：沟通让管理更顺畅"></a>避免刻板效应：沟通让管理更顺畅</h3><p>刻板效应又叫定型效应，道听途说或者先入为主的想法都会使你的认知与真实情况产生极大的偏差。因此，经常与下属沟通至关重要。</p>
<h3 id="保龄球效应：赞美比批评更有效"><a href="#保龄球效应：赞美比批评更有效" class="headerlink" title="保龄球效应：赞美比批评更有效"></a>保龄球效应：赞美比批评更有效</h3><p>多看事情的正面，不断的表扬，会使人进步更快。</p>
<h2 id="管理有术，让每位员工发挥最大的潜能"><a href="#管理有术，让每位员工发挥最大的潜能" class="headerlink" title="管理有术，让每位员工发挥最大的潜能"></a>管理有术，让每位员工发挥最大的潜能</h2><h3 id="罗森塔尔效应：用积极暗示激发员工自信"><a href="#罗森塔尔效应：用积极暗示激发员工自信" class="headerlink" title="罗森塔尔效应：用积极暗示激发员工自信"></a>罗森塔尔效应：用积极暗示激发员工自信</h3><p>向一个人传递积极的期望，他就会进步得更快，发展得更好。</p>
<h3 id="需求激励理论：掌握员工需求，用心去激励"><a href="#需求激励理论：掌握员工需求，用心去激励" class="headerlink" title="需求激励理论：掌握员工需求，用心去激励"></a>需求激励理论：掌握员工需求，用心去激励</h3><p>成就需要、权利需要、友谊需要。</p>
<h3 id="鲶鱼效应：加强员工竞争意识，提升企业活力"><a href="#鲶鱼效应：加强员工竞争意识，提升企业活力" class="headerlink" title="鲶鱼效应：加强员工竞争意识，提升企业活力"></a>鲶鱼效应：加强员工竞争意识，提升企业活力</h3><p>鲶鱼会捕食沙丁鱼，在沙丁鱼的鱼槽中放入一条鲶鱼，会使沙丁鱼保持活力。</p>
<h3 id="马蝇效应：对症下药，投其所好"><a href="#马蝇效应：对症下药，投其所好" class="headerlink" title="马蝇效应：对症下药，投其所好"></a>马蝇效应：对症下药，投其所好</h3><p>因为有压力，所以有动力。</p>
<h3 id="气质学理论：让合适的人做合适的事"><a href="#气质学理论：让合适的人做合适的事" class="headerlink" title="气质学理论：让合适的人做合适的事"></a>气质学理论：让合适的人做合适的事</h3><ul>
<li>胆汁质：精力旺盛，勇敢果断</li>
<li>多血质：活泼好动，情感外露</li>
<li>粘液质：沉稳，有耐心，自信心强</li>
<li>抑郁质：稳定情感产生很慢，但对情感的体验深刻、有力、持久，且具有高度的情绪易感性</li>
</ul>
<h2 id="运筹帷幄，打造一个卓越的团队"><a href="#运筹帷幄，打造一个卓越的团队" class="headerlink" title="运筹帷幄，打造一个卓越的团队"></a>运筹帷幄，打造一个卓越的团队</h2><h3 id="热炉效应：严格按照公司制度办事"><a href="#热炉效应：严格按照公司制度办事" class="headerlink" title="热炉效应：严格按照公司制度办事"></a>热炉效应：严格按照公司制度办事</h3><p>热炉效应形象地阐述了企业的惩处原则，即警告性原则、一致性原则、及时性原则、公平性原则。</p>
<h3 id="苛希纳定律：化繁为简，加强核心竞争力"><a href="#苛希纳定律：化繁为简，加强核心竞争力" class="headerlink" title="苛希纳定律：化繁为简，加强核心竞争力"></a>苛希纳定律：化繁为简，加强核心竞争力</h3><p>有时管理人员越多，工作效率反而越差。</p>
<h3 id="责任分散效应：职责分明，责任到人才有效"><a href="#责任分散效应：职责分明，责任到人才有效" class="headerlink" title="责任分散效应：职责分明，责任到人才有效"></a>责任分散效应：职责分明，责任到人才有效</h3><p>在处理一件事时，如果要求多个个体共同完成，每个个体的责任感就会变弱，也叫做旁观者效应。</p>
<h1 id="销售心理学：绝对成交的销售谋略"><a href="#销售心理学：绝对成交的销售谋略" class="headerlink" title="销售心理学：绝对成交的销售谋略"></a>销售心理学：绝对成交的销售谋略</h1><ol>
<li>250定律：每一位客户身后都会有大约250位亲朋好友</li>
<li>哈默定律：不仅抓住客户的显性需求，还会替客户深度挖掘隐性需求</li>
<li>跨栏定律：不断打破自己的销售记录</li>
<li>移情效应：爱屋及乌</li>
<li>兴趣效应：志趣相投的人之间更容易熟识并建立起融洽的关系</li>
<li>赞美效应：人类最基本的共同点，就是渴望被别人赞美，以及成为重要人物的欲望</li>
<li>80/20法则：80%的业务来自20%的客户</li>
<li>博内特定律：要想占领市场的销售份额，首先要占领人们的头脑，占领了人们的头脑，就获得了人们足够的注意力</li>
<li>互惠原理：亏欠感让客户想你靠拢</li>
<li>二选一法则：不要让客户选择要不要，让客户选要这个还是要那个</li>
<li>逆反心理：越不卖，客户越要买（饥饿营销）</li>
<li>名人效应：沾名人的光，商品卖得更好</li>
</ol>
]]></content>
      <categories>
        <category>Reading Notes</category>
        <category>Physchology</category>
      </categories>
      <tags>
        <tag>Physchology</tag>
      </tags>
  </entry>
  <entry>
    <title>3小时精通lxml.etree:Python中xml的读取、解析、生成和查找</title>
    <url>/2019/10/21/3%E5%B0%8F%E6%97%B6%E7%B2%BE%E9%80%9Alxml-etree-Python%E4%B8%ADxml%E7%9A%84%E8%AF%BB%E5%8F%96%E3%80%81%E8%A7%A3%E6%9E%90%E3%80%81%E7%94%9F%E6%88%90%E5%92%8C%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p>本文主要参考官方文档<a href="https://lxml.de/tutorial.html" target="_blank" rel="noopener">https://lxml.de/tutorial.html</a>整理，如有错误欢迎指出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加Element默认添加为根节点</span></span><br><span class="line">root = etree.Element(<span class="string">"root"</span>)</span><br><span class="line"><span class="comment"># 通过append添加子节点</span></span><br><span class="line">root.append(etree.Element(<span class="string">"child1"</span>))</span><br><span class="line"><span class="comment"># 通过SubElement添加子节点</span></span><br><span class="line">child2 = etree.SubElement(root, <span class="string">"child2"</span>)</span><br><span class="line">child3 = etree.SubElement(root, <span class="string">"child3"</span>)</span><br><span class="line">print(etree.tostring(root))</span><br><span class="line">print(etree.tostring(root, pretty_print=<span class="keyword">True</span>))</span><br><span class="line"><span class="comment"># 默认encoding是ASCII</span></span><br><span class="line">print(etree.tostring(root, encoding=<span class="string">'iso-8859-1'</span>))</span><br><span class="line"><span class="comment"># 如果要把byte转成str输出的话，可以用下边的语句</span></span><br><span class="line">print(str(etree.tostring(root, pretty_print=<span class="keyword">True</span>),encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;&lt;child1/&gt;&lt;child2/&gt;&lt;child3/&gt;&lt;/root&gt;&#39;
b&#39;&lt;root&gt;\n  &lt;child1/&gt;\n  &lt;child2/&gt;\n  &lt;child3/&gt;\n&lt;/root&gt;\n&#39;
b&quot;&lt;?xml version=&#39;1.0&#39; encoding=&#39;iso-8859-1&#39;?&gt;\n&lt;root&gt;&lt;child1/&gt;&lt;child2/&gt;&lt;child3/&gt;&lt;/root&gt;&quot;
&lt;root&gt;
  &lt;child1/&gt;
  &lt;child2/&gt;
  &lt;child3/&gt;
&lt;/root&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个元素都是一个list</span></span><br><span class="line">child1 = root[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># .tag 可以取出元素的标签</span></span><br><span class="line">print(child1.tag, len(root))</span><br><span class="line"><span class="comment"># 大部分list方法都可以使用在element上</span></span><br><span class="line">root.insert(<span class="number">0</span>, etree.Element(<span class="string">"child0"</span>))</span><br><span class="line">print(root[<span class="number">0</span>].tag)</span><br></pre></td></tr></table></figure>

<pre><code>child1 3
child0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以用list函数取出子元素的list</span></span><br><span class="line">children = list(root)</span><br><span class="line">print(root)</span><br><span class="line">print(children)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;Element root at 0x107b03888&gt;
[&lt;Element child0 at 0x107b034c8&gt;, &lt;Element child1 at 0x107b03448&gt;, &lt;Element child2 at 0x107b038c8&gt;, &lt;Element child3 at 0x107b03908&gt;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过长度检查element是否为叶子节点</span></span><br><span class="line"><span class="keyword">if</span> len(root):</span><br><span class="line">    print(<span class="string">'root has children'</span>)</span><br><span class="line"><span class="keyword">if</span> len(child1):</span><br><span class="line">    print(<span class="string">'child1 has children'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'child1 has no child'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>root has children
child1 has no child</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不同于普通list，赋值可能会造成元素移动</span></span><br><span class="line">print(etree.tostring(root))</span><br><span class="line">root[<span class="number">0</span>] = root[<span class="number">-1</span>]</span><br><span class="line">print(etree.tostring(root))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是普通list</span></span><br><span class="line">l = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(l)</span><br><span class="line">l[<span class="number">0</span>] = l[<span class="number">-1</span>]</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;&lt;child0/&gt;&lt;child1/&gt;&lt;child2/&gt;&lt;child3/&gt;&lt;/root&gt;&#39;
b&#39;&lt;root&gt;&lt;child3/&gt;&lt;child1/&gt;&lt;child2/&gt;&lt;/root&gt;&#39;
[0, 1, 2, 3]
[3, 1, 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要拷贝节点，需要调用deepcopy</span></span><br><span class="line">newroot = etree.Element(<span class="string">'newroot'</span>)</span><br><span class="line">newroot.append(deepcopy(root[<span class="number">1</span>]))</span><br><span class="line">print(etree.tostring(root))</span><br><span class="line">print(etree.tostring(newroot))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;&lt;child3/&gt;&lt;child1/&gt;&lt;child2/&gt;&lt;/root&gt;&#39;
b&#39;&lt;newroot&gt;&lt;child1/&gt;&lt;/newroot&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etree元素自带方法可以找到对应的父节点、前一个节点、后一个节点</span></span><br><span class="line">print(root <span class="keyword">is</span> child1.getparent())</span><br><span class="line">print(root[<span class="number">0</span>] <span class="keyword">is</span> root[<span class="number">1</span>].getprevious())</span><br><span class="line">print(root[<span class="number">1</span>] <span class="keyword">is</span> root[<span class="number">0</span>].getnext())</span><br></pre></td></tr></table></figure>

<pre><code>True
True
True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 属性以字典方式存储</span></span><br><span class="line">root = etree.Element(<span class="string">"root"</span>, interesting=<span class="string">"totally"</span>)</span><br><span class="line">print(etree.tostring(root))</span><br><span class="line"><span class="comment"># 通过get方法获取属性值</span></span><br><span class="line">print(root.get(<span class="string">"interesting"</span>))</span><br><span class="line">print(root.get(<span class="string">"hello"</span>))</span><br><span class="line"><span class="comment"># 通过set方法添加属性</span></span><br><span class="line">root.set(<span class="string">"hello"</span>, <span class="string">"Huhu"</span>)</span><br><span class="line">print(etree.tostring(root))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root interesting=&quot;totally&quot;/&gt;&#39;
totally
None
b&#39;&lt;root interesting=&quot;totally&quot; hello=&quot;Huhu&quot;/&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典的相关方法也可以直接使用</span></span><br><span class="line">print(root.items(), root.keys(), root.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 attrib 可以直接取出属性进行操作</span></span><br><span class="line">attributes = root.attrib</span><br><span class="line">print(attributes.get(<span class="string">"no-such-attribute"</span>))</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">attributes[<span class="string">"hello"</span>] = <span class="string">"Guten Tag"</span></span><br><span class="line">print(attributes[<span class="string">"hello"</span>])</span><br><span class="line"><span class="comment"># root中的属性一并修改</span></span><br><span class="line">print(root.get(<span class="string">"hello"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以转化为纯正的dict</span></span><br><span class="line">d = dict(root.attrib)</span><br><span class="line">print(d.items())</span><br></pre></td></tr></table></figure>

<pre><code>[(&#39;interesting&#39;, &#39;totally&#39;), (&#39;hello&#39;, &#39;Huhu&#39;)] [&#39;interesting&#39;, &#39;hello&#39;] [&#39;totally&#39;, &#39;Huhu&#39;]
None
Guten Tag
Guten Tag
dict_items([(&#39;interesting&#39;, &#39;totally&#39;), (&#39;hello&#39;, &#39;Guten Tag&#39;)])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元素中包含文本</span></span><br><span class="line">root = etree.Element(<span class="string">"root"</span>)</span><br><span class="line">root.text = <span class="string">"Hello World"</span></span><br><span class="line">print(root.text)</span><br><span class="line">print(etree.tostring(root))</span><br></pre></td></tr></table></figure>

<pre><code>Hello World
b&#39;&lt;root&gt;Hello World&lt;/root&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何添加特殊元素类似于&lt;br/&gt;</span></span><br><span class="line">html = etree.Element(<span class="string">"html"</span>)</span><br><span class="line">body = etree.SubElement(html, <span class="string">"body"</span>)</span><br><span class="line">body.text = <span class="string">"TEXT"</span></span><br><span class="line"></span><br><span class="line">print(etree.tostring(html))</span><br><span class="line"></span><br><span class="line">br = etree.SubElement(body, <span class="string">"br"</span>)</span><br><span class="line">print(etree.tostring(html))</span><br><span class="line"></span><br><span class="line">br.tail = <span class="string">"TAIL"</span></span><br><span class="line">print(etree.tostring(html))</span><br><span class="line">body.text = <span class="string">"HEAD"</span></span><br><span class="line">print(etree.tostring(html))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;html&gt;&lt;body&gt;TEXT&lt;/body&gt;&lt;/html&gt;&#39;
b&#39;&lt;html&gt;&lt;body&gt;TEXT&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;&#39;
b&#39;&lt;html&gt;&lt;body&gt;TEXT&lt;br/&gt;TAIL&lt;/body&gt;&lt;/html&gt;&#39;
b&#39;&lt;html&gt;&lt;body&gt;HEAD&lt;br/&gt;TAIL&lt;/body&gt;&lt;/html&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tail其实属于前边元素的一部分</span></span><br><span class="line">print(etree.tostring(br))</span><br><span class="line">print(etree.tostring(br, with_tail=<span class="keyword">False</span>))</span><br><span class="line">print(etree.tostring(html, method=<span class="string">"text"</span>))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;br/&gt;TAIL&#39;
b&#39;&lt;br/&gt;&#39;
b&#39;HEADTAIL&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xpath方法也可以使用</span></span><br><span class="line">print(html.xpath(<span class="string">"string()"</span>))</span><br><span class="line">print(html.xpath(<span class="string">"//text()"</span>))</span><br></pre></td></tr></table></figure>

<pre><code>HEADTAIL
[&#39;HEAD&#39;, &#39;TAIL&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 甚至可以吧xpath的方法包装成函数</span></span><br><span class="line">build_text_list = etree.XPath(<span class="string">"//text()"</span>) <span class="comment"># lxml.etree only!</span></span><br><span class="line">print(build_text_list(html))</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;HEAD&#39;, &#39;TAIL&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># text也可以找爸爸</span></span><br><span class="line">texts = build_text_list(html)</span><br><span class="line">print(texts[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">parent = texts[<span class="number">0</span>].getparent()</span><br><span class="line">print(parent.tag)</span><br><span class="line"></span><br><span class="line">print(texts[<span class="number">1</span>])</span><br><span class="line">print(texts[<span class="number">1</span>].getparent().tag)</span><br></pre></td></tr></table></figure>

<pre><code>HEAD
body
TAIL
br</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断一段文本是正常的文本还是tail</span></span><br><span class="line">print(texts[<span class="number">0</span>].is_text)</span><br><span class="line">print(texts[<span class="number">1</span>].is_text)</span><br><span class="line">print(texts[<span class="number">1</span>].is_tail)</span><br></pre></td></tr></table></figure>

<pre><code>True
False
True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但是XPath下有些方法就不行了</span></span><br><span class="line">stringify = etree.XPath(<span class="string">"string()"</span>)</span><br><span class="line">print(stringify(html))</span><br><span class="line">print(stringify(html).getparent())</span><br></pre></td></tr></table></figure>

<pre><code>HEADTAIL
None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etree中的树是iterable的</span></span><br><span class="line">root = etree.Element(<span class="string">"root"</span>)</span><br><span class="line">etree.SubElement(root, <span class="string">"child"</span>).text = <span class="string">"Child 1"</span></span><br><span class="line">etree.SubElement(root, <span class="string">"child"</span>).text = <span class="string">"Child 2"</span></span><br><span class="line">etree.SubElement(root, <span class="string">"another"</span>).text = <span class="string">"Child 3"</span></span><br><span class="line"></span><br><span class="line">print(etree.tostring(root, pretty_print=<span class="keyword">True</span>))</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> root.iter():</span><br><span class="line">    print(<span class="string">"%s - %s"</span> % (element.tag, element.text))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;\n  &lt;child&gt;Child 1&lt;/child&gt;\n  &lt;child&gt;Child 2&lt;/child&gt;\n  &lt;another&gt;Child 3&lt;/another&gt;\n&lt;/root&gt;\n&#39;
root - None
child - Child 1
child - Child 2
another - Child 3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过在iter中添加参数，来过滤输出的tag</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> root.iter(<span class="string">"child"</span>):</span><br><span class="line">    print(<span class="string">"%s - %s"</span> % (element.tag, element.text))</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> root.iter(<span class="string">"another"</span>, <span class="string">"child"</span>):</span><br><span class="line">    print(<span class="string">"%s - %s"</span> % (element.tag, element.text))</span><br></pre></td></tr></table></figure>

<pre><code>child - Child 1
child - Child 2
child - Child 1
child - Child 2
another - Child 3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，所有节点都会被遍历，如Entity、Comment等，通过添加tag参数可以避免这一点</span></span><br><span class="line">root.append(etree.Entity(<span class="string">"#234"</span>))</span><br><span class="line">root.append(etree.Comment(<span class="string">"some comment"</span>))</span><br><span class="line">print(etree.tostring(root))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> root.iter():</span><br><span class="line">    <span class="keyword">if</span> isinstance(element.tag, str):</span><br><span class="line">        print(<span class="string">"%s - %s"</span> % (element.tag, element.text))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"SPECIAL: %s - %s"</span> % (element, element.text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> root.iter(tag=etree.Element):</span><br><span class="line">    print(<span class="string">"%s - %s"</span> % (element.tag, element.text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> root.iter(tag=etree.Entity):</span><br><span class="line">    print(element.text)</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;&lt;child&gt;Child 1&lt;/child&gt;&lt;child&gt;Child 2&lt;/child&gt;&lt;another&gt;Child 3&lt;/another&gt;&amp;#234;&lt;!--some comment--&gt;&lt;/root&gt;&#39;
root - None
child - Child 1
child - Child 2
another - Child 3
SPECIAL: &amp;#234; - &amp;#234;
SPECIAL: &lt;!--some comment--&gt; - some comment
root - None
child - Child 1
child - Child 2
another - Child 3
&amp;#234;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过elementTreeName.write(filePath)可以把树写进文件或通过url传输</span></span><br><span class="line"><span class="comment"># 或者如果你只有elementName的话，可以这么写：</span></span><br><span class="line"><span class="comment"># etree.ElementTree(elementName).write(filePath)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单粗暴的直接写xml也可以</span></span><br><span class="line">root = etree.XML(</span><br><span class="line">   <span class="string">'&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Hello&lt;br/&gt;World&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'</span>)</span><br><span class="line"><span class="comment"># 通过method参数，可以序列化为不同格式，默认method = 'xml'</span></span><br><span class="line">print(etree.tostring(root))</span><br><span class="line">print(etree.tostring(root, method=<span class="string">'html'</span>))</span><br><span class="line">print(etree.tostring(root, method=<span class="string">'text'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Hello&lt;br/&gt;World&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&#39;
b&#39;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Hello&lt;br&gt;World&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&#39;
b&#39;HelloWorld&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ElementTree class，是一个element的容器，提供了一些方法来对整个root node文档进行操作</span></span><br><span class="line">root = etree.XML(<span class="string">'''\</span></span><br><span class="line"><span class="string">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE root SYSTEM "test" [ &lt;!ENTITY tasty "parsnips"&gt; ]&gt;</span></span><br><span class="line"><span class="string">&lt;root&gt;</span></span><br><span class="line"><span class="string">  &lt;a&gt;&amp;tasty;&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/root&gt;</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line"></span><br><span class="line">tree = etree.ElementTree(root)</span><br><span class="line">print(tree.docinfo.xml_version)</span><br><span class="line">print(tree.docinfo.doctype)</span><br><span class="line"></span><br><span class="line">tree.docinfo.public_id = <span class="string">'-//W3C//DTD XHTML 1.0 Transitional//EN'</span></span><br><span class="line">tree.docinfo.system_url = <span class="string">'file://local.dtd'</span></span><br><span class="line">print(tree.docinfo.doctype)</span><br></pre></td></tr></table></figure>

<pre><code>1.0
&lt;!DOCTYPE root SYSTEM &quot;test&quot;&gt;
&lt;!DOCTYPE root PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;file://local.dtd&quot;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(etree.tostring(tree))</span><br><span class="line">print(etree.tostring(tree.getroot()))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;!DOCTYPE root PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;file://local.dtd&quot; [\n&lt;!ENTITY tasty &quot;parsnips&quot;&gt;\n]&gt;\n&lt;root&gt;\n  &lt;a&gt;parsnips&lt;/a&gt;\n&lt;/root&gt;&#39;
b&#39;&lt;root&gt;\n  &lt;a&gt;parsnips&lt;/a&gt;\n&lt;/root&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析文档中以string读入的xml</span></span><br><span class="line">some_xml_data = <span class="string">"&lt;root&gt;data&lt;/root&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .fromstring函数其实和.XML差不多</span></span><br><span class="line">root = etree.fromstring(some_xml_data)</span><br><span class="line">print(etree.tostring(root))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;data&lt;/root&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二进制读取解析</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">some_file_or_file_like_object = BytesIO(<span class="string">b"&lt;root&gt;data&lt;/root&gt;"</span>)</span><br><span class="line">tree = etree.parse(some_file_or_file_like_object)</span><br><span class="line">print(etree.tostring(tree))</span><br><span class="line"><span class="comment"># 注意：parse函数返回的是ElementTree对象，不是Element，通过getroot可以转化为Element对象</span></span><br><span class="line"><span class="comment"># ElementTree和Element在某些方面相似，但是方法调用上不同，比如.tag只有Element可以使用</span></span><br><span class="line">root = tree.getroot()</span><br><span class="line">print(etree.tostring(root))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"tree执行:"</span>, tree.tag)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"root执行:"</span>, root.tag)</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;data&lt;/root&gt;&#39;
b&#39;&lt;root&gt;data&lt;/root&gt;&#39;
root执行: root</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># parser对象</span></span><br><span class="line">parser = etree.XMLParser(remove_blank_text=<span class="keyword">True</span>)</span><br><span class="line">root = etree.XML(<span class="string">"&lt;root&gt;  &lt;a/&gt;   &lt;b&gt;  &lt;/b&gt;     &lt;/root&gt;"</span>, parser)</span><br><span class="line">print(etree.tostring(root))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;&lt;a/&gt;&lt;b&gt;  &lt;/b&gt;&lt;/root&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Incremental parsing增量解析，比如在网络分步传输的场景下需要使用</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSource</span>:</span></span><br><span class="line">    data = [ <span class="string">b"&lt;roo"</span>, <span class="string">b"t&gt;&lt;"</span>, <span class="string">b"a/"</span>, <span class="string">b"&gt;&lt;"</span>, <span class="string">b"/root&gt;"</span> ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self, requested_size)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.data.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b''</span></span><br><span class="line"></span><br><span class="line">        tree = etree.parse(DataSource())</span><br><span class="line">print(etree.tostring(tree))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">parser = etree.XMLParser()</span><br><span class="line"></span><br><span class="line">parser.feed(<span class="string">"&lt;roo"</span>)</span><br><span class="line">parser.feed(<span class="string">"t&gt;&lt;"</span>)</span><br><span class="line">parser.feed(<span class="string">"a/"</span>)</span><br><span class="line">parser.feed(<span class="string">"&gt;&lt;"</span>)</span><br><span class="line">parser.feed(<span class="string">"/root&gt;"</span>)</span><br><span class="line"></span><br><span class="line">root = parser.close()</span><br><span class="line">print(etree.tostring(root))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;root&gt;data&lt;/root&gt;&#39;
b&#39;&lt;root&gt;&lt;a/&gt;&lt;/root&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Event-driven parsing事件驱动的解析，如只需要很大的树中的一小部分时使用</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="comment"># iterparse默认只解析end事件</span></span><br><span class="line">some_file_like = BytesIO(<span class="string">b"&lt;root&gt;&lt;a&gt;data&lt;/a&gt;&lt;/root&gt;"</span>)</span><br><span class="line"><span class="keyword">for</span> event, element <span class="keyword">in</span> etree.iterparse(some_file_like):</span><br><span class="line">    print(<span class="string">"%s, %4s, %s"</span> % (event, element.tag, element.text))</span><br><span class="line">    </span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以修改events参数解析所有事件</span></span><br><span class="line">some_file_like = BytesIO(<span class="string">b"&lt;root&gt;&lt;a&gt;data&lt;/a&gt;&lt;/root&gt;"</span>)</span><br><span class="line"><span class="keyword">for</span> event, element <span class="keyword">in</span> etree.iterparse(some_file_like,</span><br><span class="line">                                      events=(<span class="string">"start"</span>, <span class="string">"end"</span>)):</span><br><span class="line">    print(<span class="string">"%5s, %4s, %s"</span> % (event, element.tag, element.text))</span><br></pre></td></tr></table></figure>

<pre><code>end,    a, data
end, root, None

start, root, None
start,    a, data
  end,    a, data
  end, root, None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParserTarget</span>:</span></span><br><span class="line">    events = []</span><br><span class="line">    close_count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, tag, attrib)</span>:</span></span><br><span class="line">        self.events.append((<span class="string">"start"</span>, tag, attrib))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        events, self.events = self.events, []</span><br><span class="line">        self.close_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> events</span><br><span class="line"></span><br><span class="line">parser_target = ParserTarget()</span><br><span class="line"></span><br><span class="line">parser = etree.XMLParser(target=parser_target)</span><br><span class="line">events = etree.fromstring(<span class="string">'&lt;root test="true"/&gt;'</span>, parser)</span><br><span class="line"></span><br><span class="line">print(parser_target.close_count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    print(<span class="string">'event: %s - tag: %s'</span> % (event[<span class="number">0</span>], event[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">for</span> attr, value <span class="keyword">in</span> event[<span class="number">2</span>].items():</span><br><span class="line">        print(<span class="string">' * %s = %s'</span> % (attr, value))</span><br></pre></td></tr></table></figure>

<pre><code>1
event: start - tag: root
 * test = true


/Users/imonce/anaconda/lib/python3.6/site-packages/ipykernel_launcher.py:15: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() or inspect.getfullargspec()
  from ipykernel import kernelapp as app</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">events = etree.fromstring(<span class="string">'&lt;root test="true"/&gt;'</span>, parser)</span><br><span class="line">print(parser_target.close_count)</span><br><span class="line">events = etree.fromstring(<span class="string">'&lt;root test="true"/&gt;'</span>, parser)</span><br><span class="line">print(parser_target.close_count)</span><br></pre></td></tr></table></figure>

<pre><code>2
3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    print(<span class="string">'event: %s - tag: %s'</span> % (event[<span class="number">0</span>], event[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">for</span> attr, value <span class="keyword">in</span> event[<span class="number">2</span>].items():</span><br><span class="line">        print(<span class="string">' * %s = %s'</span> % (attr, value))</span><br></pre></td></tr></table></figure>

<pre><code>event: start - tag: root
 * test = true</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># namespace命名空间，格式为：&#123;namespace_name&#125;tag_name</span></span><br><span class="line"><span class="comment"># 一般是链接，空链接的话会 ns+编号 给一个代号</span></span><br><span class="line"><span class="comment"># a:b的tag名会直接报错</span></span><br><span class="line">xhtml = etree.Element(<span class="string">"&#123;http://www.w3.org/1999/test&#125;testhtml"</span>)</span><br><span class="line">body = etree.SubElement(xhtml, <span class="string">"&#123;http://www.w3.org/1999/test&#125;tbody"</span>)</span><br><span class="line">body.text = <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line">print(etree.tostring(xhtml))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高贵的html</span></span><br><span class="line">xhtml = etree.Element(<span class="string">"&#123;http://www.w3.org/1999/xhtml&#125;html"</span>)</span><br><span class="line">body = etree.SubElement(xhtml, <span class="string">"&#123;http://www.w3.org/1999/xhtml&#125;body"</span>)</span><br><span class="line">body.text = <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line">print(etree.tostring(xhtml))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;ns0:testhtml xmlns:ns0=&quot;http://www.w3.org/1999/test&quot;&gt;&lt;ns0:tbody&gt;Hello World&lt;/ns0:tbody&gt;&lt;/ns0:testhtml&gt;&#39;
b&#39;&lt;html:html xmlns:html=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;html:body&gt;Hello World&lt;/html:body&gt;&lt;/html:html&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置默认命名空间</span></span><br><span class="line">XHTML_NAMESPACE = <span class="string">"http://www.w3.org/1999/xhtml"</span></span><br><span class="line">XHTML = <span class="string">"&#123;%s&#125;"</span> % XHTML_NAMESPACE</span><br><span class="line"></span><br><span class="line">NSMAP = &#123;<span class="keyword">None</span> : XHTML_NAMESPACE&#125; <span class="comment"># the default namespace (no prefix)</span></span><br><span class="line">xhtml = etree.Element(XHTML + <span class="string">"html"</span>, nsmap=NSMAP) <span class="comment"># lxml only!</span></span><br><span class="line">body = etree.SubElement(xhtml, XHTML + <span class="string">"body"</span>)</span><br><span class="line">body.text = <span class="string">"Hello World"</span></span><br><span class="line">print(etree.tostring(xhtml))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QName方法，快速合成或提取namespace</span></span><br><span class="line">tag = etree.QName(<span class="string">'http://www.w3.org/1999/xhtml'</span>, <span class="string">'html'</span>)</span><br><span class="line">print(tag.localname)</span><br><span class="line">print(tag.namespace)</span><br><span class="line">print(tag.text)</span><br><span class="line"></span><br><span class="line">root = etree.Element(<span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;html'</span>)</span><br><span class="line">tag = etree.QName(root)</span><br><span class="line">print(tag.localname)</span><br></pre></td></tr></table></figure>

<pre><code>html
http://www.w3.org/1999/xhtml
{http://www.w3.org/1999/xhtml}html
html</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nsmap方法，直接提取命名空间字典</span></span><br><span class="line">print(xhtml.nsmap)</span><br></pre></td></tr></table></figure>

<pre><code>{None: &#39;http://www.w3.org/1999/xhtml&#39;}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子元素继承父元素命名空间</span></span><br><span class="line">root = etree.Element(<span class="string">'root'</span>, nsmap=&#123;<span class="string">'a'</span>: <span class="string">'http://a.b/c'</span>&#125;)</span><br><span class="line">child = etree.SubElement(root, <span class="string">'child'</span>,</span><br><span class="line">                         nsmap=&#123;<span class="string">'b'</span>: <span class="string">'http://b.c/d'</span>&#125;)</span><br><span class="line">print(root.nsmap)</span><br><span class="line">print(child.nsmap)</span><br></pre></td></tr></table></figure>

<pre><code>{&#39;a&#39;: &#39;http://a.b/c&#39;}
{&#39;b&#39;: &#39;http://b.c/d&#39;, &#39;a&#39;: &#39;http://a.b/c&#39;}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加带命名空间的属性，格式为：set(&#123;namespace_name&#125;attr_name, attr_value)</span></span><br><span class="line">body.set(XHTML + <span class="string">"bgcolor"</span>, <span class="string">"#CCFFAA"</span>)</span><br><span class="line">print(etree.tostring(xhtml))</span><br><span class="line"><span class="comment"># 注意：get的时候也要带命名空间</span></span><br><span class="line">print(body.get(<span class="string">"bgcolor"</span>))</span><br><span class="line">print(body.get(XHTML+<span class="string">"bgcolor"</span>))</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;body xmlns:html=&quot;http://www.w3.org/1999/xhtml&quot; html:bgcolor=&quot;#CCFFAA&quot;&gt;Hello World&lt;/body&gt;&lt;/html&gt;&#39;
None
#CCFFAA</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以用XPath</span></span><br><span class="line">find_xhtml_body = etree.ETXPath(      <span class="comment"># lxml only !</span></span><br><span class="line">    <span class="string">"//&#123;%s&#125;body"</span> % XHTML_NAMESPACE)</span><br><span class="line">results = find_xhtml_body(xhtml)</span><br><span class="line"></span><br><span class="line">print(results[<span class="number">0</span>].tag)</span><br></pre></td></tr></table></figure>

<pre><code>{http://www.w3.org/1999/xhtml}body</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iter的话也要考虑namespace</span></span><br><span class="line"><span class="keyword">for</span> el <span class="keyword">in</span> xhtml.iter(<span class="string">'&#123;*&#125;body'</span>): print(el.tag)</span><br></pre></td></tr></table></figure>

<pre><code>{http://www.w3.org/1999/xhtml}body</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># E-factory：提供一种简单紧凑的语法来生成XML和HTML</span></span><br><span class="line"><span class="keyword">from</span> lxml.builder <span class="keyword">import</span> E</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CLASS</span><span class="params">(*args)</span>:</span> <span class="comment"># class 是python中的保留字，无法直接当做属性名</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"class"</span>:<span class="string">' '</span>.join(args)&#125;</span><br><span class="line"></span><br><span class="line">html = page = (</span><br><span class="line">  E.html(       <span class="comment"># create an Element called "html"</span></span><br><span class="line">    E.head(</span><br><span class="line">      E.title(<span class="string">"This is a sample document"</span>)</span><br><span class="line">    ),</span><br><span class="line">    E.body(</span><br><span class="line">      E.h1(<span class="string">"Hello!"</span>, CLASS(<span class="string">"title"</span>)),</span><br><span class="line">      E.p(<span class="string">"This is a paragraph with "</span>, E.b(<span class="string">"bold"</span>), <span class="string">" text in it!"</span>),</span><br><span class="line">      E.p(<span class="string">"This is another paragraph, with a"</span>, <span class="string">"\n      "</span>,</span><br><span class="line">        E.a(<span class="string">"link"</span>, href=<span class="string">"http://www.python.org"</span>), <span class="string">"."</span>),</span><br><span class="line">      E.p(<span class="string">"Here are some reserved characters: &lt;spam&amp;egg&gt;."</span>),</span><br><span class="line">      etree.XML(<span class="string">"&lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;"</span>),</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(str(etree.tostring(page, pretty_print=<span class="keyword">True</span>),encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;This is a sample document&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 class=&quot;title&quot;&gt;Hello!&lt;/h1&gt;
    &lt;p&gt;This is a paragraph with &lt;b&gt;bold&lt;/b&gt; text in it!&lt;/p&gt;
    &lt;p&gt;This is another paragraph, with a
      &lt;a href=&quot;http://www.python.org&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;Here are some reserved characters: &amp;lt;spam&amp;amp;egg&amp;gt;.&lt;/p&gt;
    &lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此外还有一种基于属性的方法</span></span><br><span class="line"><span class="keyword">from</span> lxml.builder <span class="keyword">import</span> ElementMaker <span class="comment"># lxml only !</span></span><br><span class="line"></span><br><span class="line">E = ElementMaker(namespace=<span class="string">"http://my.de/fault/namespace"</span>,</span><br><span class="line">                 nsmap=&#123;<span class="string">'p'</span> : <span class="string">"http://my.de/fault/namespace"</span>&#125;)</span><br><span class="line"></span><br><span class="line">DOC = E.doc</span><br><span class="line">TITLE = E.title</span><br><span class="line">SECTION = E.section</span><br><span class="line">PAR = E.par</span><br><span class="line"></span><br><span class="line">my_doc = DOC(</span><br><span class="line">  TITLE(<span class="string">"The dog and the hog"</span>),</span><br><span class="line">  SECTION(</span><br><span class="line">    TITLE(<span class="string">"The dog"</span>, tType=<span class="string">'title'</span>),</span><br><span class="line">    PAR(<span class="string">"Once upon a time, ..."</span>),</span><br><span class="line">    PAR(<span class="string">"And then ..."</span>)</span><br><span class="line">  ),</span><br><span class="line">  SECTION(</span><br><span class="line">    TITLE(<span class="string">"The hog"</span>),</span><br><span class="line">    PAR(<span class="string">"Sooner or later ..."</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(str(etree.tostring(my_doc, pretty_print=<span class="keyword">True</span>),encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;p:doc xmlns:p=&quot;http://my.de/fault/namespace&quot;&gt;
  &lt;p:title&gt;The dog and the hog&lt;/p:title&gt;
  &lt;p:section&gt;
    &lt;p:title tType=&quot;title&quot;&gt;The dog&lt;/p:title&gt;
    &lt;p:par&gt;Once upon a time, ...&lt;/p:par&gt;
    &lt;p:par&gt;And then ...&lt;/p:par&gt;
  &lt;/p:section&gt;
  &lt;p:section&gt;
    &lt;p:title&gt;The hog&lt;/p:title&gt;
    &lt;p:par&gt;Sooner or later ...&lt;/p:par&gt;
  &lt;/p:section&gt;
&lt;/p:doc&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># XPath的一些例子</span></span><br><span class="line">root = etree.XML(<span class="string">"&lt;root&gt;&lt;a x='123'&gt;aText&lt;b/&gt;&lt;c/&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;"</span>)</span><br><span class="line"><span class="comment"># 找儿子（单层子节点）</span></span><br><span class="line">print(root.find(<span class="string">"b"</span>))</span><br><span class="line">print(root.find(<span class="string">"a"</span>).tag)</span><br></pre></td></tr></table></figure>

<pre><code>None
a</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找孩子（所有子节点）</span></span><br><span class="line">print(root.find(<span class="string">".//b"</span>).tag)</span><br></pre></td></tr></table></figure>

<pre><code>b</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带属性找孩子</span></span><br><span class="line">print(root.findall(<span class="string">".//a[@x]"</span>)[<span class="number">0</span>].tag)</span><br></pre></td></tr></table></figure>

<pre><code>a</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过ElementTree找路径</span></span><br><span class="line">tree = etree.ElementTree(root)</span><br><span class="line">a = root[<span class="number">0</span>]</span><br><span class="line">print(tree.getelementpath(a[<span class="number">0</span>]))</span><br><span class="line">print(tree.getelementpath(a[<span class="number">1</span>]))</span><br><span class="line">print(tree.getelementpath(a[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>a/b[1]
a/c
a/b[2]</code></pre>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn lxml.etree in Y minutes</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>lxml</tag>
        <tag>etree</tag>
      </tags>
  </entry>
  <entry>
    <title>4小时java入门</title>
    <url>/2019/05/07/4%E5%B0%8F%E6%97%B6java%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>译自：<a href="https://learnxinyminutes.com/docs/java/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/java/</a></p>
<p>ps：好多类都写到一起了，自己要运行的话记得写到不同的java文件中哦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入java.util包中的ArrayList类</span></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">// 导入java.util包中的Scanner类</span></span><br><span class="line"><span class="comment">// 导入java.security包中的所有类</span></span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnJava</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要运行一个java程序，必须要有一个main方法作为入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///////////////////////////////////////</span></span><br><span class="line">    <span class="comment">// 输入/输出</span></span><br><span class="line">    <span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 输出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 System.out.println() 来输出一行数据</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">"Integer: "</span> + <span class="number">10</span> +</span><br><span class="line">            <span class="string">" Double: "</span> + <span class="number">3.14</span> +</span><br><span class="line">            <span class="string">" Boolean: "</span> + <span class="keyword">true</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果输出之后不想换行，可以使用System.out.print()</span></span><br><span class="line">        System.out.print(<span class="string">"Hello "</span>);</span><br><span class="line">        System.out.print(<span class="string">"World"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        /*</span></span><br><span class="line"><span class="comment">//        * 输入</span></span><br><span class="line"><span class="comment">//        */</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //通过Scanner读取输入</span></span><br><span class="line"><span class="comment">//        //必须import java.util.Scanner;</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //读取string输入</span></span><br><span class="line"><span class="comment">//        String name = scanner.next();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //读取byte输入</span></span><br><span class="line"><span class="comment">//        byte numByte = scanner.nextByte();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //读取int输入</span></span><br><span class="line"><span class="comment">//        int numInt = scanner.nextInt();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //读取long输入</span></span><br><span class="line"><span class="comment">//        float numFloat = scanner.nextFloat();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //读取oduble输入</span></span><br><span class="line"><span class="comment">//        double numDouble = scanner.nextDouble();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //读取boolean输入</span></span><br><span class="line"><span class="comment">//        boolean bool = scanner.nextBoolean();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line">        <span class="comment">// 变量</span></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 变量声明</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//通过&lt;type&gt; &lt;name&gt;声明变量</span></span><br><span class="line">        <span class="keyword">int</span> fooInt;</span><br><span class="line">        <span class="comment">//声明多个变量：</span></span><br><span class="line">        <span class="comment">// &lt;type&gt; &lt;name1&gt;, &lt;name2&gt;, &lt;name3&gt;</span></span><br><span class="line">        <span class="keyword">int</span> fooInt1, fooInt2, fooInt3;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  变量初始化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过&lt;type&gt; &lt;name&gt; = &lt;val&gt;来初始变量</span></span><br><span class="line">        <span class="keyword">int</span> barInt = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 初始化多个变量：</span></span><br><span class="line">        <span class="comment">// &lt;type&gt; &lt;name1&gt;, &lt;name2&gt;, &lt;name3&gt;</span></span><br><span class="line">        <span class="comment">// &lt;name1&gt; = &lt;name2&gt; = &lt;name3&gt; = &lt;val&gt;</span></span><br><span class="line">        <span class="keyword">int</span> barInt1, barInt2, barInt3;</span><br><span class="line">        barInt1 = barInt2 = barInt3 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  变量类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// Byte - 8位有符号二进制补码整数</span></span><br><span class="line">        <span class="comment">// (-128 &lt;= byte &lt;= 127)</span></span><br><span class="line">        <span class="keyword">byte</span> fooByte = -<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果您想将一个字节解释为无符号整数</span></span><br><span class="line">        <span class="comment">// 只需要下边这句</span></span><br><span class="line">        <span class="keyword">int</span> unsignedIntLessThan256 = <span class="number">0xff</span> &amp; fooByte;</span><br><span class="line">        <span class="comment">// 下边这句</span></span><br><span class="line">        <span class="keyword">int</span> signedInt = (<span class="keyword">int</span>) fooByte;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Short - 16位有符号二进制补码整数</span></span><br><span class="line">        <span class="comment">// (-32,768 &lt;= short &lt;= 32,767)</span></span><br><span class="line">        <span class="keyword">short</span> fooShort = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Integer - 32位有符号二进制补码整数</span></span><br><span class="line">        <span class="comment">// (-2,147,483,648 &lt;= int &lt;= 2,147,483,647)</span></span><br><span class="line">        <span class="keyword">int</span> bazInt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Long - 64位有符号二进制补码整数</span></span><br><span class="line">        <span class="comment">// (-9,223,372,036,854,775,808 &lt;= long &lt;= 9,223,372,036,854,775,807)</span></span><br><span class="line">        <span class="keyword">long</span> fooLong = <span class="number">100000L</span>;</span><br><span class="line">        <span class="comment">// 数值后边的'L'指示这个变量是long类型</span></span><br><span class="line">        <span class="comment">// 没有L的话依然会默认用int存储</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意: byte, short, int 和 long 都是有符号的. 也就是说可以为正数或负数</span></span><br><span class="line">        <span class="comment">// 没有无符号变量</span></span><br><span class="line">        <span class="comment">// 然而，char就是16位无符号的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Float - 单精度32位IEEE 754浮点数</span></span><br><span class="line">        <span class="comment">// 2^-149 &lt;= float &lt;= (2-2^-23) * 2^127</span></span><br><span class="line">        <span class="keyword">float</span> fooFloat = <span class="number">234.5f</span>;</span><br><span class="line">        <span class="comment">// 数字末尾的f 或者 F 是用来标识这个变量通过float进行存储</span></span><br><span class="line">        <span class="comment">// 否则就会默认按照double存储</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Double - 双精度64位IEEE 754浮点数</span></span><br><span class="line">        <span class="comment">// 2^-1074 &lt;= x &lt;= (2-2^-52) * 2^1023</span></span><br><span class="line">        <span class="keyword">double</span> fooDouble = <span class="number">123.4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Boolean - true &amp; false</span></span><br><span class="line">        <span class="keyword">boolean</span> fooBoolean = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> barBoolean = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Char - 一个16位的unicode字符</span></span><br><span class="line">        <span class="keyword">char</span> fooChar = <span class="string">'A'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// final 变量不能被重新赋值</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> HOURS_I_WORK_PER_WEEK = <span class="number">9001</span>;</span><br><span class="line">        <span class="comment">// 但是可以稍后初始化</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> E;</span><br><span class="line">        E = <span class="number">2.71828</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BigInteger - 不可变的任意精度整数</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// BigInteger是一类数据类型，允许程序员操作超过64位长度的整数</span></span><br><span class="line">        <span class="comment">// 这样生成的整数存储为字节组成的数组，并通过内建在BigInteger中的函数进行操作</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// BigInteger 可以通过一个字节组成的数组或者字符串初始化</span></span><br><span class="line">        String fooByteArray = <span class="string">"1000000000000000000000000000000000000000000"</span>;</span><br><span class="line">        BigInteger fooBigInteger = <span class="keyword">new</span> BigInteger(fooByteArray);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BigDecimal - 不可变的，任意精度的带符号十进制数</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// BigDecimal包含两个部分:一个任意精度的整数无标度值和一个32位整数标度</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// BigDecimal允许程序员完全控制十进制舍入</span></span><br><span class="line">        <span class="comment">// 建议将BigDecimal与精度值一起使用，并在需要精确小数精度的地方使用BigDecimal</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// BigDecimal 可以使用int、long、double或String初始化</span></span><br><span class="line">        <span class="comment">// 也可以初始化未缩放值(BigInteger)和scale (int)</span></span><br><span class="line">        fooInt = <span class="number">1</span>;</span><br><span class="line">        BigDecimal fooBigDecimal = <span class="keyword">new</span> BigDecimal(fooBigInteger, fooInt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//警惕采用float或double的构造函数</span></span><br><span class="line">        <span class="comment">//float/double的不准确性也会被拷贝到BigDecimal中</span></span><br><span class="line">        <span class="comment">//当您需要精确值时，首选String构造函数</span></span><br><span class="line">        BigDecimal tenCents = <span class="keyword">new</span> BigDecimal(<span class="string">"0.1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String：字符串</span></span><br><span class="line">        String fooString = <span class="string">"My String Is Here!"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// \n 是一个转义字符，开始一个新行</span></span><br><span class="line">        String barString = <span class="string">"Printing on a new line?\nNo Problem!"</span>;</span><br><span class="line">        <span class="comment">// \t 是一个转义字符，用于添加制表符</span></span><br><span class="line">        String bazString = <span class="string">"Do you want to add a tab?\tNo Problem!"</span>;</span><br><span class="line">        System.out.println(fooString);</span><br><span class="line">        System.out.println(barString);</span><br><span class="line">        System.out.println(bazString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串构建</span></span><br><span class="line">        <span class="comment">// #1 - 通过加号"+"运算符</span></span><br><span class="line">        <span class="comment">// 这是实现它的基本方法（在通过引擎优化）</span></span><br><span class="line">        String plusConcatenated = <span class="string">"Strings can "</span> + <span class="string">"be concatenated "</span> + <span class="string">"via + operator."</span>;</span><br><span class="line">        System.out.println(plusConcatenated);</span><br><span class="line">        <span class="comment">// 输出: 字符串可以通过+运算符连接</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// #2 - 通过StringBuilder</span></span><br><span class="line">        <span class="comment">//这种方式不会创建任何中间字符串。 它只存储字符串片段，并在调用toString（）时将它们连接在一起</span></span><br><span class="line">        <span class="comment">//提示：此类不是线程安全的。 StringBuffer是一种线程安全的替代方案（对性能有一些影响）。</span></span><br><span class="line">        StringBuilder builderConcatenated = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builderConcatenated.append(<span class="string">"You "</span>);</span><br><span class="line">        builderConcatenated.append(<span class="string">"can use "</span>);</span><br><span class="line">        builderConcatenated.append(<span class="string">"the StringBuilder class."</span>);</span><br><span class="line">        System.out.println(builderConcatenated.toString()); <span class="comment">//字符串只在现在构建</span></span><br><span class="line">        <span class="comment">// 输出: You can use the StringBuilder class.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在完成某些处理结束之前不需要完全构造的String时，StringBuilder非常有效。</span></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String inefficientString = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            stringBuilder.append(i).append(<span class="string">" "</span>);</span><br><span class="line">            inefficientString += i + <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(inefficientString);</span><br><span class="line">        System.out.println(stringBuilder.toString());</span><br><span class="line">        <span class="comment">// inefficientString需要更多的工作来生成，因为它在每次循环迭代时都会生成一个String。</span></span><br><span class="line">        <span class="comment">// 使用+进行简单字符串连接，编译后相当于同时调用StringBuilder和toString（）</span></span><br><span class="line">        <span class="comment">// 使用StringBuilder可以避免循环中的字符串连接。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// #3 - 使用String格式化器</span></span><br><span class="line">        <span class="comment">// 另一种创建字符串的替代方法，快速且可读。</span></span><br><span class="line">        String.format(<span class="string">"%s may prefer %s."</span>, <span class="string">"Or you"</span>, <span class="string">"String.format()"</span>);</span><br><span class="line">        <span class="comment">// 输出: Or you may prefer String.format().</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Arrays：数组</span></span><br><span class="line">        <span class="comment">// 必须在实例化时确定数组大小</span></span><br><span class="line">        <span class="comment">// 以下格式用于声明数组</span></span><br><span class="line">        <span class="comment">// &lt;datatype&gt;[] &lt;var name&gt; = new &lt;datatype&gt;[&lt;array size&gt;];</span></span><br><span class="line">        <span class="comment">// &lt;datatype&gt; &lt;var name&gt;[] = new &lt;datatype&gt;[&lt;array size&gt;];</span></span><br><span class="line">        <span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        String[] stringArray = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">boolean</span> boolArray[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明和初始化数组的另一种方法</span></span><br><span class="line">        <span class="keyword">int</span>[] y = &#123;<span class="number">9000</span>, <span class="number">1000</span>, <span class="number">1337</span>&#125;;</span><br><span class="line">        String names[] = &#123;<span class="string">"Bob"</span>, <span class="string">"John"</span>, <span class="string">"Fred"</span>, <span class="string">"Juan Pedro"</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> bools[] = &#123;<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 索引数组 - 访问元素</span></span><br><span class="line">        System.out.println(<span class="string">"intArray @ 0: "</span> + intArray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组是零索引且可变的</span></span><br><span class="line">        intArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"intArray @ 1: "</span> + intArray[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他值得一试的数据类型</span></span><br><span class="line">        <span class="comment">// ArrayLists  - 除了提供更多功能之外的类似数组，且数组长度是可变的</span></span><br><span class="line">        <span class="comment">// LinkedLists - 双向链表的实现，全部操作按照双向链表执行。</span></span><br><span class="line">        <span class="comment">// Maps - 键对象到值对象的映射。 Map是一个接口，因此无法实例化。 必须在实现类的实例化时指定Map中包含的键和值的类型。 每个键可以仅映射到一个对应的值，并且每个键可以仅出现一次（没有重复）。</span></span><br><span class="line">        <span class="comment">// HashMaps - 此类使用哈希表来实现Map接口。 这允许基本操作的执行时间（例如get和insert元素）即使对于大型集合也保持不变。</span></span><br><span class="line">        <span class="comment">// TreeMap - 按键排序的映射。 每个修改都维护由实例化时提供的Comparator定义的排序，或者如果它们实现Comparable接口则对每个Object进行比较。 密钥实现Comparable失败以及无法提供Comparator将导致ClassCastExceptions。 插入和删除操作需要O(log(n))时间，因此除非您正在利用排序，否则请避免使用此数据结构。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line">        <span class="comment">// Operators：运算符</span></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line">        System.out.println(<span class="string">"\n-&gt;Operators"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">1</span>, i2 = <span class="number">2</span>; <span class="comment">// 多个声明的简写</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 算数很直接</span></span><br><span class="line">        System.out.println(<span class="string">"1+2 = "</span> + (i1 + i2)); <span class="comment">// =&gt; 3</span></span><br><span class="line">        System.out.println(<span class="string">"2-1 = "</span> + (i2 - i1)); <span class="comment">// =&gt; 1</span></span><br><span class="line">        System.out.println(<span class="string">"2*1 = "</span> + (i2 * i1)); <span class="comment">// =&gt; 2</span></span><br><span class="line">        System.out.println(<span class="string">"1/2 = "</span> + (i1 / i2)); <span class="comment">// =&gt; 0 (int/int 返回 int)</span></span><br><span class="line">        System.out.println(<span class="string">"1/2.0 = "</span> + (i1 / (<span class="keyword">double</span>)i2)); <span class="comment">// =&gt; 0.5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Modulo：模运算</span></span><br><span class="line">        System.out.println(<span class="string">"11%3 = "</span>+(<span class="number">11</span> % <span class="number">3</span>)); <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较运算符</span></span><br><span class="line">        System.out.println(<span class="string">"3 == 2? "</span> + (<span class="number">3</span> == <span class="number">2</span>)); <span class="comment">// =&gt; false</span></span><br><span class="line">        System.out.println(<span class="string">"3 != 2? "</span> + (<span class="number">3</span> != <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line">        System.out.println(<span class="string">"3 &gt; 2? "</span> + (<span class="number">3</span> &gt; <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line">        System.out.println(<span class="string">"3 &lt; 2? "</span> + (<span class="number">3</span> &lt; <span class="number">2</span>)); <span class="comment">// =&gt; false</span></span><br><span class="line">        System.out.println(<span class="string">"2 &lt;= 2? "</span> + (<span class="number">2</span> &lt;= <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line">        System.out.println(<span class="string">"2 &gt;= 2? "</span> + (<span class="number">2</span> &gt;= <span class="number">2</span>)); <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 布尔运算符</span></span><br><span class="line">        System.out.println(<span class="string">"3 &gt; 2 &amp;&amp; 2 &gt; 3? "</span> + ((<span class="number">3</span> &gt; <span class="number">2</span>) &amp;&amp; (<span class="number">2</span> &gt; <span class="number">3</span>))); <span class="comment">// =&gt; false</span></span><br><span class="line">        System.out.println(<span class="string">"3 &gt; 2 || 2 &gt; 3? "</span> + ((<span class="number">3</span> &gt; <span class="number">2</span>) || (<span class="number">2</span> &gt; <span class="number">3</span>))); <span class="comment">// =&gt; true</span></span><br><span class="line">        System.out.println(<span class="string">"!(3 == 2)? "</span> + (!(<span class="number">3</span> == <span class="number">2</span>))); <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 位运算符!</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ~      一元位补</span></span><br><span class="line"><span class="comment">        &lt;&lt;     带符号左移</span></span><br><span class="line"><span class="comment">        &gt;&gt;     带符号/算术右移</span></span><br><span class="line"><span class="comment">        &gt;&gt;&gt;    无符号/逻辑右移</span></span><br><span class="line"><span class="comment">        &amp;      按位与运算</span></span><br><span class="line"><span class="comment">        ^      按位异或运算</span></span><br><span class="line"><span class="comment">        |      按位或运算</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增量运算符</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"\n-&gt;Inc/Dec-rementation"</span>);</span><br><span class="line">        <span class="comment">// ++ 和 -- 运算符分别表示递增和递减1</span></span><br><span class="line">        <span class="comment">// 如果它们放在变量之前，它们会先递增后返回</span></span><br><span class="line">        <span class="comment">// 放在变量之后表示先返回后递增</span></span><br><span class="line">        System.out.println(i++); <span class="comment">// i = 1, prints 0 (后递增)</span></span><br><span class="line">        System.out.println(++i); <span class="comment">// i = 2, prints 2 (先递增)</span></span><br><span class="line">        System.out.println(i--); <span class="comment">// i = 1, prints 2 (后递减)</span></span><br><span class="line">        System.out.println(--i); <span class="comment">// i = 0, prints 0 (先递减)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line">        <span class="comment">// Control Structures：控制结构</span></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line">        System.out.println(<span class="string">"\n-&gt;Control Structures"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if语句和c语言里边差不多</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"I get printed"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"I don't"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"I also don't"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// While循环</span></span><br><span class="line">        <span class="keyword">int</span> fooWhile = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fooWhile &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(fooWhile);</span><br><span class="line">            fooWhile++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"fooWhile Value: "</span> + fooWhile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do While 循环</span></span><br><span class="line">        <span class="keyword">int</span> fooDoWhile = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(fooDoWhile);</span><br><span class="line">            fooDoWhile++;</span><br><span class="line">        &#125; <span class="keyword">while</span>(fooDoWhile &lt; <span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">"fooDoWhile Value: "</span> + fooDoWhile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For 循环</span></span><br><span class="line">        <span class="comment">// for 循环声明的结构 =&gt; for(&lt;start_statement&gt;; &lt;conditional&gt;; &lt;step&gt;)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fooFor = <span class="number">0</span>; fooFor &lt; <span class="number">10</span>; fooFor++) &#123;</span><br><span class="line">            System.out.println(fooFor);</span><br><span class="line">            <span class="comment">// 迭代10次, fooFor 0-&gt;9</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println("fooFor Value: " + fooFor); 这句会报错，因为fooFor在for循环内部声明，无法在循环外部调用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 嵌套的for循环，通过标签退出</span></span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; <span class="number">10</span>; ii++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> jj = <span class="number">0</span>; jj &lt; <span class="number">10</span>; jj++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ii == <span class="number">5</span> &amp;&amp; jj ==<span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span> outer;</span><br><span class="line">                    <span class="comment">// 跳出外部的outer循环，而不是只有内部的</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For Each 循环</span></span><br><span class="line">        <span class="comment">// for循环还能够遍历数组和通过Iterable接口实现的对象</span></span><br><span class="line">        <span class="keyword">int</span>[] fooList = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">// for each 循环结构 =&gt; for (&lt;object&gt; : &lt;iterable&gt;)</span></span><br><span class="line">        <span class="comment">// 可以读成: 对于迭代对象中的每个元素</span></span><br><span class="line">        <span class="comment">// 注意: 对象类型必须匹配可迭代对象中的元素类型</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> bar : fooList) &#123;</span><br><span class="line">            System.out.println(bar);</span><br><span class="line">            <span class="comment">//迭代9次并输出1-9</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Switch Case</span></span><br><span class="line">        <span class="comment">// switch使用byte，short，char和int数据类型</span></span><br><span class="line">        <span class="comment">// 它也适用于枚举类型（在枚举类型中讨论）</span></span><br><span class="line">        <span class="comment">// String类，以及一些包装基本类型的特殊类：字符，字节，短整数和整数</span></span><br><span class="line">        <span class="comment">// 从Java 7及更高版本开始，我们也可以使用String类型</span></span><br><span class="line">        <span class="comment">// 注意：请记住，不在任何特定情况下添加“break”会导致其接着执行下一个case（假设它满足所提供的条件）。</span></span><br><span class="line">        <span class="keyword">int</span> month = <span class="number">3</span>;</span><br><span class="line">        String monthString;</span><br><span class="line">        <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: monthString = <span class="string">"January"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: monthString = <span class="string">"February"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: monthString = <span class="string">"March"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: monthString = <span class="string">"Some other month"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Switch Case Result: "</span> + monthString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Try-with-resources语句（Java 7+）</span></span><br><span class="line">        <span class="comment">// Try-catch-finally语句在Java中按预期工作，但在Java 7+中，try-with-resources语句也可用</span></span><br><span class="line">        <span class="comment">// Try-with-resources通过自动关闭资源简化了try-catch-finally语句</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了使用try-with-resources，先在try语句内包含一个类的实例。 该类必须应用java.lang.AutoCloseable。</span></span><br><span class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"foo.txt"</span>))) &#123;</span><br><span class="line">            <span class="comment">// 你可以试着干一些会抛出异常的事情</span></span><br><span class="line">            System.out.println(br.readLine());</span><br><span class="line">            <span class="comment">// 在Java 7中，即使抛出了异常，资源也会被关闭</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">// 在catch语句生效之前，资源就会关闭</span></span><br><span class="line">            System.out.println(<span class="string">"readLine() failed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在这个例子中，不需要finally声明，BufferReader就已经关闭了</span></span><br><span class="line">        <span class="comment">// 这可以被用来避免在一些边缘情况中，有些finally声明不会被调用的情况</span></span><br><span class="line">        <span class="comment">// 了解更多请访问:</span></span><br><span class="line">        <span class="comment">// https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 条件语句的简写</span></span><br><span class="line">        <span class="comment">// 你可以使用'？'操作符来进行快速分配或逻辑分叉</span></span><br><span class="line">        <span class="comment">// 可以解读成 "If (statement) is true, use &lt;first value&gt;, otherwise, use &lt;second value&gt;"</span></span><br><span class="line">        <span class="keyword">int</span> foo = <span class="number">5</span>;</span><br><span class="line">        String bar = (foo &lt; <span class="number">10</span>) ? <span class="string">"A"</span> : <span class="string">"B"</span>;</span><br><span class="line">        System.out.println(<span class="string">"bar : "</span> + bar); <span class="comment">// 打印 "bar : A", 因为声明foo&lt;10 为 true.</span></span><br><span class="line">        <span class="comment">// 或者就简单的这么写</span></span><br><span class="line">        System.out.println(<span class="string">"bar : "</span> + (foo &lt; <span class="number">10</span> ? <span class="string">"A"</span> : <span class="string">"B"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">////////////////////////////////////////</span></span><br><span class="line">        <span class="comment">// Converting Data Types：转换数据类型</span></span><br><span class="line">        <span class="comment">////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串 到 整数</span></span><br><span class="line">        Integer.parseInt(<span class="string">"123"</span>);<span class="comment">//返回一个整数123</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整数 到 字符串</span></span><br><span class="line">        Integer.toString(<span class="number">123</span>);<span class="comment">//返回一个字符串123</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于其他转换，可以看一下下面的类</span></span><br><span class="line">        <span class="comment">// Double</span></span><br><span class="line">        <span class="comment">// Long</span></span><br><span class="line">        <span class="comment">// String</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line">        <span class="comment">// Classes And Functions：类和函数</span></span><br><span class="line">        <span class="comment">///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n-&gt;Classes &amp; Functions"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (Bicycle类的定义在后边)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过new来实例化一个类</span></span><br><span class="line">        Bicycle trek = <span class="keyword">new</span> Bicycle();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用对象的方法</span></span><br><span class="line">        trek.speedUp(<span class="number">3</span>); <span class="comment">// You should always use setter and getter methods</span></span><br><span class="line">        trek.setCadence(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// toString 会返回这个对象的字符串表示</span></span><br><span class="line">        System.out.println(<span class="string">"trek info: "</span> + trek.toString());</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">// main方法的结束</span></span><br><span class="line">&#125;<span class="comment">// LearnJava类的结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 您可以在一个.java文件中包含其他非公共外层类，但这不是一个好习惯</span></span><br><span class="line"><span class="comment">// 正确的做法是将不同的类拆分为单独的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Class 声明语法：</span></span><br><span class="line"><span class="comment">// &lt;public/private/protected&gt; class &lt;class name&gt; &#123;</span></span><br><span class="line"><span class="comment">//    // 数据字段，构造函数，函数都在里面</span></span><br><span class="line"><span class="comment">//    // 函数在Java中称为方法</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bicycle类的字段/变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cadence; <span class="comment">// Public: 可以从任何地方访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> speed;  <span class="comment">// Private: 只能从类内部访问</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> gear; <span class="comment">// Protected: 可以从类和子类中访问</span></span><br><span class="line">    String name; <span class="comment">// 默认只能从这个包中访问</span></span><br><span class="line">    <span class="keyword">static</span> String className; <span class="comment">// 静态的类变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Static block：静态块</span></span><br><span class="line">    <span class="comment">// Java没有静态构造函数的实现，但有一个静态块可用于初始化类变量（静态变量）</span></span><br><span class="line">    <span class="comment">// 加载类时将调用此块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        className = <span class="string">"Bicycle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Double Brace Initialization：双大括号初始化</span></span><br><span class="line">    <span class="comment">// Java语言没有关于如何以简单方式创建静态集合的语法。 通常您最终会使用一下方式：</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; COUNTRIES = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        COUNTRIES.add(<span class="string">"DENMARK"</span>);</span><br><span class="line">        COUNTRIES.add(<span class="string">"SWEDEN"</span>);</span><br><span class="line">        COUNTRIES.add(<span class="string">"FINLAND"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但是通过使用一种叫做Double Brace Initialization的东西，可以通过一种更简单的方式实现同样的事情。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; COUNTRIES2 = <span class="keyword">new</span> HashSet&lt;String&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="string">"DENMARK"</span>);</span><br><span class="line">        add(<span class="string">"SWEDEN"</span>);</span><br><span class="line">        add(<span class="string">"FINLAND"</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="comment">// 第一个大括号是创建一个新的AnonymousInnerClass，第二个大括号是声明一个实例初始化块</span></span><br><span class="line">    <span class="comment">// 创建匿名内部类时调用此块</span></span><br><span class="line">    <span class="comment">// 这不仅适用于集合，它适用于所有非最终类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数是一种创建类的方法</span></span><br><span class="line">    <span class="comment">// 这就是一个构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 你也可以调用另一个构造函数: this(1, 50, 5, "Bontrager");</span></span><br><span class="line">        gear = <span class="number">1</span>;</span><br><span class="line">        cadence = <span class="number">50</span>;</span><br><span class="line">        speed = <span class="number">5</span>;</span><br><span class="line">        name = <span class="string">"Bontrager"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这是一个带参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">(<span class="keyword">int</span> startCadence, <span class="keyword">int</span> startSpeed, <span class="keyword">int</span> startGear,</span></span></span><br><span class="line"><span class="function"><span class="params">                   String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gear = startGear;</span><br><span class="line">        <span class="keyword">this</span>.cadence = startCadence;</span><br><span class="line">        <span class="keyword">this</span>.speed = startSpeed;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Method 语法:</span></span><br><span class="line">    <span class="comment">// &lt;public/private/protected&gt; &lt;return type&gt; &lt;function name&gt;(&lt;args&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java类通常为其字段实现getter和setter</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Method 声明语法:</span></span><br><span class="line">    <span class="comment">// &lt;access modifier：访问修饰符&gt; &lt;return type&gt; &lt;method name&gt;(&lt;args&gt;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCadence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cadence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// void方法不需要return</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCadence</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        cadence = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGear</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        gear = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speedUp</span><span class="params">(<span class="keyword">int</span> increment)</span> </span>&#123;</span><br><span class="line">        speed += increment;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slowDown</span><span class="params">(<span class="keyword">int</span> decrement)</span> </span>&#123;</span><br><span class="line">        speed -= decrement;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String newName)</span> </span>&#123;</span><br><span class="line">        name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示此对象的属性值的方法</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 从Object类中继承.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"gear: "</span> + gear + <span class="string">" cadence: "</span> + cadence + <span class="string">" speed: "</span> + speed +</span><br><span class="line">                <span class="string">" name: "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// Bicycle类的结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PennyFarthing 是 Bicycle 的一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PennyFarthing</span> <span class="keyword">extends</span> <span class="title">Bicycle</span> </span>&#123;</span><br><span class="line">    <span class="comment">// (Penny Farthings是那些带有大前轮的自行车，这种自行车没有齿轮)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PennyFarthing</span><span class="params">(<span class="keyword">int</span> startCadence, <span class="keyword">int</span> startSpeed)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过super调用父类的构造函数</span></span><br><span class="line">        <span class="keyword">super</span>(startCadence, startSpeed, <span class="number">0</span>, <span class="string">"PennyFarthing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果要覆盖一个父类的方法，您应该用@annotation标记一下（这里是@Override）</span></span><br><span class="line">    <span class="comment">// 了解更多请访问: http://docs.oracle.com/javase/tutorial/java/annotations/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGear</span><span class="params">(<span class="keyword">int</span> gear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object casting：对象转换</span></span><br><span class="line"><span class="comment">// 由于PennyFarthing类扩展自Bicycle类，我们可以说PennyFarthing是一个Bicycle并写道：</span></span><br><span class="line"><span class="comment">// Bicycle bicycle = new PennyFarthing();</span></span><br><span class="line"><span class="comment">// 这称为对象转换，其中一个对象被用于另一个对象。 这里有许多细节和处理更多中间概念： https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Interfaces：接口</span></span><br><span class="line"><span class="comment">// Interface 声明语法</span></span><br><span class="line"><span class="comment">// &lt;access-level&gt; interface &lt;interface-name&gt; extends &lt;super-interfaces&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // Constants</span></span><br><span class="line"><span class="comment">//     // Method declarations</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子 - Food:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Edible</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>; <span class="comment">// 任何实现此接口的类都必须实现此方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Digestible</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">digest</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 从Java 8开始，接口可以有默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hi from default method ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们现在可以创建一个实现这两个接口的类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">implements</span> <span class="title">Edible</span>, <span class="title">Digestible</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">digest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Java中，你只能extend一个类，但是你可以实现多个接口，如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> <span class="keyword">extends</span> <span class="title">ExampleClassParent</span> <span class="keyword">implements</span> <span class="title">InterfaceOne</span>,</span></span><br><span class="line"><span class="class">        <span class="title">InterfaceTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InterfaceOneMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InterfaceTwoMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Abstract Classes：抽象类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类声明语法</span></span><br><span class="line"><span class="comment">// &lt;access-level&gt; abstract class &lt;abstract-class-name&gt; extends</span></span><br><span class="line"><span class="comment">// &lt;super-abstract-classes&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // Constants and variables</span></span><br><span class="line"><span class="comment">//     // Method declarations</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类不能被实例化</span></span><br><span class="line"><span class="comment">// 抽象类可以定义抽象方法</span></span><br><span class="line"><span class="comment">// 抽象方法没有正文并且标记为抽象，非抽象子类必须通过@Override来覆盖来自其超类的所有抽象方法</span></span><br><span class="line"><span class="comment">// 在将重复逻辑与自定义行为相结合时，抽象类可能很有用，但由于抽象类需要继承，因此它们违反了“基于继承的组合”，因此需要组合时请考虑使用其他方法</span></span><br><span class="line"><span class="comment">// https://en.wikipedia.org/wiki/Composition_over_inheritance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非抽象方法可以有正文</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am an animal and I am Eating."</span>);</span><br><span class="line">        <span class="comment">// 注意，在这里我们可以获取私有变量</span></span><br><span class="line">        age = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象类可以有main函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am abstract"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 注意，仍需重写抽象类中的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bark"</span>);</span><br><span class="line">        <span class="comment">// age = 30;    ==&gt; ERROR!    这里会报错，age是Animal的私有变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意，如果你在这里使用@Override注解会发生错误，因为java不允许重写静态方法</span></span><br><span class="line">    <span class="comment">// 这种情况被成为方法隐藏</span></span><br><span class="line">    <span class="comment">// 了解更多请访问: http://stackoverflow.com/questions/16313649/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Dog pluto = <span class="keyword">new</span> Dog();</span><br><span class="line">        pluto.makeSound();</span><br><span class="line">        pluto.eat();</span><br><span class="line">        pluto.printAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Final Classes：final类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Final Class 声明语法</span></span><br><span class="line"><span class="comment">// &lt;access-level&gt; final &lt;final-class-name&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // Constants and variables</span></span><br><span class="line"><span class="comment">//     // Method declarations</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// final类不能被继承，因此最终一定是一个child</span></span><br><span class="line"><span class="comment">// 在某种程度上，final类与抽象类相反，因为抽象类必须被扩展才能使用，而final类不能被扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SaberToothedCat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 注意，仍需重写抽象类中的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Roar"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Final Methods：final方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mammal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果用final来修饰变量的话，则该变量的值不能被修改，成为常量，如下：</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> finalFoo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Final Method 语法:</span></span><br><span class="line">    <span class="comment">// &lt;access modifier&gt; final &lt;return type&gt; &lt;function name&gt;(&lt;args&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// final方法和final类一样，不能在子类中被重写</span></span><br><span class="line">    <span class="comment">// 因此一定是该方法的最终实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isWarmBlooded</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enum Type：枚举类型</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 枚举类型是一种特殊的数据类型，它使变量成为一组预定义的常量。</span></span><br><span class="line"><span class="comment">// 变量必须等于为其预定义的值之一。 因为它们是常量，所以枚举类型字段的名称是大写字母。</span></span><br><span class="line"><span class="comment">// 在Java编程语言中，使用enum关键字定义枚举类型。</span></span><br><span class="line"><span class="comment">// 例如，您可以将星期几的枚举类型指定为：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Day &#123;</span><br><span class="line">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,</span><br><span class="line">    THURSDAY, FRIDAY, SATURDAY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以像这样使用Day</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// enum变量</span></span><br><span class="line">    Day day;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumTest</span><span class="params">(Day day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tellItLikeItIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> MONDAY:</span><br><span class="line">                System.out.println(<span class="string">"Mondays are bad."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRIDAY:</span><br><span class="line">                System.out.println(<span class="string">"Fridays are better."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SATURDAY:</span><br><span class="line">            <span class="keyword">case</span> SUNDAY:</span><br><span class="line">                System.out.println(<span class="string">"Weekends are best."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"Midweek days are so-so."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnumTest firstDay = <span class="keyword">new</span> EnumTest(Day.MONDAY);</span><br><span class="line">        firstDay.tellItLikeItIs(); <span class="comment">// =&gt; Mondays are bad.</span></span><br><span class="line">        EnumTest thirdDay = <span class="keyword">new</span> EnumTest(Day.WEDNESDAY);</span><br><span class="line">        thirdDay.tellItLikeItIs(); <span class="comment">// =&gt; Midweek days are so-so.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enum types(枚举类型) 比我们上边展示的要强大的多</span></span><br><span class="line"><span class="comment">// enum正文可以包含各种方法和字段</span></span><br><span class="line"><span class="comment">// 详细的可以看： https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在开始学Lambda表达式</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Java8版本的新增功能是lambda表达式。</span></span><br><span class="line"><span class="comment">// Lambda在函数式编程语言中更常见，这意味着它们是可以在不属于类的情况下创建的方法，如同它本身就是一个对象一样传递，并按需执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后要注意，lambdas必须通过一个功能接口实现</span></span><br><span class="line"><span class="comment">// 功能接口是仅声明了一个抽象方法的接口</span></span><br><span class="line"><span class="comment">// 它可以有任意数量的默认方法</span></span><br><span class="line"><span class="comment">// Lambda表达式可以用作该功能接口的实例</span></span><br><span class="line"><span class="comment">// 满足要求的任何接口都被视为功能接口</span></span><br><span class="line"><span class="comment">// 您可以阅读更多有关上述接口的资料</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Lambda 声明语句:</span></span><br><span class="line">        <span class="comment">// &lt;zero or more parameters&gt; -&gt; &lt;expression body or statement block&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我们将在接下来的例子中使用这个hashmap</span></span><br><span class="line">        Map&lt;String, String&gt; planets = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        planets.put(<span class="string">"Mercury"</span>, <span class="string">"87.969"</span>);</span><br><span class="line">        planets.put(<span class="string">"Venus"</span>, <span class="string">"224.7"</span>);</span><br><span class="line">        planets.put(<span class="string">"Earth"</span>, <span class="string">"365.2564"</span>);</span><br><span class="line">        planets.put(<span class="string">"Mars"</span>, <span class="string">"687"</span>);</span><br><span class="line">        planets.put(<span class="string">"Jupiter"</span>, <span class="string">"4,332.59"</span>);</span><br><span class="line">        planets.put(<span class="string">"Saturn"</span>, <span class="string">"10,759"</span>);</span><br><span class="line">        planets.put(<span class="string">"Uranus"</span>, <span class="string">"30,688.5"</span>);</span><br><span class="line">        planets.put(<span class="string">"Neptune"</span>, <span class="string">"60,182"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下边这个例子是一个没有参数，使用了java.util.function.Supplier中的Supplier功能接口的Lambda</span></span><br><span class="line">        <span class="comment">// 实际的lambda表达式是在numPlanets =之后出现的内容</span></span><br><span class="line">        Supplier&lt;String&gt; numPlanets = () -&gt; Integer.toString(planets.size());</span><br><span class="line">        System.out.format(<span class="string">"Number of Planets: %s\n\n"</span>, numPlanets.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一下例子是具有一个参数并使用java.util.function.Consumer中的Consumer功能接口的Lambda</span></span><br><span class="line">        <span class="comment">// 这是因为行星是一个Map，它实现了Collection和Iterable</span></span><br><span class="line">        <span class="comment">// 此处使用的forEach（可以在Iterable中找到）将lambda表达式应用于Collection的每个成员</span></span><br><span class="line">        <span class="comment">// forEach的默认实现表现如下：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            for (T t : this)</span></span><br><span class="line"><span class="comment">                action.accept(t);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实际上lambda表达式是传给forEach的参数</span></span><br><span class="line">        planets.keySet().forEach((p) -&gt; System.out.format(<span class="string">"%s\n"</span>, p));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果你只有一个参数，也可以写成 (注意p周围的括号没了):</span></span><br><span class="line">        planets.keySet().forEach(p -&gt; System.out.format(<span class="string">"%s\n"</span>, p));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在以上内容中，我们可以看到planets是一个HashMap，keySet()方法返回一个它的键集，forEach将每个元素应用于lambda表达式:(parameter p) -&gt; System.out.format("%s\n", p)</span></span><br><span class="line">        <span class="comment">// 每次，该元素被称为“消耗”，并且应用lambda体中引用的语句</span></span><br><span class="line">        <span class="comment">// lambda体是在-&gt;之后出现的部分</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上边的语句如果不用lambda写的话会看起来更加传统</span></span><br><span class="line">        <span class="keyword">for</span> (String planet : planets.keySet()) &#123;</span><br><span class="line">            System.out.format(<span class="string">"%s\n"</span>, planet);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个例子与上面的不同之处在于使用了不同的forEach实现：在实现Map接口的HashMap类中找到的forEach</span></span><br><span class="line">        <span class="comment">// 这个forEach接受一个BiConsumer，一般来说这是一种奇特的方式，也就是说它处理的是每个Key -&gt; Value对的Set</span></span><br><span class="line">        <span class="comment">// 此默认实现表现如下：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            for (Map.Entry&lt;K, V&gt; entry : map.entrySet())</span></span><br><span class="line"><span class="comment">                action.accept(entry.getKey(), entry.getValue());</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实际的lambda表达式是传给forEach的参数</span></span><br><span class="line">        String orbits = <span class="string">"%s orbits the Sun in %s Earth days.\n"</span>;</span><br><span class="line">        planets.forEach((K, V) -&gt; System.out.format(orbits, K, V));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上边的语句如果不用lambda写的话会看起来更加传统</span></span><br><span class="line">        <span class="keyword">for</span> (String planet : planets.keySet()) &#123;</span><br><span class="line">            System.out.format(orbits, planet, planets.get(planet));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 或者，如果更严格地遵循默认实现提供的规范</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; planet : planets.entrySet()) &#123;</span><br><span class="line">            System.out.format(orbits, planet.getKey(), planet.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这些例子仅涵盖了lambda的基本用法</span></span><br><span class="line">        <span class="comment">// 它可能看起来不是非常有用，但请记住，lambda可以创建为一个对象，以后可以作为参数传递给其他方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn Java in Y minutes</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Python快速入门：6小时精通Python(一)</title>
    <url>/2019/04/19/6%E5%B0%8F%E6%97%B6%E7%B2%BE%E9%80%9Apython-%E4%B8%80/</url>
    <content><![CDATA[<p>译自：<a href="https://learnxinyminutes.com/docs/python3/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/python3/</a></p>
<p>阅前须知：</p>
<ul>
<li>“#”后边的是注释</li>
<li>带行号的是python代码</li>
<li>不带行号的是代码的输出</li>
<li>把下边的语句对着敲一边自然就会了，博主用的是jupyter notebook</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 1. 简单数据类型和运算</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数学运算</span></span><br><span class="line"><span class="number">1</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 除法默认会返回float（与python2不同）</span></span><br><span class="line"><span class="number">10</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure>

<pre><code>5.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 除法取整(乡下取整)</span></span><br><span class="line"><span class="number">5</span> // <span class="number">3</span></span><br></pre></td></tr></table></figure>

<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">-5</span> // <span class="number">3</span></span><br></pre></td></tr></table></figure>

<pre><code>-2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果需要返回float，至少需要有一个参与运算的数字是float</span></span><br><span class="line"><span class="number">5</span> // <span class="number">3.0</span></span><br></pre></td></tr></table></figure>

<pre><code>1.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 余数运算</span></span><br><span class="line"><span class="number">7</span> % <span class="number">3</span></span><br></pre></td></tr></table></figure>

<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 幂运算</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span></span><br></pre></td></tr></table></figure>

<pre><code>8</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # &amp; | ^ ~是按位运算符，这里不讲了</span></span><br><span class="line"><span class="comment"># # &lt;&lt; &gt;&gt; 是移位运算符，这里就不展示了</span></span><br><span class="line"><span class="comment"># a = 0011 1100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b = 0000 1101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a&amp;b = 0000 1100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a|b = 0011 1101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a^b = 0011 0001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ~a  = 1100 0011</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用括号强制优先</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">3</span>) * <span class="number">2</span></span><br></pre></td></tr></table></figure>

<pre><code>8</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Boolean值有保留字</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取反用关键字not</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算 and or</span></span><br><span class="line"><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>

<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参与数字运算的时候 True默认为1 False为0</span></span><br><span class="line"><span class="keyword">True</span> + <span class="keyword">True</span> <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="keyword">True</span> * <span class="number">8</span>    <span class="comment"># =&gt; 8</span></span><br><span class="line"><span class="keyword">False</span> - <span class="number">5</span>   <span class="comment"># =&gt; -5</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 与数字进行比较运算时，也按照1 0 来进行比较</span></span><br><span class="line"><span class="number">0</span> == <span class="keyword">False</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> == <span class="keyword">True</span>   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="keyword">True</span>   <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">-5</span> != <span class="keyword">False</span> <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过bool()，将int数值投射到bool值上</span></span><br><span class="line"><span class="comment"># 出了0是False，其他都是True</span></span><br><span class="line">bool(<span class="number">0</span>)     <span class="comment"># =&gt; False</span></span><br><span class="line">bool(<span class="number">4</span>)     <span class="comment"># =&gt; True</span></span><br><span class="line">bool(<span class="number">-6</span>)    <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用boolean运算符直接对int数值进行计算，计算过程按照bool，返回的值依然是int</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span>     <span class="comment"># =&gt; 0</span></span><br><span class="line"><span class="number">-5</span> <span class="keyword">or</span> <span class="number">0</span>     <span class="comment"># =&gt; -5</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋值是单等号 =，相等判断是双等号 ==</span></span><br><span class="line"><span class="number">1</span> == <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不相等判断 !=</span></span><br><span class="line"><span class="number">1</span> != <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> != <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数学比较</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">10</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">10</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> &lt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断2是否在一个范围内</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">4</span> &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">2</span> &lt; <span class="number">5</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="comment"># 也可以通过链式写法</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">4</span> &lt; <span class="number">2</span> &lt; <span class="number">5</span>  <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋值是单等号 =，相等判断是双等号 ==</span></span><br><span class="line"><span class="comment"># 还有一个相等判断保留字 is</span></span><br><span class="line"><span class="comment"># is 判断前后两者是否指向同一个对象（如果是两个对象，就算值相同，也会返回False）</span></span><br><span class="line"><span class="comment"># == 只判断值是否相同</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># Point a at a new list, [1, 2, 3, 4]</span></span><br><span class="line">b = a             <span class="comment"># Point b at what a is pointing to</span></span><br><span class="line">b <span class="keyword">is</span> a            <span class="comment"># =&gt; True, a and b refer to the same object</span></span><br><span class="line">b == a            <span class="comment"># =&gt; True, a's and b's objects are equal</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># Point b at a new list, [1, 2, 3, 4]</span></span><br><span class="line">b <span class="keyword">is</span> a            <span class="comment"># =&gt; False, a and b do not refer to the same object</span></span><br><span class="line">b == a            <span class="comment"># =&gt; True, a's and b's objects are equal</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过‘或者“可以创建string</span></span><br><span class="line"><span class="string">"This is a string."</span></span><br><span class="line"><span class="string">'This is also a string.'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># String也可以通过+连接，但是尽量不要</span></span><br><span class="line"><span class="string">"Hello "</span> + <span class="string">"world!"</span>  <span class="comment"># =&gt; "Hello world!"</span></span><br><span class="line"><span class="comment"># 中间不写，也会自动连接</span></span><br><span class="line"><span class="string">"Hello "</span> <span class="string">"world!"</span>    <span class="comment"># =&gt; "Hello world!"</span></span><br></pre></td></tr></table></figure>

<pre><code>&#39;Hello world!&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个string可以看作是一个char的list</span></span><br><span class="line"><span class="string">"This is a string"</span>[<span class="number">0</span>]  <span class="comment"># =&gt; 'T'</span></span><br></pre></td></tr></table></figure>

<pre><code>&#39;T&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># len()是一个保留函数，可以计算list的长度</span></span><br><span class="line">len(<span class="string">"This is a string"</span>)  <span class="comment"># =&gt; 16</span></span><br></pre></td></tr></table></figure>

<pre><code>16</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中的string对象，有.format方法，可以用来对该string进行格式化操作</span></span><br><span class="line"><span class="string">"&#123;&#125; can be &#123;&#125;"</span>.format(<span class="string">"Strings"</span>, <span class="string">"interpolated"</span>)  <span class="comment"># =&gt; "Strings can be interpolated"</span></span><br></pre></td></tr></table></figure>

<pre><code>&#39;Strings can be interpolated&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过在大括号&#123;&#125;中添加format参数的index来进行填充指定</span></span><br><span class="line"><span class="string">"&#123;0&#125; be nimble, &#123;0&#125; be quick, &#123;0&#125; jump over the &#123;1&#125;"</span>.format(<span class="string">"Jack"</span>, <span class="string">"candle stick"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Jack be nimble, Jack be quick, Jack jump over the candle stick&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以给format中的参数命名，来代替index.</span></span><br><span class="line"><span class="string">"&#123;name&#125; wants to eat &#123;food&#125;"</span>.format(name=<span class="string">"Bob"</span>, food=<span class="string">"lasagna"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Bob wants to eat lasagna&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果需要兼容python2，老版的format写法如下</span></span><br><span class="line"><span class="string">"%s can be %s the %s way"</span> % (<span class="string">"Strings"</span>, <span class="string">"interpolated"</span>, <span class="string">"old"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Strings can be interpolated the old way&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在python3.6之后的版本中，可以在string前加f来进行format操作</span></span><br><span class="line">name = <span class="string">"Reiko"</span></span><br><span class="line"><span class="string">f"She said her name is <span class="subst">&#123;name&#125;</span>."</span> <span class="comment"># =&gt; "She said her name is Reiko"</span></span><br><span class="line"><span class="comment"># 在大括号中，也可以调用python的方法</span></span><br><span class="line"><span class="string">f"<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;len(name)&#125;</span> characters long."</span></span><br></pre></td></tr></table></figure>

<pre><code>&#39;Reiko is 5 characters long.&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># None也是一个对象，不是一个值</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">a1 = <span class="keyword">False</span></span><br><span class="line">b1 = <span class="keyword">None</span></span><br><span class="line">a1 <span class="keyword">is</span> b1</span><br></pre></td></tr></table></figure>

<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不要用==来和None进行比较</span></span><br><span class="line"><span class="comment"># 要通过is来判断变量是不是None</span></span><br><span class="line"><span class="string">"etc"</span> <span class="keyword">is</span> <span class="keyword">None</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="keyword">None</span> <span class="keyword">is</span> <span class="keyword">None</span>   <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># None, 0, 以及空的 strings/lists/dicts/tuples 都等于 False.</span></span><br><span class="line"><span class="comment"># All other values are True</span></span><br><span class="line">bool(<span class="number">0</span>)   <span class="comment"># =&gt; False</span></span><br><span class="line">bool(<span class="string">""</span>)  <span class="comment"># =&gt; False</span></span><br><span class="line">bool([])  <span class="comment"># =&gt; False</span></span><br><span class="line">bool(&#123;&#125;)  <span class="comment"># =&gt; False</span></span><br><span class="line">bool(())  <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure>

<pre><code>False</code></pre>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn Python in Y minutes</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>6小时精通Python</tag>
        <tag>Python精通</tag>
      </tags>
  </entry>
  <entry>
    <title>Python快速入门：6小时精通Python(三)</title>
    <url>/2019/04/19/6%E5%B0%8F%E6%97%B6%E7%B2%BE%E9%80%9Apython-%E4%B8%89/</url>
    <content><![CDATA[<p>译自：<a href="https://learnxinyminutes.com/docs/python3/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/python3/</a></p>
<p>阅前须知：</p>
<ul>
<li>“#”后边的是注释</li>
<li>带行号的是python代码</li>
<li>不带行号的是代码的输出</li>
<li>把下边的语句对着敲一边自然就会了，博主用的是jupyter notebook</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 3. 控制流和迭代器</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">some_var = <span class="number">5</span></span><br><span class="line"><span class="comment"># python通过缩进来对代码进行分段（连续同缩进量的代码可以看作在一个大括号里，空行、注释行自动忽略）</span></span><br><span class="line"><span class="comment"># 一个缩进应该是4个空格，不是制表符</span></span><br><span class="line"><span class="keyword">if</span> some_var &gt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"some_var is totally bigger than 10."</span>)</span><br><span class="line"><span class="keyword">elif</span> some_var &lt; <span class="number">10</span>:    <span class="comment"># 可选</span></span><br><span class="line">    print(<span class="string">"some_var is smaller than 10."</span>)</span><br><span class="line"><span class="keyword">else</span>:                  <span class="comment"># 可选</span></span><br><span class="line">    print(<span class="string">"some_var is indeed 10."</span>)</span><br></pre></td></tr></table></figure>

<pre><code>some_var is smaller than 10.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for item in list</span></span><br><span class="line"><span class="comment"># 迭代取出list中的所有item进行计算</span></span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> [<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"mouse"</span>]:</span><br><span class="line">    <span class="comment"># You can use format() to interpolate formatted strings</span></span><br><span class="line">    print(<span class="string">"&#123;&#125; is a mammal"</span>.format(animal))</span><br></pre></td></tr></table></figure>

<pre><code>dog is a mammal
cat is a mammal
mouse is a mammal</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># range(n)方法返回一个list,[0,1,2,...,n-1]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2
3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># range(start,end)返回一个list，[start, start+1, ..., end-1]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">8</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>4
5
6
7</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># range(start,end,step)返回一个list，[start, start+step, ..., (直到&gt;=end)]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>4
6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while循环，持续迭代知道不满足判断条件</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">4</span>:</span><br><span class="line">    print(x)</span><br><span class="line">    x += <span class="number">1</span>  <span class="comment"># Shorthand for x = x + 1</span></span><br></pre></td></tr></table></figure>

<pre><code>0
1
2
3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过try except来处理异常（避免报错直接退出）</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># raise方法，可以手动报错</span></span><br><span class="line">    <span class="keyword">raise</span> IndexError(<span class="string">"This is an index error"</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># pass保留字代表这一行啥不也干</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (TypeError, NameError):</span><br><span class="line">    <span class="comment"># 如果有多个except，可以同时执行</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 可选，如果try的代码块没有问题，则执行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"All good!"</span>)</span><br><span class="line"><span class="comment"># 可选，不管有没有问题，都会执行finally中的代码块</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"We can clean up resources here"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>We can clean up resources here</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通常open(fileName)之后，需要调用close方法来释放内存</span></span><br><span class="line"><span class="comment"># 为了避免代码出错，产生内存垃圾，需要</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     open</span></span><br><span class="line"><span class="comment"># finally:</span></span><br><span class="line"><span class="comment">#     close</span></span><br><span class="line"><span class="comment"># 也可以通过with open() as name:来进行声明，该声明块结束后会自动close</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"myfile.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python提供一种基础抽象方法叫做Iterable（可迭代的）</span></span><br><span class="line"><span class="comment"># 一个iterable对象，可以被当作sequence对待</span></span><br><span class="line"><span class="comment"># range函数返回的对象其实就是iterable</span></span><br><span class="line">filled_dict = &#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>, <span class="string">"three"</span>: <span class="number">3</span>&#125;</span><br><span class="line">our_iterable = filled_dict.keys()</span><br><span class="line">print(our_iterable)  <span class="comment"># =&gt; dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.</span></span><br></pre></td></tr></table></figure>

<pre><code>dict_keys([&#39;one&#39;, &#39;two&#39;, &#39;three&#39;])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iterable 可迭代，比如放到for循环中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> our_iterable:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>one
two
three</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但是无法通过index取出其中的数值</span></span><br><span class="line"><span class="comment"># 会报错</span></span><br><span class="line">our_iterable[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-114-138f56ebc699&gt; in &lt;module&gt;()
      1 # 但是无法通过index取出其中的数值
      2 # 会报错
----&gt; 3 our_iterable[0]


TypeError: &#39;dict_keys&#39; object does not support indexing</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iterable对象可以通过iter方法生成迭代器</span></span><br><span class="line">our_iterator = iter(our_iterable)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">our_iterator</span><br></pre></td></tr></table></figure>

<pre><code>&lt;dict_keyiterator at 0x102e49db8&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 迭代器可以在遍历过程中记录当前状态（位置）</span></span><br><span class="line"><span class="comment"># 我们可以通过next函数取出迭代器中的下一个item</span></span><br><span class="line">next(our_iterator)  <span class="comment"># =&gt; "one"</span></span><br></pre></td></tr></table></figure>

<pre><code>&#39;one&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前迭代的位置会被存储下来</span></span><br><span class="line">next(our_iterator)  <span class="comment"># =&gt; "two"</span></span><br><span class="line">next(our_iterator)  <span class="comment"># =&gt; "three"</span></span><br></pre></td></tr></table></figure>

<pre><code>&#39;three&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 超出迭代范围，就报错</span></span><br><span class="line">next(our_iterator)</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-119-228a51d4a8ec&gt; in &lt;module&gt;()
----&gt; 1 next(our_iterator)


StopIteration: </code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过list方法把iterable转化为list，就可以访问所有对象了</span></span><br><span class="line">list(filled_dict.keys())  <span class="comment"># =&gt; Returns ["one", "two", "three"]</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</code></pre>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn Python in Y minutes</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>6小时精通Python</tag>
        <tag>Python精通</tag>
      </tags>
  </entry>
  <entry>
    <title>Python快速入门：6小时精通Python(二)</title>
    <url>/2019/04/19/6%E5%B0%8F%E6%97%B6%E7%B2%BE%E9%80%9Apython-%E4%BA%8C/</url>
    <content><![CDATA[<p>译自：<a href="https://learnxinyminutes.com/docs/python3/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/python3/</a></p>
<p>阅前须知：</p>
<ul>
<li>“#”后边的是注释</li>
<li>带行号的是python代码</li>
<li>不带行号的是代码的输出</li>
<li>把下边的语句对着敲一边自然就会了，博主用的是jupyter notebook</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 2. 变量和集合</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出用print()</span></span><br><span class="line">print(<span class="string">"I'm Python. Nice to meet you!"</span>)</span><br><span class="line">print(<span class="string">"I'm Python. Nice to meet you!"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>I&#39;m Python. Nice to meet you!
I&#39;m Python. Nice to meet you!</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print函数默认在结束时插入换行符</span></span><br><span class="line"><span class="comment"># 可以通过end参数改变</span></span><br><span class="line">print(<span class="string">"Hello, World"</span>, end=<span class="string">"!"</span>)</span><br><span class="line">print(<span class="string">"Hello, World"</span>, end=<span class="string">"!"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Hello, World!Hello, World!</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在console命令行中获得输入，可以使用input，参数会作为提示进行输出</span></span><br><span class="line"><span class="comment"># Note: 在python早期版本中，input函数名称为raw_input</span></span><br><span class="line">input_string_var = input(<span class="string">"Enter some data: "</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Enter some data: 123</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_string_var</span><br></pre></td></tr></table></figure>

<pre><code>&#39;123&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中没有变量声明，只有赋值</span></span><br><span class="line"><span class="comment"># 变量的命名惯例为小写字母，多个单词通过_连接： lower_case_with_underscores</span></span><br><span class="line">some_var = <span class="number">5</span></span><br><span class="line">some_var  <span class="comment"># =&gt; 5</span></span><br></pre></td></tr></table></figure>

<pre><code>5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问一个没有赋值过的变量名，会抛出异常</span></span><br><span class="line"><span class="comment"># 直接看console中的输出来了解异常原因</span></span><br><span class="line">some_unknown_var</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-48-17aa7cb5f29d&gt; in &lt;module&gt;()
      1 # 访问一个没有赋值过的变量名，会抛出异常
      2 # 直接看console中的输出来了解异常原因
----&gt; 3 some_unknown_var


NameError: name &#39;some_unknown_var&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if 可以用来作为一种表达式 </span></span><br><span class="line"><span class="comment"># a if b else c 意为 b为True取a，b为False取c</span></span><br><span class="line">hoo = <span class="string">"yahoo!"</span> <span class="keyword">if</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span>  <span class="comment"># =&gt; "yahoo!"</span></span><br><span class="line">hoo</span><br></pre></td></tr></table></figure>

<pre><code>&#39;yahoo!&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个空的list</span></span><br><span class="line">li = []</span><br><span class="line"><span class="comment"># 也可以跳过声明直接赋值</span></span><br><span class="line">other_li = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list有append函数，可以在末尾添加item</span></span><br><span class="line">li.append(<span class="number">1</span>)    <span class="comment"># li is now [1]</span></span><br><span class="line">li.append(<span class="number">2</span>)    <span class="comment"># li is now [1, 2]</span></span><br><span class="line">li.append(<span class="number">4</span>)    <span class="comment"># li is now [1, 2, 4]</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li is now [1, 2, 4, 3]</span></span><br><span class="line"><span class="comment"># pop函数可以删除list中的最后一个元素</span></span><br><span class="line">li.pop()        <span class="comment"># =&gt; 3 and li is now [1, 2, 4]</span></span><br><span class="line"><span class="comment"># 还是把3放回去吧</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li is now [1, 2, 4, 3] again.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过item的index可以访问对应位置item的值</span></span><br><span class="line">li[<span class="number">0</span>]   <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># 可以通过负数来倒着数，-1代表最后一个</span></span><br><span class="line">li[<span class="number">-1</span>]  <span class="comment"># =&gt; 3</span></span><br></pre></td></tr></table></figure>

<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果index访问的item超出list长度，会抛出异常</span></span><br><span class="line">li[<span class="number">4</span>]  <span class="comment"># IndexError</span></span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

IndexError                                Traceback (most recent call last)

&lt;ipython-input-53-9bf3eba2f737&gt; in &lt;module&gt;()
      1 # 如果index访问的item超出list长度，会抛出异常
----&gt; 2 li[4]  # Raises an IndexError


IndexError: list index out of range</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># li[start:end:step]，你可以通过分片来对list进行部分访问</span></span><br><span class="line"><span class="comment"># li[a:b]，意为取出li中index为a的item至index为b-1的item（含头不含尾）</span></span><br><span class="line">li[<span class="number">1</span>:<span class="number">3</span>]   <span class="comment"># =&gt; [2, 4]</span></span><br><span class="line"><span class="comment"># 省略头/尾的参数，则代表 从头开始/到尾结束</span></span><br><span class="line">li[:<span class="number">3</span>]    <span class="comment"># =&gt; [1, 2, 4]</span></span><br><span class="line">li[<span class="number">2</span>:]    <span class="comment"># =&gt; [4, 3]</span></span><br><span class="line"><span class="comment"># li[a:b:c]意为从li中index为a开始，index每次+c取item，直至所取item的index&gt;=b</span></span><br><span class="line">li[::<span class="number">2</span>]   <span class="comment"># =&gt;[1, 4]</span></span><br><span class="line"><span class="comment"># li[a:b:c]c为负值的时候则倒着取</span></span><br><span class="line">li[::<span class="number">-1</span>]  <span class="comment"># =&gt; [3, 4, 2, 1]</span></span><br></pre></td></tr></table></figure>

<pre><code>[3, 4, 2, 1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果要对list进行deep copy（复制object所有内容但不是同一对象）</span></span><br><span class="line"><span class="comment"># 使用如下语句</span></span><br><span class="line">li2 = li[:]</span><br><span class="line">li2 == li <span class="comment"># =&gt; True</span></span><br><span class="line">li2 <span class="keyword">is</span> li <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure>

<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># del[index]方法可以删除list中index位置的元素</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">2</span>]  <span class="comment"># li is now [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove(value)方法会删除list中第一个值等于value的item</span></span><br><span class="line">li.remove(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove方法调用时，如果没有对应value的item，则会报错</span></span><br><span class="line">li.remove(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-58-0f5f01941ba3&gt; in &lt;module&gt;()
      1 # remove方法调用时，如果没有对应value的item，则会报错
----&gt; 2 li.remove(100)


ValueError: list.remove(x): x not in list</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># insert(index, value)可以在list中的index处插入值为value的item</span></span><br><span class="line">li.insert(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># li is now [1, 2, 3] again</span></span><br><span class="line">li</span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># index(value)方法可以在list中进行查询,返回值为value的item的index</span></span><br><span class="line">li.index(<span class="number">2</span>)  <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># 没有的话就报错</span></span><br><span class="line">li.index(<span class="number">4</span>)  <span class="comment"># Raises a ValueError as 4 is not in the list</span></span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-60-4520a794cb71&gt; in &lt;module&gt;()
      2 li.index(2)  # =&gt; 1
      3 # 没有的话就报错
----&gt; 4 li.index(4)  # Raises a ValueError as 4 is not in the list


ValueError: 4 is not in list</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以用+直接连接两个list</span></span><br><span class="line"><span class="comment"># 这里没有进行赋值，所以li和other_li都没变</span></span><br><span class="line">li + other_li  <span class="comment"># =&gt; [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3, 4, 5, 6]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果调用list内部方法，extend进行连接，则调用方法的list会默认被赋值</span></span><br><span class="line">li.extend(other_li)</span><br><span class="line">li</span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3, 4, 5, 6]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过in关键字，判断value是否存在在list中</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> li  <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># len方法可以返回list长度</span></span><br><span class="line">len(li)  <span class="comment"># =&gt; 6</span></span><br></pre></td></tr></table></figure>

<pre><code>6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tuple和list相似，但是不可变</span></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tup[<span class="number">0</span>]      <span class="comment"># =&gt; 1</span></span><br><span class="line">tup[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># 赋值就报错</span></span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-65-4b7af0c6f896&gt; in &lt;module&gt;()
      2 tup = (1, 2, 3)
      3 tup[0]      # =&gt; 1
----&gt; 4 tup[0] = 3  # 赋值就报错


TypeError: &#39;tuple&#39; object does not support item assignment</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果长度为1的tuple，需要在唯一的item后添加逗号','来声明自己是tuple</span></span><br><span class="line"><span class="comment"># 否则python会把它的类型解析成唯一item的类型</span></span><br><span class="line">type((<span class="number">1</span>))   <span class="comment"># =&gt; &lt;class 'int'&gt;</span></span><br><span class="line">type((<span class="number">1</span>,))  <span class="comment"># =&gt; &lt;class 'tuple'&gt;</span></span><br><span class="line">type(())    <span class="comment"># =&gt; &lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>tuple</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 大部分list操作都可以应用到tuple上</span></span><br><span class="line">len(tup)         <span class="comment"># =&gt; 3</span></span><br><span class="line">tup + (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment"># =&gt; (1, 2, 3, 4, 5, 6)</span></span><br><span class="line">tup[:<span class="number">2</span>]          <span class="comment"># =&gt; (1, 2)</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> tup         <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以对tuple进行解压，分别赋值给变量</span></span><br><span class="line">a, b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># a = 1, b = 2 and c = 3</span></span><br><span class="line"><span class="comment"># 还可以进行扩展拆包</span></span><br><span class="line">a, *b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># a = 1, b = [2, 3] and c = 4</span></span><br><span class="line"><span class="comment"># 如果你不写括号，tuple也会自动生成</span></span><br><span class="line">d, e, f = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="comment"># 交换两个变量的值</span></span><br><span class="line">e, d = d, e  <span class="comment"># d is now 5 and e is now 4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dictionary存储的是key到value的映射</span></span><br><span class="line"><span class="comment"># 生成空的dict</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># 也可以直接赋值</span></span><br><span class="line">filled_dict = &#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>, <span class="string">"three"</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过方括号dict[key] = value 查询对应key的值</span></span><br><span class="line">filled_dict[<span class="string">'one'</span>]</span><br></pre></td></tr></table></figure>

<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dictionary中的key必须是不可变类型量（immutable type）</span></span><br><span class="line"><span class="comment"># Immutable types 包括 ints, floats, strings, tuples.</span></span><br><span class="line"><span class="comment"># value是啥都行</span></span><br><span class="line">invalid_dict = &#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]: <span class="string">"123"</span>&#125;  <span class="comment"># =&gt; TypeError: unhashable type: 'list'</span></span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-71-b260036dbc7a&gt; in &lt;module&gt;()
      2 # Immutable types 包括 ints, floats, strings, tuples.
      3 # value是啥都行
----&gt; 4 invalid_dict = {[1,2,3]: &quot;123&quot;}  # =&gt; TypeError: unhashable type: &#39;list&#39;


TypeError: unhashable type: &#39;list&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过dictionary中的keys()方法，可以迭代取出字典中的key</span></span><br><span class="line"><span class="comment"># 通过list()可以将该方法的结果转化为list</span></span><br><span class="line"><span class="comment"># python3.7之前的版本，不保证key的取出顺序</span></span><br><span class="line"><span class="comment"># python3.7之后，key会按照在字典中的顺序取出</span></span><br><span class="line">list(filled_dict.keys())  <span class="comment"># =&gt; ["three", "two", "one"] in Python &lt;3.7</span></span><br><span class="line">list(filled_dict.keys())  <span class="comment"># =&gt; ["one", "two", "three"] in Python 3.7+</span></span><br></pre></td></tr></table></figure>

<pre><code>[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同理，通过values方法可以取出values</span></span><br><span class="line">list(filled_dict.values())  <span class="comment"># =&gt; [3, 2, 1]  in Python &lt;3.7</span></span><br><span class="line">list(filled_dict.values())  <span class="comment"># =&gt; [1, 2, 3] in Python 3.7+</span></span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3, 5]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过in保留字，来检查dictionary中是否包含该key（而非value）</span></span><br><span class="line"><span class="string">"one"</span> <span class="keyword">in</span> filled_dict  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> filled_dict      <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure>

<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取一个字典中不存在的key的value会报错</span></span><br><span class="line">filled_dict[<span class="string">"four"</span>]  <span class="comment"># KeyError</span></span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-75-6e19dabe2a92&gt; in &lt;module&gt;()
      1 # 取一个字典中不存在的key的value会报错
----&gt; 2 filled_dict[&quot;four&quot;]  # KeyError


KeyError: &#39;four&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过get方法，可以避免报错，如果没有，返回None</span></span><br><span class="line">filled_dict.get(<span class="string">"one"</span>)      <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">"four"</span>)     <span class="comment"># =&gt; None</span></span><br><span class="line"><span class="comment"># 也可以在get方法中增加第二个参数，来代替查询不到时，默认返回的None</span></span><br><span class="line">filled_dict.get(<span class="string">"one"</span>, <span class="number">4</span>)   <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">"four"</span>, <span class="number">4</span>)  <span class="comment"># =&gt; 4</span></span><br></pre></td></tr></table></figure>

<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setdefault方法可以给不存在的key赋值</span></span><br><span class="line"><span class="comment"># 如果该键值对（key:value）已存在，则不生效</span></span><br><span class="line">filled_dict.setdefault(<span class="string">"five"</span>, <span class="number">5</span>)  <span class="comment"># filled_dict["five"] is set to 5</span></span><br><span class="line">filled_dict.setdefault(<span class="string">"five"</span>, <span class="number">6</span>)  <span class="comment"># filled_dict["five"] is still 5</span></span><br></pre></td></tr></table></figure>

<pre><code>5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在dictionary中增加键值对，可以使用update方法</span></span><br><span class="line">filled_dict.update(&#123;<span class="string">"four"</span>:<span class="number">4</span>&#125;)  <span class="comment"># =&gt; &#123;"one": 1, "two": 2, "three": 3, "four": 4&#125;</span></span><br><span class="line"><span class="comment"># 直接对不存在的key 进行赋值，也可以实现键值对的增加</span></span><br><span class="line">filled_dict[<span class="string">"four"</span>] = <span class="number">4</span>         <span class="comment"># another way to add to dict</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过del方法可以删除对应key的键值对</span></span><br><span class="line"><span class="keyword">del</span> filled_dict[<span class="string">"one"</span>]  <span class="comment"># Removes the key "one" from filled dict</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在python3.5之后，也可以通过**&#123;&#125;来完成补充扩展操作</span></span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, **&#123;<span class="string">'b'</span>: <span class="number">2</span>&#125;&#125;  <span class="comment"># =&gt; &#123;'a': 1, 'b': 2&#125;</span></span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, **&#123;<span class="string">'a'</span>: <span class="number">2</span>&#125;&#125;  <span class="comment"># =&gt; &#123;'a': 2&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>{&#39;a&#39;: 2}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set也是通过&#123;&#125;进行包装的，定义空set时，需要调用set方法</span></span><br><span class="line">empty_set = set()</span><br><span class="line"><span class="comment"># set中的值不能重复（重复值会自动合并）</span></span><br><span class="line">some_set = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;  <span class="comment"># some_set is now &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 和dictionary中的key相似，set的item必须是不可变类型量（也就是list不行）</span></span><br><span class="line"><span class="comment"># set可以看作是一个只有key的dictionary</span></span><br><span class="line">invalid_set = &#123;[<span class="number">1</span>], <span class="number">1</span>&#125;  <span class="comment"># =&gt; Raises a TypeError: unhashable type: 'list'</span></span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-85-c6f31d84eee9&gt; in &lt;module&gt;()
      1 # 和dictionary中的key相似，set的item必须是不可变类型量（也就是list不行）
      2 # set可以看作是一个只有key的dictionary
----&gt; 3 invalid_set = {[1], 1}  # =&gt; Raises a TypeError: unhashable type: &#39;list&#39;
      4 # tuple就可以
      5 valid_set = {(1,), 1}


TypeError: unhashable type: &#39;list&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过add方法向set中添加item</span></span><br><span class="line">filled_set = some_set</span><br><span class="line">filled_set.add(<span class="number">5</span>)  <span class="comment"># filled_set is now &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># 重复添加无效</span></span><br><span class="line">filled_set.add(<span class="number">5</span>)  <span class="comment"># it remains as before &#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过&amp;运算，来取交集</span></span><br><span class="line">other_set = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">filled_set &amp; other_set  <span class="comment"># =&gt; &#123;3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>{3, 4, 5}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过|取并集</span></span><br><span class="line">filled_set | other_set  <span class="comment"># =&gt; &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>{1, 2, 3, 4, 5, 6}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以通过-做集合减法（第一个有第二个没有的）</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; - &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;  <span class="comment"># =&gt; &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>{1, 4}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过^做对称减法（相当于并集减交集）</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; ^ &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;  <span class="comment"># =&gt; &#123;1, 4, 5&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>{1, 4, 5}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过大于小于号检查包含关系</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &gt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># =&gt; False</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &lt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过in检查set中是否存在该item</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> filled_set   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">in</span> filled_set  <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure>

<pre><code>False</code></pre>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn Python in Y minutes</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>6小时精通Python</tag>
        <tag>Python精通</tag>
      </tags>
  </entry>
  <entry>
    <title>Python快速入门：6小时精通Python(五)</title>
    <url>/2019/04/19/6%E5%B0%8F%E6%97%B6%E7%B2%BE%E9%80%9Apython-%E4%BA%94/</url>
    <content><![CDATA[<p>译自：<a href="https://learnxinyminutes.com/docs/python3/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/python3/</a></p>
<p>阅前须知：</p>
<ul>
<li>“#”后边的是注释</li>
<li>带行号的是python代码</li>
<li>不带行号的是代码的输出</li>
<li>把下边的语句对着敲一边自然就会了，博主用的是jupyter notebook</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 5. 模块</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过import语句导入模块（包）</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.sqrt(<span class="number">16</span>))  <span class="comment"># =&gt; 4.0</span></span><br></pre></td></tr></table></figure>

<pre><code>4.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以通过from import语句，从包中调用特定函数</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, floor</span><br><span class="line">print(ceil(<span class="number">3.7</span>))   <span class="comment"># =&gt; 4.0</span></span><br><span class="line">print(floor(<span class="number">3.7</span>))  <span class="comment"># =&gt; 3.0</span></span><br></pre></td></tr></table></figure>

<pre><code>4
3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以通过*，导入包中所有函数</span></span><br><span class="line"><span class="comment"># 不建议这样做，命名空间容易冲突（重名）</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以通过import as语句来对包名进行缩写</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line">math.sqrt(<span class="number">16</span>) == m.sqrt(<span class="number">16</span>)  <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python包都是提前写好普通的python文件</span></span><br><span class="line"><span class="comment"># 也可以自己写，import名称为文件名</span></span><br><span class="line"><span class="comment"># 通过dir方法，可以看包中所有方法的directory</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">dir(math)</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;__doc__&#39;,
 &#39;__file__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;acos&#39;,
 &#39;acosh&#39;,
 &#39;asin&#39;,
 &#39;asinh&#39;,
 &#39;atan&#39;,
 &#39;atan2&#39;,
 &#39;atanh&#39;,
 &#39;ceil&#39;,
 &#39;copysign&#39;,
 &#39;cos&#39;,
 &#39;cosh&#39;,
 &#39;degrees&#39;,
 &#39;e&#39;,
 &#39;erf&#39;,
 &#39;erfc&#39;,
 &#39;exp&#39;,
 &#39;expm1&#39;,
 &#39;fabs&#39;,
 &#39;factorial&#39;,
 &#39;floor&#39;,
 &#39;fmod&#39;,
 &#39;frexp&#39;,
 &#39;fsum&#39;,
 &#39;gamma&#39;,
 &#39;gcd&#39;,
 &#39;hypot&#39;,
 &#39;inf&#39;,
 &#39;isclose&#39;,
 &#39;isfinite&#39;,
 &#39;isinf&#39;,
 &#39;isnan&#39;,
 &#39;ldexp&#39;,
 &#39;lgamma&#39;,
 &#39;log&#39;,
 &#39;log10&#39;,
 &#39;log1p&#39;,
 &#39;log2&#39;,
 &#39;modf&#39;,
 &#39;nan&#39;,
 &#39;pi&#39;,
 &#39;pow&#39;,
 &#39;radians&#39;,
 &#39;sin&#39;,
 &#39;sinh&#39;,
 &#39;sqrt&#39;,
 &#39;tan&#39;,
 &#39;tanh&#39;,
 &#39;tau&#39;,
 &#39;trunc&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你调用了一个自己写的包</span></span><br><span class="line"><span class="comment"># 其名称和内建包重复</span></span><br><span class="line"><span class="comment"># 则默认调用自己写的</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn Python in Y minutes</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>6小时精通Python</tag>
        <tag>Python精通</tag>
      </tags>
  </entry>
  <entry>
    <title>Python快速入门：6小时精通Python(六-完结)</title>
    <url>/2019/04/19/6%E5%B0%8F%E6%97%B6%E7%B2%BE%E9%80%9Apython-%E5%85%AD-%E5%AE%8C%E7%BB%93/</url>
    <content><![CDATA[<p>译自：<a href="https://learnxinyminutes.com/docs/python3/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/python3/</a></p>
<p>阅前须知：</p>
<ul>
<li>“#”后边的是注释</li>
<li>带行号的是python代码</li>
<li>不带行号的是代码的输出</li>
<li>把下边的语句对着敲一边自然就会了，博主用的是jupyter notebook</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 6. Classes</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过class声明，来创建一个类</span></span><br><span class="line"><span class="comment"># 类内方法中，self为一个保留字，代表类实例化后instance自身</span></span><br><span class="line"><span class="comment"># 类内方法中，cls也是一个保留字，代表类class自身</span></span><br><span class="line"><span class="comment"># 通过self.***可以给类内属性赋值，或调用类内方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接定义的变量，是这个类的共享属性，所有实例都可以访问</span></span><br><span class="line">    species = <span class="string">"H. sapiens"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个保留方法，用于类的实例化（生成实例时自动调用）</span></span><br><span class="line">    <span class="comment"># 注意：名称前后有双下划线__，代表这个对象或者属性是python调用、用户定义的</span></span><br><span class="line">    <span class="comment"># 这类方法（对象、属性）包括: __init__, __str__, __repr__ etc.</span></span><br><span class="line">    <span class="comment"># 这类特殊方法，也被称作（dunder method）</span></span><br><span class="line">    <span class="comment"># 不要自己创造这类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="comment"># 将参数分配给实例的name属性</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化私有属性，前方带下划线_的属性无法在外部直接访问</span></span><br><span class="line">        self._age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是类的一个内建方法，所有内建的方法都需要把self作为其第一个形式参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;name&#125;: &#123;message&#125;"</span>.format(name=self.name, message=msg))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 另一个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'yo... yo... microphone check... one two... one two...'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @classmethod是一个声明，声明接下来定义的方法是该类所有实例的共享方法</span></span><br><span class="line">    <span class="comment"># 这种方法被调用时，必须有cls作为第一个参数</span></span><br><span class="line">    <span class="comment"># 类方法的特点在于，可以被类自身调用，如Human.get_species()</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_species</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.species</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @staticmethod声明接下来定义的是一个静态方法</span></span><br><span class="line">    <span class="comment"># 静态方法可以被类单独调用</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grunt</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"*grunt*"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @property就是一个getter，声明该方法用于访问内部属性</span></span><br><span class="line">    <span class="comment"># @property这个声明，将age()方法转换为同名的只读属性。 </span></span><br><span class="line">    <span class="comment"># 但是，不需要在Python中编写琐碎的getter和setter。</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果还想要让该属性可更改，可以这么写</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># deleter可以让该属性可删除</span></span><br><span class="line"><span class="meta">    @age.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._age</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __name__代表的是运行进程的名称</span></span><br><span class="line"><span class="comment"># __name__ == '__main__'，判断用户是否是将该python文件当作主要脚本运行</span></span><br><span class="line"><span class="comment"># 简单来说，if __name__ == '__main__':代码块中的内容</span></span><br><span class="line"><span class="comment"># 只有在运行该python文件时才会生效，如果该python文件是以import形式被调用，则不会运行</span></span><br><span class="line"><span class="comment"># 而写在if __name__ == '__main__':代码块外的内容，被import时，也会运行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 生成Human类的实例</span></span><br><span class="line">    <span class="comment"># 类名加括号，直接调用__init__方法</span></span><br><span class="line">    i = Human(name=<span class="string">"Ian"</span>)</span><br><span class="line">    i.say(<span class="string">"hi"</span>)                     <span class="comment"># "Ian: hi"</span></span><br><span class="line">    j = Human(<span class="string">"Joel"</span>)</span><br><span class="line">    j.say(<span class="string">"hello"</span>)                  <span class="comment"># "Joel: hello"</span></span><br><span class="line">    <span class="comment"># i and j 是Human类的两个实例</span></span><br><span class="line">    <span class="comment"># 调用类方法</span></span><br><span class="line">    i.say(Human.get_species())          <span class="comment"># "Ian: H. sapiens"</span></span><br><span class="line">    <span class="comment"># 共享属性改了之后，大家都改了</span></span><br><span class="line">    Human.species = <span class="string">"H. neanderthalensis"</span></span><br><span class="line">    i.say(i.get_species())          <span class="comment"># =&gt; "Ian: H. neanderthalensis"</span></span><br><span class="line">    j.say(j.get_species())          <span class="comment"># =&gt; "Joel: H. neanderthalensis"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类可以调用静态函数</span></span><br><span class="line">    print(Human.grunt())            <span class="comment"># =&gt; "*grunt*"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 有些版本中实例是不能调用静态函数的</span></span><br><span class="line">    print(i.grunt())</span><br><span class="line">                                    </span><br><span class="line">    <span class="comment"># 更新实例的属性</span></span><br><span class="line">    i.age = <span class="number">42</span></span><br><span class="line">    <span class="comment"># 获取property</span></span><br><span class="line">    i.say(i.age)                    <span class="comment"># =&gt; "Ian: 42"</span></span><br><span class="line">    j.say(j.age)                    <span class="comment"># =&gt; "Joel: 0"</span></span><br><span class="line">    <span class="comment"># 删除i的age属性</span></span><br><span class="line">    <span class="keyword">del</span> i.age</span><br></pre></td></tr></table></figure>

<pre><code>Ian: hi
Joel: hello
Ian: H. sapiens
Ian: H. neanderthalensis
Joel: H. neanderthalensis
*grunt*
*grunt*
Ian: 42
Joel: 0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 再访问i的年龄就会报错</span></span><br><span class="line">i.age</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-207-993258cc61d3&gt; in &lt;module&gt;()
      1 # 再访问i的年龄就会报错
----&gt; 2 i.age


&lt;ipython-input-186-b3205f030117&gt; in age(self)
     44     @property
     45     def age(self):
---&gt; 46         return self._age
     47 
     48     # 如果还想要让该属性可更改，可以这么写


AttributeError: &#39;Human&#39; object has no attribute &#39;_age&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不仅仅是age()没了，_age这个属性是真的没了</span></span><br><span class="line">i._age</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-208-4ea879b64970&gt; in &lt;module&gt;()
      1 # 不仅仅是age()没了，_age这个属性是真的没了
----&gt; 2 i._age


AttributeError: &#39;Human&#39; object has no attribute &#39;_age&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 6.1 继承</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承允许定义新的子类，这些子类从父类继承方法和变量</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用上面定义的Human类作为基类或父类，我们可以定义一个子类Superhero</span></span><br><span class="line"><span class="comment"># 它继承了类的变量如“species”，“name”和“age”，</span></span><br><span class="line"><span class="comment"># 以及“sing”和“grunt”等方法</span></span><br><span class="line"><span class="comment"># 但superhero也可以拥有自己的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要将文件模块化，您可以将上面的类放在自己的文件中，命名为human.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要从其他文件导入功能，请使用以下格式</span></span><br><span class="line"><span class="comment"># from “filename（不加扩展名.py）” import “函数名或类名”</span></span><br><span class="line"><span class="keyword">from</span> human <span class="keyword">import</span> Human</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将父类当作参数写进子类定义作为声明</span></span><br><span class="line"><span class="comment"># 如：class child(parent):</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superhero</span><span class="params">(Human)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果您想让子类继承父类的所有定义且没有任何修改</span></span><br><span class="line">    <span class="comment"># 您可以只使用“pass”关键字（而不使用其他关键字）</span></span><br><span class="line">    <span class="comment"># 如</span></span><br><span class="line">    <span class="comment">#     class Human2(Human):</span></span><br><span class="line">    <span class="comment">#         pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 子类可以重写其父类的属性</span></span><br><span class="line">    species = <span class="string">'Superhuman'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类自动继承其父类的构造函数（__init__），包括它的参数</span></span><br><span class="line">    <span class="comment"># 但也可以定义其他参数或定义并重写其方法</span></span><br><span class="line">    <span class="comment"># 此构造函数从“human”类继承“name”参数</span></span><br><span class="line">    <span class="comment"># 并且添加“superpower”和“movie”参数：</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, movie=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 superpowers=[<span class="string">"super strength"</span>, <span class="string">"bulletproofing"</span>])</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 增加新的属性</span></span><br><span class="line">        self.fictional = <span class="keyword">True</span></span><br><span class="line">        self.movie = movie</span><br><span class="line">        <span class="comment"># 注意可变的默认值，因为默认值是共享的</span></span><br><span class="line">        self.superpowers = superpowers</span><br><span class="line"></span><br><span class="line">        <span class="comment"># “super”是一个保留函数，该函数允许您访问父类的方法</span></span><br><span class="line">        <span class="comment"># 下面的语句将调用父类构造函数：</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 覆盖sing方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Dun, dun, DUN!'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">boast</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> power <span class="keyword">in</span> self.superpowers:</span><br><span class="line">            print(<span class="string">"I wield the power of &#123;pwr&#125;!"</span>.format(pwr=power))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sup = Superhero(name=<span class="string">"Tick"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过isinstance方法，可以判断，实例和类的关系</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(sup, Human):</span><br><span class="line">        print(<span class="string">'I am human'</span>)</span><br><span class="line">    <span class="comment"># 通过type(instance)可以得到实例的class对象</span></span><br><span class="line">    <span class="keyword">if</span> type(sup) <span class="keyword">is</span> Superhero:</span><br><span class="line">        print(<span class="string">'I am a superhero'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过__mro__方法，可以获取类的继承链（super方法或者getattr方法）</span></span><br><span class="line">    print(Superhero.__mro__)    <span class="comment"># =&gt; (&lt;class '__main__.Superhero'&gt;, &lt;class '__main__.Human'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用父类方法，访问子类属性</span></span><br><span class="line">    print(sup.get_species())    <span class="comment"># =&gt; Superhuman</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用覆盖了的方法</span></span><br><span class="line">    print(sup.sing())           <span class="comment"># =&gt; Dun, dun, DUN!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用父类的方法</span></span><br><span class="line">    sup.say(<span class="string">'Spoon'</span>)            <span class="comment"># =&gt; Tick: Spoon</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用子类独有的方法</span></span><br><span class="line">    sup.boast()                 <span class="comment"># =&gt; I wield the power of super strength!</span></span><br><span class="line">                                <span class="comment"># =&gt; I wield the power of bulletproofing!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 继承了的类属性</span></span><br><span class="line">    sup.age = <span class="number">31</span></span><br><span class="line">    print(sup.age)              <span class="comment"># =&gt; 31</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类独有的属性</span></span><br><span class="line">    print(<span class="string">'Am I Oscar eligible? '</span> + str(sup.movie))</span><br></pre></td></tr></table></figure>

<pre><code>I am human
I am a superhero
(&lt;class &#39;__main__.Superhero&#39;&gt;, &lt;class &#39;__main__.Human&#39;&gt;, &lt;class &#39;object&#39;&gt;)
Superhuman
Dun, dun, DUN!
Tick: Spoon
I wield the power of super strength!
I wield the power of bulletproofing!
31
Am I Oscar eligible? False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 6.2 多重继承</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个蝙蝠类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span>:</span></span><br><span class="line"></span><br><span class="line">    species = <span class="string">'Baty'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, can_fly=True)</span>:</span></span><br><span class="line">        self.fly = can_fly</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个类页游say的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        msg = <span class="string">'... ... ...'</span></span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 还有独有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sonar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'))) ... ((('</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    b = Bat()</span><br><span class="line">    print(b.say(<span class="string">'hello'</span>))</span><br><span class="line">    print(b.fly)</span><br></pre></td></tr></table></figure>

<pre><code>... ... ...
True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果您写了多个文件，就需要导入一下</span></span><br><span class="line"><span class="keyword">from</span> superhero <span class="keyword">import</span> Superhero</span><br><span class="line"><span class="keyword">from</span> bat <span class="keyword">import</span> Bat</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义蝙蝠侠，继承自超级英雄和蝙蝠两个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Batman</span><span class="params">(Superhero, Bat)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 通常，要继承属性，必须调用super</span></span><br><span class="line">        <span class="comment"># 然而，我们在这里处理多个继承</span></span><br><span class="line">        <span class="comment"># 而super（）只适用于MRO列表中的下一个基类。</span></span><br><span class="line">        <span class="comment"># 因此，我们明确地为所有祖先(父类)调用__init__</span></span><br><span class="line">        <span class="comment"># 使用“*args”和“*kwargs”可以以一种干净的方式传递参数</span></span><br><span class="line">        <span class="comment"># 每个父类“剥一层洋葱皮”</span></span><br><span class="line">        Superhero.__init__(self, <span class="string">'anonymous'</span>, movie=<span class="keyword">True</span>, </span><br><span class="line">                           superpowers=[<span class="string">'Wealthy'</span>], *args, **kwargs)</span><br><span class="line">        Bat.__init__(self, *args, can_fly=<span class="keyword">False</span>, **kwargs)</span><br><span class="line">        <span class="comment"># override the value for the name attribute</span></span><br><span class="line">        self.name = <span class="string">'Sad Affleck'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nan nan nan nan nan batman!'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sup = Batman()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过__mro__方法，可以获取类的继承链（super方法或者getattr方法）</span></span><br><span class="line">    print(Batman.__mro__)       <span class="comment"># =&gt; (&lt;class '__main__.Batman'&gt;, </span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class 'superhero.Superhero'&gt;, </span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class 'human.Human'&gt;, </span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class 'bat.Bat'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用父类方法获取子类属性</span></span><br><span class="line">    print(sup.get_species())    <span class="comment"># =&gt; Superhuman</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用覆盖后的方法</span></span><br><span class="line">    print(sup.sing())           <span class="comment"># =&gt; nan nan nan nan nan batman!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两个父类有重名方法时，顺序在前的优先级更高</span></span><br><span class="line">    sup.say(<span class="string">'I agree'</span>)          <span class="comment"># =&gt; Sad Affleck: I agree</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用第二父类方法</span></span><br><span class="line">    print(sup.sonar())          <span class="comment"># =&gt; ))) ... (((</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 继承类属性</span></span><br><span class="line">    sup.age = <span class="number">100</span></span><br><span class="line">    print(sup.age)              <span class="comment"># =&gt; 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出从第二父类继承的属性，该属性已被覆盖</span></span><br><span class="line">    print(<span class="string">'Can I fly? '</span> + str(sup.fly)) <span class="comment"># =&gt; Can I fly? False</span></span><br></pre></td></tr></table></figure>

<pre><code>(&lt;class &#39;__main__.Batman&#39;&gt;, &lt;class &#39;__main__.Superhero&#39;&gt;, &lt;class &#39;__main__.Human&#39;&gt;, &lt;class &#39;__main__.Bat&#39;&gt;, &lt;class &#39;object&#39;&gt;)
Superhuman
nan nan nan nan nan batman!
Sad Affleck: I agree
))) ... (((
100
Can I fly? False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 7. Advanced</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成器可以帮你偷很多懒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_numbers</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> i + i</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成器可以节省很多内存</span></span><br><span class="line"><span class="comment"># 因为它们只加载所需处理iterable中的下一个值的数据(边生成边处理)</span></span><br><span class="line"><span class="comment"># 普通方法需要 先生成后处理</span></span><br><span class="line"><span class="comment"># 这使其可以进行大范围的数据操作（其他方法可能不行）</span></span><br><span class="line"><span class="comment"># 注意：python 3中，“range”替换了“xrange”</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> double_numbers(range(<span class="number">1</span>, <span class="number">900000000</span>)):  <span class="comment"># `range` is a generator.</span></span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<pre><code>2
4
6
8
10
12
14
16
18
20
22
24
26
28
30</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正如可以创建列表理解一样，也可以创建生成器理解</span></span><br><span class="line"><span class="comment"># 这里，圆括号是关键，你以为是tuples，实际上是生成器</span></span><br><span class="line">values = (-x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(values)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> values:</span><br><span class="line">    print(x)  <span class="comment"># prints -1 -2 -3 -4 -5 to console/terminal</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;generator object &lt;genexpr&gt; at 0x102e9c990&gt;
-1
-2
-3
-4
-5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以直接把一个生成器理解投射到list上</span></span><br><span class="line">values = (-x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">gen_to_list = list(values)</span><br><span class="line">print(gen_to_list)  <span class="comment"># =&gt; [-1, -2, -3, -4, -5]</span></span><br></pre></td></tr></table></figure>

<pre><code>[-1, -2, -3, -4, -5]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修饰器</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beg</span><span class="params">(target_function)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @wraps(target_function)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        msg, say_please = target_function(*args, **kwargs)</span><br><span class="line">        <span class="keyword">if</span> say_please:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;&#125; &#123;&#125;"</span>.format(msg, <span class="string">"Please! I am poor :("</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里通过beg修饰say</span></span><br><span class="line"><span class="comment"># 可以改变say的输出</span></span><br><span class="line"><span class="meta">@beg</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(say_please=False)</span>:</span></span><br><span class="line">    msg = <span class="string">"Can you buy me a beer?"</span></span><br><span class="line">    <span class="keyword">return</span> msg, say_please</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(say())                 <span class="comment"># Can you buy me a beer?</span></span><br><span class="line">print(say(say_please=<span class="keyword">True</span>))  <span class="comment"># Can you buy me a beer? Please! I am poor :(</span></span><br></pre></td></tr></table></figure>

<pre><code>Can you buy me a beer?
Can you buy me a beer? Please! I am poor :(</code></pre>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn Python in Y minutes</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>6小时精通Python</tag>
        <tag>Python精通</tag>
      </tags>
  </entry>
  <entry>
    <title>Python快速入门：6小时精通Python(四)</title>
    <url>/2019/04/19/6%E5%B0%8F%E6%97%B6%E7%B2%BE%E9%80%9Apython-%E5%9B%9B/</url>
    <content><![CDATA[<p>译自：<a href="https://learnxinyminutes.com/docs/python3/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/python3/</a></p>
<p>阅前须知：</p>
<ul>
<li>“#”后边的是注释</li>
<li>带行号的是python代码</li>
<li>不带行号的是代码的输出</li>
<li>把下边的语句对着敲一边自然就会了，博主用的是jupyter notebook</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 4. Functions</span></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过def保留字来定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"x is &#123;&#125; and y is &#123;&#125;"</span>.format(x, y))</span><br><span class="line">    <span class="comment"># return语句用来返回处理结果</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义之后可以带参调用</span></span><br><span class="line">c = add(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<pre><code>x is 5 and y is 6
11</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果不按照顺序输入参数，需要添加形式参数名称</span></span><br><span class="line">c = add(y=<span class="number">6</span>, x=<span class="number">5</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<pre><code>x is 5 and y is 6
11</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以传入参数列表（positional arguments）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">varargs</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(type(args))</span><br><span class="line">    <span class="keyword">return</span> args</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = varargs(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;tuple&#39;&gt;
(1, 2, 3)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过keyword arguments来传入多个变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyword_args</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(type(kwargs))</span><br><span class="line">    <span class="keyword">return</span> kwargs</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = keyword_args(one=<span class="string">'1'</span>, two=<span class="string">'2'</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;dict&#39;&gt;
{&#39;one&#39;: &#39;1&#39;, &#39;two&#39;: &#39;2&#39;}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以混合使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_the_args</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">all_the_args(1, 2, a=3, b=4) prints:</span></span><br><span class="line"><span class="string">    (1, 2)</span></span><br><span class="line"><span class="string">    &#123;"a": 3, "b": 4&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用函数的时候，*和**也可以反过来使用</span></span><br><span class="line">args_call = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs_call = &#123;<span class="string">"a"</span>: <span class="number">3</span>, <span class="string">"b"</span>: <span class="number">4</span>&#125;</span><br><span class="line">all_the_args(*args_call)            <span class="comment"># equivalent to all_the_args(1, 2, 3, 4)</span></span><br><span class="line">all_the_args(**kwargs_call)         <span class="comment"># equivalent to all_the_args(a=3, b=4)</span></span><br><span class="line">all_the_args(*args_call, **kwargs_call)  <span class="comment"># equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)</span></span><br></pre></td></tr></table></figure>

<pre><code>(1, 2, 3, 4)
{}
()
{&#39;a&#39;: 3, &#39;b&#39;: 4}
(1, 2, 3, 4)
{&#39;a&#39;: 3, &#39;b&#39;: 4}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个函数可以同时返回多个值</span></span><br><span class="line"><span class="comment"># 多个值是以不带括号的tuple的形式返回的</span></span><br><span class="line"><span class="comment"># 但是加了括号也没关系</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> y, x</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">x, y = swap(x, y)     <span class="comment"># =&gt; x = 2, y = 1</span></span><br><span class="line">(x, y) = swap(x, y)   <span class="comment"># 这一句和上一句一样</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数范围 </span></span><br><span class="line"><span class="comment"># 这里x是一个全局变量（global）</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_x</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 函数内部可以访问外部全局变量</span></span><br><span class="line">    print(num)</span><br><span class="line">    print(x)   <span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_x</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 但是不能在函数内部改变全局变量</span></span><br><span class="line">    <span class="comment"># 这里的x是一个新生成的，只在函数内生效的局部变量</span></span><br><span class="line">    x = num    <span class="comment"># =&gt; 43</span></span><br><span class="line">    print(x)   <span class="comment"># =&gt; 43</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_global_x</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 如果想要在函数内部改变全局变量，需要通过global声明</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    print(x)   <span class="comment"># =&gt; 5</span></span><br><span class="line">    x = num    <span class="comment"># global var x is now set to num</span></span><br><span class="line">    print(x)   <span class="comment"># =&gt; num</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get_x(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<pre><code>6
5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_x(<span class="number">6</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<pre><code>6
5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_global_x(<span class="number">6</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<pre><code>5
6
6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python支持头等函数</span></span><br><span class="line"><span class="comment"># 简单来讲，return的函数就是上层函数的头等函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_adder</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># suber就是简单的嵌套定义了一个函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">suber</span><span class="params">(z)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x - z</span><br><span class="line">    n = suber(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># adder参与返回值，是头等函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> n + y</span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_10_minus_5 = create_adder(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_10_minus_5(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>8</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python也支持匿名函数</span></span><br><span class="line"><span class="comment"># (lambda &lt;形式参数（列表）&gt;: &lt;return语句&gt;)(&lt;实参&gt;)</span></span><br><span class="line">(<span class="keyword">lambda</span> x: x &gt; <span class="number">2</span>)(<span class="number">3</span>)                  <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> x, y: x ** <span class="number">2</span> + y ** <span class="number">2</span>)(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># =&gt; 5</span></span><br></pre></td></tr></table></figure>

<pre><code>5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匿名函数，实际上也是可以命名的</span></span><br><span class="line">check_greater_than_2 = <span class="keyword">lambda</span> x: x &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">check_greater_than_2(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还有内建的高阶函数</span></span><br><span class="line"><span class="comment"># 通过map将[1, 2, 3]分别装入add_10_minus_5进行运算</span></span><br><span class="line"><span class="comment"># 返回结果包装成list</span></span><br><span class="line">list(map(add_10_minus_5, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>[6, 7, 8]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># max是python的内建方法，求参数中的最大值</span></span><br><span class="line">max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面的写法就是就是对位结合，进行计算</span></span><br><span class="line"><span class="comment"># 相当于list(max(1,4), max(2,2), max(3,1))</span></span><br><span class="line">list(map(max, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>[4, 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># filter 可以把返回值为true的参数，返回出来</span></span><br><span class="line">list(filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))  <span class="comment"># =&gt; [6, 7]</span></span><br></pre></td></tr></table></figure>

<pre><code>[6, 7]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以根据对列表的理解，写出漂亮的map和filter</span></span><br><span class="line">[add_10_minus_5(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure>

<pre><code>[6, 7, 8]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] <span class="keyword">if</span> x &gt; <span class="number">5</span>]  <span class="comment"># =&gt; [6, 7]</span></span><br></pre></td></tr></table></figure>

<pre><code>[6, 7]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以写出漂亮的字典或者集合</span></span><br><span class="line">&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abcddeef'</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'abc'</span>&#125;  <span class="comment"># =&gt; &#123;'d', 'e', 'f'&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>{&#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)&#125;  <span class="comment"># =&gt; &#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br></pre></td></tr></table></figure>

<pre><code>{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}</code></pre>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn Python in Y minutes</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
        <tag>6小时精通Python</tag>
        <tag>Python精通</tag>
      </tags>
  </entry>
  <entry>
    <title>BPMN2.0入门到掌握，这一篇就够了</title>
    <url>/2019/09/19/BPMN2-0%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%8C%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<p>BPMN2.0入门到精通，这一篇就够了</p>
<p>笔者默认看这篇文章的同学都是了解、知道什么是BPMN的，因此背景知识、历史发展什么的都直接略过，我们直切正题：BPMN中的五个基础元素类别。</p>
<ol>
<li>流对象（Flow Objects）：流对象是定义业务流程的主要图形元素，主要有三种流对象<ol>
<li>事件（Events）</li>
<li>活动（Activities）</li>
<li>网关（Gateways）</li>
</ol>
</li>
<li>数据（Data）：数据主要通过四种元素表示<ol>
<li>数据对象（Data Objects）</li>
<li>数据输入（Data Inputs）</li>
<li>数据输出（Data Outputs）</li>
<li>数据存储（Data Stores）</li>
</ol>
</li>
<li>连接对象（Connecting Objects）：流对象彼此互相连接或者连接到其他信息的方法主要有四种<ol>
<li>顺序流（Sequence Flows）</li>
<li>信息流（Message Flows）</li>
<li>协同（Associations）</li>
<li>数据协同（Data Associations）</li>
</ol>
</li>
<li>泳道（Swimlanes）：有两种方式通过泳道对主要的建模元素进行分组<ol>
<li>泳池：Pools</li>
<li>泳道：Lanes</li>
</ol>
</li>
<li>Artifacts：主要用来提供关于流程的额外信息。BPMN2.0定义两种标准Artifacts，但是建模者或者建模工具可以增加任意多Artifacts。（Artifacts，有的地方翻译成“工件”，但是感觉不管翻译成什么都不够传神，所以本文中就不翻译这个词了。）<ol>
<li>组：Group</li>
<li>文本注释：Text Annotation</li>
</ol>
</li>
</ol>
<h1 id="流对象（Flow-Objects）"><a href="#流对象（Flow-Objects）" class="headerlink" title="流对象（Flow Objects）"></a>流对象（Flow Objects）</h1><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><table>
<thead>
<tr>
<th align="left">元素 Element</th>
<th align="left">描述 Description</th>
<th align="left">符号 Notation</th>
</tr>
</thead>
<tbody><tr>
<td align="left">开始事件 Start</td>
<td align="left">表示一个流程(Process)或一个编排(choreography)的开始</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918171605.png"></td>
</tr>
<tr>
<td align="left">中间事件 Intermediate</td>
<td align="left">发生在开始和结束事件之间，影响处理流程</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918171742.png"></td>
</tr>
<tr>
<td align="left">结束事件 End</td>
<td align="left">表示一个流程(Process)或一个编排(choreography)的结束</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918205755.png"></td>
</tr>
<tr>
<td align="left">其他</td>
<td align="left">开始事件和一些中间事件具有定义事件原因的“触发器”。结束事件可以定义作为序列流路径结束的“结果”。开始事件只能对触发器（“catch”）做出反应。结束事件只能创建（“抛出”）结果。中间事件可以捕获或抛出触发器。对于捕获的事件、触发器，标记未填充；对于抛出的触发器和结果，标记已填充。另外，在bpmn 1.1中用来中断活动的一些事件现在可以在不中断的模式下使用。这些事件的边界是虚线（见右图）。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918210944.png"></td>
</tr>
</tbody></table>
<h2 id="活动（Activity）"><a href="#活动（Activity）" class="headerlink" title="活动（Activity）"></a>活动（Activity）</h2><table>
<thead>
<tr>
<th align="left">元素 Element</th>
<th align="left">描述 Description</th>
<th align="left">符号 Notation</th>
</tr>
</thead>
<tbody><tr>
<td align="left">活动 Activity</td>
<td align="left">活动是公司在流程中执行的工作的通用术语。活动可以是原子的或非原子的（聚合物）。作为流程模型一部分的活动类型有：子流程和任务，它们都是圆角矩形。活动用于标准流程Process和编排Choreography。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918212024.png"></td>
</tr>
<tr>
<td align="left">任务（原子） Task（atomic）</td>
<td align="left">任务是包含在流程中的原子活动。任务是当流程中的工作无法分解为更精细的流程细节级别时使用。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918212345.png"></td>
</tr>
<tr>
<td align="left">编排任务 Choreography Task</td>
<td align="left">表示一个或多个消息交换的集合。每个编排任务涉及两个参与者。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918213005.png"></td>
</tr>
<tr>
<td align="left">子流程 Sub-Process</td>
<td align="left">子流程是包含在流程或编排中的复合活动。它是复合的，因为它可以通过一组子活动分解为更细粒度级别的流程或编排。子流程活动主要有以下四类</td>
<td align="left">Collapsed Sub-Process<img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918213352.png">Expanded Sub-Process<img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918213453.png">Collapsed Sub- Choreography<img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918213530.png">Expanded Sub-Choreography<img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918213637.png"></td>
</tr>
</tbody></table>
<h2 id="网关（Gateway）"><a href="#网关（Gateway）" class="headerlink" title="网关（Gateway）"></a>网关（Gateway）</h2><table>
<thead>
<tr>
<th align="left">元素 Element</th>
<th align="left">描述 Description</th>
<th align="left">符号 Notation</th>
</tr>
</thead>
<tbody><tr>
<td align="left">网关 Gateway</td>
<td align="left">网关用于顺序流程和编排中序列流的发散和收敛。因此，它将决定路径的分支、分叉、合并和连接。内部标记将指示行为控制的类型（见下边一行）。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918214000.png"></td>
</tr>
<tr>
<td align="left">网关控制类型 Gateway Control Type</td>
<td align="left">网关菱形内的图标将指示流控制行为的类型。控制类型包括：•排他型exclusive决策和合并。排他型exclusive和基于事件event-based的网关都执行排他决策，合并排他可以使用或不使用“x”标记来显示。•基于事件event-based和基于并行事件parallel event-based的网关可以启动流程的新实例。•包容型inclusive网关决策和合并。•复杂型complex网关——复杂的条件和情况。•并行parallel网关分叉和连接。每种类型的控件都会影响传入和传出流。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190918214411.png"></td>
</tr>
</tbody></table>
<h1 id="数据（Data）"><a href="#数据（Data）" class="headerlink" title="数据（Data）"></a>数据（Data）</h1><p>数据对象提供有关需要执行的活动和/或它们产生的内容的信息，数据对象可以表示单个数据对象或数据对象集合。数据输入和数据输出为流程提供相同的信息。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919100053.png"></p>
<h1 id="连接对象（Connecting-Objects）"><a href="#连接对象（Connecting-Objects）" class="headerlink" title="连接对象（Connecting Objects）"></a>连接对象（Connecting Objects）</h1><table>
<thead>
<tr>
<th align="left">元素 Element</th>
<th align="left">描述 Description</th>
<th align="left">符号 Notation</th>
</tr>
</thead>
<tbody><tr>
<td align="left">顺序流 Sequence Flow</td>
<td align="left">表示活动的执行顺序</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919100734.png"></td>
</tr>
<tr>
<td align="left">信息流 Message Flow</td>
<td align="left">表示两个参与者之间准备发送和接收的信息流</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919100958.png"></td>
</tr>
<tr>
<td align="left">协同 Association</td>
<td align="left">协同用于将信息和artifact与图形元素链接。如果有箭头，则表示流向（如数据）。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919101435.png"></td>
</tr>
</tbody></table>
<h1 id="泳道（Swimlanes）"><a href="#泳道（Swimlanes）" class="headerlink" title="泳道（Swimlanes）"></a>泳道（Swimlanes）</h1><table>
<thead>
<tr>
<th align="left">元素 Element</th>
<th align="left">描述 Description</th>
<th align="left">符号 Notation</th>
</tr>
</thead>
<tbody><tr>
<td align="left">泳池 Pool</td>
<td align="left">泳池是协作中参与者的图形表示。它还充当一个“泳道”和一个图形容器，用于从其他池中分割一组活动，通常是在B2B环境中。泳池可以具有内部详细信息，以将要执行的进程的形式显示。或者一个泳池可能没有内部细节，也就是说，它可以是一个“黑匣子”。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919102300.png"></td>
</tr>
<tr>
<td align="left">泳道 Lane</td>
<td align="left">lane是进程中的一个子分区，有时在泳池中，它将垂直或水平地扩展进程的整个长度。泳道用于组织和分类活动。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919102427.png"></td>
</tr>
</tbody></table>
<h1 id="Artifacts"><a href="#Artifacts" class="headerlink" title="Artifacts"></a>Artifacts</h1><table>
<thead>
<tr>
<th align="left">元素 Element</th>
<th align="left">描述 Description</th>
<th align="left">符号 Notation</th>
</tr>
</thead>
<tbody><tr>
<td align="left">组 Group</td>
<td align="left">组是同一类别内的图形元素的组。这种类型的分组不影响组内的序列流。类别名称在关系图上显示为组标签。类别可用于文档或分析目的。组是可以在图表上直观显示对象类别的一种方式。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919102731.png"></td>
</tr>
<tr>
<td align="left">文本注释 Text Annotation</td>
<td align="left">是一个帮助建模者给图形元素增加额外文本说明的机制。</td>
<td align="left"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190919102837.png"></td>
</tr>
</tbody></table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，你已经通过 <strong>20%</strong> 的时间了解了BPMN2.0 接近 <strong>80%</strong> 的内容。虽然BPMN底层语法以及结构还没有学习，但是这并不影响你已经可以通过BPMN2.0对你所在的业务进行详尽的描述！</p>
]]></content>
      <tags>
        <tag>BPMN</tag>
        <tag>BPMN2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Blockchain Tutorial I: What is blockchain</title>
    <url>/2020/01/06/Blockchain-Tutorial-I-What-is-blockchain/</url>
    <content><![CDATA[<h1 id="Brief-History"><a href="#Brief-History" class="headerlink" title="Brief History"></a>Brief History</h1><ul>
<li>1983, David Chaum first proposed to use encryption technology in digital cash</li>
<li>1998, Wei Dai’s B coin first introduced the idea of creating currency by solving calculation problems and decentralized consensus, but the proposal did not give a specific method to achieve decentralized consensus.</li>
<li>2005, Hal Finney introduced the concept of “reusable proof of work” (RPOW), which uses the idea of b-coin and the hash cash problem proposed by Adam Baker to create cryptology currency. However, this concept is once again lost in idealization because it relies on trusted computing as the back end.</li>
<li>May/2007, Nakamoto Satoshi started the Bitcoin project</li>
<li>August/2008, Nakamoto Satoshi registered domain name bitcoin.org</li>
<li>31/Obtober/2008, Nakamoto Satoshi sent an email to all members of a cryptography mailing list entitled “bitcoin: peer-to-peer e-cash thesis.”</li>
<li>16/November/2008, Nakamoto Satoshi announced the source code of bitcoin system</li>
<li>3/January/2009, Nakamoto Satoshi launched Bitcoin network on the Internet</li>
<li>22/May/2010, Bitcoin pizza Festival, one programmer traded 10,000 bitcoins for two great John pizza coupons. For the first time, bitcoin had a fair price: 10000 bitcoins cost $25</li>
<li>November/2011, Nakamoto Satoshi disappeared</li>
</ul>
<h1 id="Why-Bitcoin"><a href="#Why-Bitcoin" class="headerlink" title="Why Bitcoin"></a>Why Bitcoin</h1><ol>
<li>Disintermediation: E-cash between individuals with no intervention of a trusted third-party intermediary</li>
<li>Decentralization: This e-cash currency issuance does not need a centralized institution, but is completed by the code and community consensus</li>
</ol>
<h1 id="Why-dose-Bit-coin-need-Block-Chain"><a href="#Why-dose-Bit-coin-need-Block-Chain" class="headerlink" title="Why dose Bit coin need Block Chain"></a>Why dose Bit coin need Block Chain</h1><p>In the digital world, if we want to create a disintermediated and decentralized “e-cash”, we also need to design a complete financial system. </p>
<p>This system should be able to solve a series of problems as follows:</p>
<ul>
<li>How can this “cash” be issued fairly and impartially without being controlled by any centralized institution or individual?</li>
<li>How to realize that just like in the physical world, one person can hand the cash directly to another person without any intermediary assistance?</li>
<li>How to “prevent counterfeiting” this kind of e-cash? Or how can an e-cash not be spent twice?</li>
</ul>
<p>To solve the problems, Nakamoto developed Bitcoin system, which consists of 3 layers:</p>
<ol>
<li>Application layer. The top layer is bitcoin. This is the application layer of the whole system.</li>
<li>Application protocol layer. The function of the middle layer is to issue bitcoin and handle the bitcoin transfer between users. This layer, also known as bitcoin protocol, is the application protocol layer of the whole system.<ol>
<li>Application layer. Transfer and bookkeeping functions</li>
<li>Incentive layer. Issuance mechanism and distribution mechanism</li>
<li>Consensus layer. POW(Proof Of Work)</li>
</ol>
</li>
<li>General protocol layer. At the bottom are bitcoin’s distributed ledgers and decentralized networks. This layer, also known as bitcoin blockchain, is the general protocol layer of the whole system.<ol>
<li>Network layer. P2P mechanism, broadcast mechanism, and verification mechanism</li>
<li>Data layer. Block data(Hash), chain structure(Merkle Tree), and digital signature(Asymmetric encryption)</li>
</ol>
</li>
</ol>
<p>In the design of bitcoin system, Nakamoto creatively combines computer computing power competition with economic incentives to form a proof of work (POW) consensus mechanism, which enables mining computer nodes to complete the function of currency issuance and accounting in the calculation competition, as well as the operation and maintenance of blockchain ledger and decentralized network. </p>
<p>This forms a complete cycle: the mining machine mining (calculation power competition), the completion of decentralized accounting (operation system), and the economic incentive (economic reward) in the form of bitcoin.</p>
<p>Bitcoin’s workload proof consensus mechanism is a connecting layer, connecting the upper application and the lower technology: the upper layer is the issuance, transfer and anti-counterfeiting of e-cash; the lower layer is the node to the central network to reach an agreement and update the distributed ledger.</p>
<h1 id="Definition-of-Blockchain"><a href="#Definition-of-Blockchain" class="headerlink" title="Definition of Blockchain"></a>Definition of Blockchain</h1><p>Blockchain is the technology of “value representation” and “value transfer” in the digital world. One side of blockchain coin is the encrypted digital currency or token representing value, and the other side is the distributed ledger and decentralized network for value transfer.</p>
<p>Blockchain is an underlying technology derived from bitcoin. In other words, bitcoin is the first successful application of blockchain technology.</p>
<p>When people talk about Blockchain, what do they mean:</p>
<ol>
<li>Blockchain refers to the data structure of bitcoin, that is, the chain formed by the connection of data blocks, which is also known as “distributed ledger”. In the bitcoin white paper, Nakamoto mentioned block and chain respectively, but later they were combined into the new term block chain.</li>
<li>Blockchain refers to the combination of bitcoin’s distributed ledger and decentralized network. Corresponding to bitcoin system, it refers to the whole third layer of bitcoin blockchain.</li>
<li>Blockchain refers to the combination of the second layer (bitcoin protocol) and the third layer (bitcoin blockchain) of bitcoin system. It includes distributed ledgers, decentralized networks and bitcoin protocols.</li>
<li>Blockchain refers to the whole bitcoin system, including all three layers, including bitcoin with value representation and the whole system behind it. From this perspective, blockchain is regarded as a complete system including both technical and economic parts.</li>
</ol>
<p>When referring to blockchain, ordinary people often refers to the fourth largest scope, namely “account book + Network + protocol + currency”. In the industry, when people refer to blockchain, they usually refer to the third scope, namely “account book + Network + Protocol”. When talking about blockchain, many software developers usually refer to the second range of “ledger + network”.</p>
<blockquote>
<p>reference:<br><a href="http://c.biancheng.net/view/1884.html" target="_blank" rel="noopener">http://c.biancheng.net/view/1884.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn blockchain in Y minutes</category>
      </categories>
      <tags>
        <tag>Blockchain</tag>
        <tag>Bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>Blockchain Tutorial II: How does blockchain decentralize bitcoin</title>
    <url>/2020/01/07/Blockchain-Tutorial-II-How-does-blockchain-decentralize-bitcoin/</url>
    <content><![CDATA[<h1 id="What-is-decentralization"><a href="#What-is-decentralization" class="headerlink" title="What is decentralization"></a>What is decentralization</h1><p>Here we illustrate it by means of comparison. </p>
<p>There have always been three forms of “currency” in the digital world:</p>
<ul>
<li>Centralized online payment: Paypal, Alipay, Apple Pay…</li>
<li>Centralized computer points or Internet points: Game coins…</li>
<li>Decentralized e-cash: Bitcoin, ETH…</li>
</ul>
<p>Comparison of three forms and cash in the physical world:</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Cash in physical world</th>
<th align="left">Centralized e-cash</th>
<th align="left">Centralized computer points</th>
<th align="left">Decentralized e-cash</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Issuance</td>
<td align="left">Centralized</td>
<td align="left">Centralized</td>
<td align="left">Centralized</td>
<td align="left">Decentralized</td>
</tr>
<tr>
<td align="left">Transaction</td>
<td align="left">Decentralized</td>
<td align="left">Centralized</td>
<td align="left">Centralized</td>
<td align="left">Decentralized</td>
</tr>
</tbody></table>
<p>The relationship between three forms and cash in the physical world:</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Cash in physical world</th>
<th align="left">Centralized e-cash</th>
<th align="left">Centralized computer points</th>
<th align="left">Decentralized e-cash</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Map physical currency?</td>
<td align="left">/</td>
<td align="left">Yes</td>
<td align="left">No</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left">Self-issue?</td>
<td align="left">/</td>
<td align="left">No</td>
<td align="left">Yes</td>
<td align="left">Yes</td>
</tr>
</tbody></table>
<h1 id="What-is-the-decentralization-of-Bitcoin"><a href="#What-is-the-decentralization-of-Bitcoin" class="headerlink" title="What is the decentralization of Bitcoin"></a>What is the decentralization of Bitcoin</h1><p>From the shallower to the deeper, it has the following aspects:</p>
<ol>
<li>Decentralization of transactions (Automatic)</li>
<li>Decentralization of transactions (Autonomous)</li>
<li>Decentralization of issuance (Automatic)</li>
<li>Decentralization of issuance (Autonomous)</li>
<li>Partial decentralization of network (Distributed network)</li>
<li>Decentralization of network (Fully open, non-trust-based)</li>
<li>Coordinated community (Coordinated and managed by people)</li>
<li>Completely decentralized community (Autonomous achieved by mechanism)</li>
</ol>
<p>Later, in the process of developing and applying blockchain technology, we have to adjust from the most extreme ideal state to the practical direction.</p>
<p>Most blockchain projects are now managed by foundations. For example, Ethereum is co-ordinated between founder Vitalik Butlin and the Ethereum foundation, rather than being fully autonomous as the bitcoin community.</p>
<h1 id="How-does-blockchain-decentralize-bitcoin"><a href="#How-does-blockchain-decentralize-bitcoin" class="headerlink" title="How does blockchain decentralize bitcoin"></a>How does blockchain decentralize bitcoin</h1><p>Main design principles of blockchain system:</p>
<ul>
<li>A true point-to-point e-cash should allow direct online payments from the originator to the other party without the need to go through a third party financial institution.</li>
<li>Although the existing digital signature technology provides some solutions, if a trusted third-party organization is needed to prevent “double payment”, the main benefits (Brought by e-cash) will be lost.</li>
<li>To solve the problem of “double payment” in e-cash, we provide a solution with point-to-point network technology.</li>
<li>The network stamps the transaction records, hashes the transaction records, and merges them into a growing chain, which is composed of hash based proof of work. If we don’t redo the proof of work, the records can’t be changed.</li>
<li>The longest chain is not just proof of the sequence of events observed, but also proof that it is generated by the largest pool of CPU processing power. As long as the computer nodes that control most CPU processing power don’t attack the network itself (with the attacker), they will generate the longest chain, leaving the attacker behind.</li>
<li>The network itself needs only the simplest structure. The information can be broadcast in the whole network as much as possible. The node can leave and rejoin the network at any time, only need (when rejoining) take the longest workload proof chain as the proof of the transaction occurred during the offline period of the node.</li>
</ul>
<p>Four key features by William Mougayar:</p>
<ol>
<li>Point to point electronic transactions;</li>
<li>No need for financial institutions;</li>
<li>Encrypting evidence rather than centralized credit;</li>
<li>Credit exists in the network, not in a central institution.</li>
</ol>
<h1 id="Five-key-points-of-bitcoin-system-design"><a href="#Five-key-points-of-bitcoin-system-design" class="headerlink" title="Five key points of bitcoin system design:"></a>Five key points of bitcoin system design:</h1><h2 id="Decentralized-point-to-point-e-cash-system"><a href="#Decentralized-point-to-point-e-cash-system" class="headerlink" title="Decentralized point-to-point e-cash system"></a>Decentralized point-to-point e-cash system</h2><p>What bitcoin needs to do is a “point-to-point e-cash system”, in which the sender and the receiver deal directly without the intervention of intermediaries.</p>
<p>In order to remove the trusted third party and other intermediaries, we need to solve the “double blossom problem”. In the summary, Nakamoto presents a point-to-point network solution, and introduces the core of the solution - blockchain. He didn’t mention the word block chain, but in the paper he mentioned the two concepts of block and chain respectively.</p>
<h2 id="Distributed-ledger"><a href="#Distributed-ledger" class="headerlink" title="Distributed ledger"></a>Distributed ledger</h2><p>The blockchain of bitcoin is a data block with time stamp and data storage and a chain connected by hash pointer based on workload proof.</p>
<p>This chain, or ledger, is stored on nodes of bitcoin network in a distributed way, so it is also called distributed ledger.</p>
<h2 id="Proof-of-workload"><a href="#Proof-of-workload" class="headerlink" title="Proof of workload"></a>Proof of workload</h2><p>Nodes in bitcoin network perform encryption hash calculation according to rules to compete for the right to generate new blocks. After the node wins the competition, it gets the bookkeeping right. When it generates a block and becomes the latest block, it gets the mining reward corresponding to the new block.</p>
<p>Workload proof is also the security mechanism of blockchain account book. This chain cannot be modified without redoing the large amount of calculation required by “proof of workload”, which ensures the reliability of the data on the blockchain.</p>
<h2 id="Longest-chain-principle"><a href="#Longest-chain-principle" class="headerlink" title="Longest chain principle"></a>Longest chain principle</h2><p>At any moment, the longest chain is the final record accepted by all.</p>
<p>Since the longest chain is completed by the main computing power in the network, as long as they do not cooperate with attackers, the longest chain they generate is reliable. This principle is called the “longest chain principle”.</p>
<h2 id="Decentralized-network"><a href="#Decentralized-network" class="headerlink" title="Decentralized network"></a>Decentralized network</h2><p>Bitcoin’s decentralized network architecture is very simple and requires very little infrastructure. It can run on the Internet network. Computer nodes can leave or join the decentralized network at any time. When they join, they only need to follow the longest chain principle.</p>
<blockquote>
<p>reference:<br><a href="http://c.biancheng.net/view/1889.html" target="_blank" rel="noopener">http://c.biancheng.net/view/1889.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn blockchain in Y minutes</category>
      </categories>
      <tags>
        <tag>Blockchain</tag>
        <tag>Bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>Blockchain Tutorial III: How bitcoins are transferred</title>
    <url>/2020/01/10/Blockchain-Tutorial-III-How-bitcoins-are-transferred/</url>
    <content><![CDATA[<h1 id="The-Process-of-a-Bitcoin-Transaction"><a href="#The-Process-of-a-Bitcoin-Transaction" class="headerlink" title="The Process of a Bitcoin Transaction"></a>The Process of a Bitcoin Transaction</h1><p>Suppose that Alice is transferring 8 bitcoins to Bob, the process goes like this:</p>
<ol>
<li>To initiate a Bitcoin transaction, Alice needs to have: address, private key, wallet</li>
<li>Alice signs her bitcoins in the wallet using the private key, transfers to Bob to initiate a transaction</li>
<li>Through the Internet, the transaction information start to broadcast to nodes on bitcoin-net</li>
<li>A node packs the transaction into the candidate block and starts hash calculation, which is called mining, to win the bookkeeping right</li>
<li>A node successfully mines, broadcasts to the whole network, generates new blocks and adds them to the end of the chain</li>
<li>Each node acknowledges that it will continue to add blocks after former ones. Mining nodes receive bitcoin rewards. Generally, the transaction is permanently retained after 6 blocks are added</li>
<li>Bob gets transferred bitcoins (expressed as UTXO of the transaction)</li>
</ol>
<h1 id="Five-Key-Technologies"><a href="#Five-Key-Technologies" class="headerlink" title="Five Key Technologies"></a>Five Key Technologies</h1><p>In order to achieve a successful bitcoin transaction, the following five key technologies are needed:</p>
<ul>
<li>Distributed ledger and decentralized network</li>
<li>Unused transaction output (UTXO)</li>
<li>The data structure of bitcoin blockchain</li>
<li>Proof of workload consensus mechanism</li>
<li>Bitcoin mining mechanism and generation mechanism</li>
</ul>
<h2 id="Distributed-ledger-and-decentralized-network"><a href="#Distributed-ledger-and-decentralized-network" class="headerlink" title="Distributed ledger and decentralized network"></a>Distributed ledger and decentralized network</h2><p>Bitcoin network does not have a central server. It is composed of many full nodes and light nodes. Among them:</p>
<ul>
<li><strong>Full nodes</strong> contain block data of all bitcoin blockchains;</li>
<li><strong>Light nodes</strong> only include data related to them.</li>
</ul>
<p>Compared to traditional centralized transaction system, the Bitcoin uses a distributed ledger in which users open “accounts,” strictly speaking, addresses. Everyone can set up an “account” on the bitcoin blockchain and get a pair of a public key and a private key. The address is the hash value of the public key. We interact with the address through the private key.</p>
<p>Each of us has a wallet, which stores a private key. When two people transfer bitcoin to each other, they can do it directly through their wallet software.</p>
<p>Here, the decentralization of bitcoin is reflected in the fact that there is no longer a centralized organization for centralized management of ledgers. The account books are stored in the decentralized network composed of many nodes; there is no longer a centralized organization to help us manage accounts and deal with transactions. Everyone manages their own wallets, and the transactions are recorded by the distributed account books.</p>
<p>Some people will ask whether the bitcoin in our address is recorded in the account book or whether there seems to be a “centre” to store our assets. In fact, this ledger is stored in the decentralized network in a distributed way, so from this perspective, it can be seen as decentralized.</p>
<p>In contrast, for centralized online payment systems, centralized servers usually manage centralized ledgers. For the bitcoin system, the system behind it is a decentralized network, and network nodes jointly maintain a distributed ledger.</p>
<p>(to be continued)</p>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
        <category>Learn blockchain in Y minutes</category>
      </categories>
      <tags>
        <tag>Blockchain</tag>
        <tag>Bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>Chainer入门教程(上)：在Chainer中做线性回归</title>
    <url>/2016/12/14/Chainer%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B(%E4%B8%8A)%EF%BC%9A%E5%9C%A8Chainer%E4%B8%AD%E5%81%9A%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>神经网络技术在统计建模、数据的转换分类回归等各大领域都有很大的应用空间。但是由于计算本身的复杂性以及早期的计算能力不足，神经网络一直没有得到很大的发展。然而近几年，随着GPU计算的进步，涌现出一大批非常强大而实用的神经网络的训练框架如Caffe、Keras、CUDA convnet、Torch7等。在这片教程中，我们着重介绍另一款灵活又好用的框架：<a href="http://chainer.org/" target="_blank" rel="noopener">Chainer</a>的基础使用方法。你可以通过Jupyter Notebook或是其他的python终端来跟进这篇教程。</p>
<p>在这篇教程中，我们将先通过编写一个简单的线性回归器来帮助你入门，然后我们再编写一个用于识别<a href="http://colah.github.io/posts/2014-10-Visualizing-MNIST/" target="_blank" rel="noopener">MNIST</a>手写数字的标准的深度学习模型来让你熟悉编程逻辑。</p>
<a id="more"></a>

<p>首先我们需要安装几个Python包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先更新一下cython，旧的版本可能会导致chainer安装出错</span></span><br><span class="line">pip install --upgrade cython</span><br><span class="line"><span class="comment">#再把numpy、matplotlib、chainer都安装一下</span></span><br><span class="line">pip install numpy</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install chainer</span><br></pre></td></tr></table></figure>

<h2 id="I-Chainer基础"><a href="#I-Chainer基础" class="headerlink" title="I. Chainer基础"></a>I. Chainer基础</h2><p>首先我们要导入这篇教程中要用到的包，关于每个包的作用，之后会有简单的介绍：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Matplotlib and Numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#Chainer Specific</span></span><br><span class="line"><span class="keyword">from</span> chainer <span class="keyword">import</span> FunctionSet, Variable, optimizers, serializers</span><br><span class="line"><span class="keyword">import</span> chainer.functions <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> chainer.links <span class="keyword">as</span> L</span><br></pre></td></tr></table></figure>

<h3 id="了解Chainer中Variables和Functions的特点和作用"><a href="#了解Chainer中Variables和Functions的特点和作用" class="headerlink" title="了解Chainer中Variables和Functions的特点和作用"></a>了解Chainer中Variables和Functions的特点和作用</h3><p>首先，我们通过包裹numpy数组定义两个简单的Chainer Variables变量。数组中只有一个值，这样可以方便我们后续做一些标量运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create 2 chainer variables then sum their squares</span></span><br><span class="line"><span class="comment"># and assign it to a third variable.</span></span><br><span class="line">a = Variable(np.array([<span class="number">3</span>], dtype=np.float32))</span><br><span class="line">b = Variable(np.array([<span class="number">4</span>], dtype=np.float32))</span><br><span class="line">c = a**<span class="number">2</span> + b**<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>在Chainer中，Variables对象既是象征的又是数字的。它们在data属性中包含数据的值，但也包含已在它们上执行的操作链的信息。当你需要训练神经网络时，这段操作历史是非常有用的。我们通过调用backward()方法对变量进行BP或（反向模式）自动分化，这给我们提供了所选择的优化与所有更新我们的神经网络所需要的权重信息。</p>
<p>这个过程之所以可以发生，是因为Chainer的Variables对象把所有对其进行操作的函数都进行了存储，分析了其表达式及导数。你将会使用到的一些函数会是带参的，包含在chainer.links中(这里我们作为L导入)。这些函数的参数将在我们的网络的每个训练迭代中更新。其他包含在chainer.functions(这里我们作为F导入)中的函数将会是无参的，只是对变量执行预定义的数学操作。连加减运算都需要调用Chainer Functions，各变量的操作历史都将保存为变量本身的一部分。这使我们能够计算任何变量的相对于任何其他变量的导数。</p>
<p>下面我们来看一个例子，过程如下：</p>
<ol>
<li>通过调用data属性检查之前定义的变量</li>
<li>使用backward()方法，对变量c进行反向传播</li>
<li>通过在变量中存储的grad属性，检查其导数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Inspect the value of your variables.</span></span><br><span class="line">print(<span class="string">"a.data: &#123;0&#125;, b.data: &#123;1&#125;, c.data: &#123;2&#125;"</span>.format(a.data, b.data, c.data))</span><br></pre></td></tr></table></figure>

<p>output: <code>a.data: [ 3.], b.data: [ 4.], c.data: [ 25.]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Now call backward() on the sum of squares.</span></span><br><span class="line">c.backward()</span><br><span class="line"><span class="comment">#And inspect the gradients.</span></span><br><span class="line">print(<span class="string">"dc/da = &#123;0&#125;, dc/db = &#123;1&#125;, dc/dc = &#123;2&#125;"</span>.format(a.grad, b.grad, c.grad))</span><br></pre></td></tr></table></figure>

<p>output: <code>dc/da = [ 6.], dc/db = [ 8.], dc/dc = [ 1.]</code></p>
<h2 id="II-在Chainer中做线性回归"><a href="#II-在Chainer中做线性回归" class="headerlink" title="II. 在Chainer中做线性回归"></a>II. 在Chainer中做线性回归</h2><p>现在我们知道了一点关于基础的Chainer在做什么，让我们用它来训练最基本的神经网络、线性回归网络。当然，这里所涉及的最小二乘优化的解决方案，通过正常的等式计算分析可能更有效，但这个过程将展示每个网络的基本组成部分，你可以直接进行训练。</p>
<p>这个网络没有隐藏的节点，只涉及一个输入节点，一个输出节点，和一个连接他们两个的线性函数。</p>
<p>我们将要进行下列步骤：</p>
<ol>
<li>生成随机的线性数据集</li>
<li>通过Chainer Link构造一个前向的网络</li>
<li>构造一个函数来进行网络训练</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generate linearly related datasets x and y.</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">30</span>*np.random.rand(<span class="number">1000</span>).astype(np.float32)</span><br><span class="line">y = <span class="number">7</span>*x+<span class="number">10</span></span><br><span class="line">y += <span class="number">10</span>*np.random.randn(<span class="number">1000</span>).astype(np.float32)</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20180809233029.png"></p>
<p>一般来说，在Chainer中想要让你的结构保持共同的神经网络，你需要构造一个forward函数，这个函数会带入你的不同的带参的link函数并在序列中把所有数据运行一遍。</p>
<p>然后，我们需要写一个train函数，它将在你的所有的数据上把forward函数运行epochs次。并且在每次forward之后，都调用loss/objective函数，然后通过optimizer和通过backward方法算出的梯度来更新权重。</p>
<p>Chainer使用者通常会在一开始的时候就定义好Link的层（这里我们只需要一层）。然后他们会通过实例化一个optimizer类来指定要用的优化器。最后，他们会通过调用优化实例的设置方法，告诉optimizer来跟踪和更新指定的模型层的参数，该层将作为一个参数被跟踪。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Setup linear link from one variable to another.</span></span><br><span class="line"></span><br><span class="line">linear_function = L.Linear(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set x and y as chainer variables, make sure to reshape</span></span><br><span class="line"><span class="comment"># them to give one value at a time.</span></span><br><span class="line">x_var = Variable(x.reshape(<span class="number">1000</span>,<span class="number">-1</span>))</span><br><span class="line">y_var = Variable(y.reshape(<span class="number">1000</span>,<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup the optimizer.</span></span><br><span class="line">optimizer = optimizers.MomentumSGD(lr=<span class="number">0.001</span>)</span><br><span class="line">optimizer.setup(linear_function)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define a forward pass function taking the data as input.</span></span><br><span class="line"><span class="comment"># and the linear function as output.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_forward</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> linear_function(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define a training function given the input data, target data,</span></span><br><span class="line"><span class="comment"># and number of epochs to train over.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_train</span><span class="params">(train_data, train_target,n_epochs=<span class="number">200</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">        <span class="comment"># Get the result of the forward pass.    </span></span><br><span class="line">        output = linear_forward(train_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate the loss between the training data and target data.</span></span><br><span class="line">        loss = F.mean_squared_error(train_target,output)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Zero all gradients before updating them.</span></span><br><span class="line">        linear_function.zerograds()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate and update all gradients.</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Use the optmizer to move all parameters of the network</span></span><br><span class="line">        <span class="comment"># to values which will reduce the loss.</span></span><br><span class="line">        optimizer.update()</span><br></pre></td></tr></table></figure>

<h3 id="绘制训练结果"><a href="#绘制训练结果" class="headerlink" title="绘制训练结果"></a>绘制训练结果</h3><p>下面的代码将会把此模型每次训练5遍，并绘制线性链接中当前的参数下的线。你将会看到模型是如何从蓝色的线收敛到红色的线（最终状态）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This code is supplied to visualize your results.</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x,y, alpha =<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">150</span>):    </span><br><span class="line">    linear_train(x_var, y_var, n_epochs=<span class="number">5</span>)</span><br><span class="line">    y_pred = linear_forward(x_var).data</span><br><span class="line">    plt.plot(x, y_pred, color=plt.cm.cool(i/<span class="number">150.</span>), alpha = <span class="number">0.4</span>, lw =<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">slope = linear_function.W.data[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">intercept = linear_function.b.data[<span class="number">0</span>]</span><br><span class="line">plt.title(<span class="string">"Final Line: &#123;0:.3&#125;x + &#123;1:.3&#125;"</span>.format(slope, intercept))</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20180809233133.png"></p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>本文译自：<a href="http://multithreaded.stitchfix.com/blog/2015/12/09/intro-to-chainer/" target="_blank" rel="noopener">Introduction to Chainer: Neural Networks in Python</a></p>
<h3 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h3><p>Oh là là ! C’est incroyable !（艾玛，真是令人难以置信！）</p>
]]></content>
      <tags>
        <tag>Chainer</tag>
        <tag>入门教程</tag>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Chainer入门教程(下)：MNIST手写体识别</title>
    <url>/2016/12/15/Chainer%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B(%E4%B8%8B)-MNIST%E6%89%8B%E5%86%99%E4%BD%93%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h2 id="III-训练一个手写体识别器"><a href="#III-训练一个手写体识别器" class="headerlink" title="III. 训练一个手写体识别器"></a>III. 训练一个手写体识别器</h2><p>在这一部分中，我们将使用MNIST手写数字数据集来尝试区分一个28x28像素的手写体图像。这是一个典型的有监督的深度学习。</p>
<p>对于这个问题，我们将会改变我们之前的线性回归器，同时引入一些隐藏的线性神经网络层，当然，也会引入一些非线性的激活函数。这种类型的架构通常被称为Multilayer Perceptron(MLP)。接下来我们就来看一下它是如何处理眼下的这个任务的。</p>
<p>下面的这一段代码会帮助你下载、引入并结构化MNIST数据集。然而为了完成这部分工作，你还需要下载<a href="https://github.com/imonce/imonce.github.io/tree/master/assets/files/data.py" target="_blank" rel="noopener">data.py</a>文件，并把它放在你的工作目录(你的脚本或notebook所在的目录)下以方便导入。</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># functions for importing the MNIST dataset.</span></span><br><span class="line"><span class="keyword">import</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># We'll first import the data as a variable mnist.</span></span><br><span class="line"><span class="comment"># (If this is the first time you've run this function</span></span><br><span class="line"><span class="comment"># it could take a minute or two)</span></span><br><span class="line"></span><br><span class="line">mnist = data.load_mnist_data()</span><br></pre></td></tr></table></figure>

<p>现在我们可以先看一下这些图片的样子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    example = mnist[<span class="string">'data'</span>][i].reshape(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    target = mnist[<span class="string">'target'</span>][i]</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">5</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(example, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">"Target Number: &#123;0&#125;"</span>.format(target))</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20180809232611.png"></p>
<p>现在，我们要把数据集中的图像和对应的真实数字分开，并分成训练集和测试集两部分，以便我们在最后检验我们的学习成果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Separate the two parts of the MNIST dataset</span></span><br><span class="line">features = mnist[<span class="string">'data'</span>].astype(np.float32) / <span class="number">255</span></span><br><span class="line">targets = mnist[<span class="string">'target'</span>].astype(np.int32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a train/test split.</span></span><br><span class="line">x_train, x_test = np.split(features, [<span class="number">60000</span>])</span><br><span class="line">y_train, y_test = np.split(targets, [<span class="number">60000</span>])</span><br></pre></td></tr></table></figure>

<p>这样一来，我们就可以集中精力训练我们的MLP了。MLP包含一系列不同的layer，Chainer又有一个很不错的方法，这可以帮我们把神经网络中所有的layer都封装到一个对象中。</p>
<h3 id="FunctionSet简介"><a href="#FunctionSet简介" class="headerlink" title="FunctionSet简介"></a>FunctionSet简介</h3><p>这个方便的对象以命名后的layer作为关键字参数，以便我们之后可以引用它们。FunctionSet工作的方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = FunctionSet(layer1=&lt;place link here&gt;, layer2=&lt;place link here&gt;, ...etc.)</span><br></pre></td></tr></table></figure>

<p>然后layer就会在类的实例中作为属性存在。这些layer都可以通过把FunctionSet实例交给optimizer的setup方法同时进行优化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer.setup(model)</span><br></pre></td></tr></table></figure>

<p>理解了这个小tip之后，我们就可以继续构建我们的分类器了。我们需要把一个28x28像素的图像降维成一个10维的单形。输出的每一个维度代表一个具体的数字。</p>
<h3 id="MLP架构"><a href="#MLP架构" class="headerlink" title="MLP架构"></a>MLP架构</h3><p>为了方便教学以及理解，我们在这里建立一个只有三层的神经网络。</p>
<p>我们需要一个link来引入我们的28x28=784的图像，然后一步一步把它降维到10维。</p>
<p><strong>另外，因为线性函数的组织是线性的，而深度学习又具有引入非线性变换的优点，所以当我们引入一些非线性函数时就会有非常好的重复线性层的堆叠。</strong></p>
<!-- Additionally, since compositions of linear functions are linear and the benefit of deep learning models are their ability to approximate arbitrary nonlinear functions, it wouldn’t do us much good to stack repeated linear layers together without adding some nonlinear function to send them through-->

<p>因此，在前向传播时，我们希望线性变换层和非线性的激活函数层交替出现。通过这种方法，我们的神经网络可以学习到非线性的数据模型以得到更好的预测结果。最后我们通过一个名为softmax的交叉熵损失函数来比较输出的矢量与我们的原本提取出的答案，然后基于计算出的损失来进行反向传播。</p>
<p>最终我们的前向传播的架构应该是这样的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out = linear_layer1(data)</span><br><span class="line">out = relu(out)</span><br><span class="line">out = linear_layer2(out)</span><br><span class="line">out = relu(out)</span><br><span class="line">out = linear_layer3(out)</span><br></pre></td></tr></table></figure>

<p>到了训练我们的模型的时候，我们希望能够每次处理一部分的样品并在更新权重前来统计它们的损失。</p>
<h3 id="Define-the-Model"><a href="#Define-the-Model" class="headerlink" title="Define the Model"></a>Define the Model</h3><p>首先，我们通过声明link的集以及在训练过程中要用到的optimizer来定义模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare the model layers together as a FunctionSet</span></span><br><span class="line">mnist_model = FunctionSet(</span><br><span class="line">    linear1=L.Linear(<span class="number">784</span>, <span class="number">300</span>),</span><br><span class="line">    linear2=L.Linear(<span class="number">300</span>, <span class="number">100</span>),</span><br><span class="line">    linear3=L.Linear(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate an optimizer (you should probably use an</span></span><br><span class="line"><span class="comment"># Adam optimizer here for best performance)</span></span><br><span class="line"><span class="comment"># and then setup the optimizer on the FunctionSet.</span></span><br><span class="line">mnist_optimizer = optimizers.Adam()</span><br><span class="line">mnist_optimizer.setup(mnist_model)</span><br></pre></td></tr></table></figure>

<h3 id="构造训练函数"><a href="#构造训练函数" class="headerlink" title="构造训练函数"></a>构造训练函数</h3><p>现在我们构造一个合适的函数来进行前向传播、定义训练用的数据集以及生成训练之后对MNIST手写图像进行预测的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Construct a forward pass through the network,</span></span><br><span class="line"><span class="comment"># moving sequentially through a layer then activation function</span></span><br><span class="line"><span class="comment"># as stated above.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_forward</span><span class="params">(data, model)</span>:</span></span><br><span class="line"></span><br><span class="line">    out1 = model.linear1(data)</span><br><span class="line">    out2 = F.relu(out1)</span><br><span class="line">    out3 = model.linear2(out2)</span><br><span class="line">    out4 = F.relu(out3)</span><br><span class="line">    final = model.linear3(out4)</span><br><span class="line">    <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a training function which takes in training data and targets</span></span><br><span class="line"><span class="comment"># as an input.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_train</span><span class="params">(x, y, model, batchsize=<span class="number">1000</span>, n_epochs=<span class="number">20</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    data_size = x.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># loop over epochs</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">        print(<span class="string">'epoch %d'</span> % (epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># randomly shuffle the indices of the training data</span></span><br><span class="line">        shuffler = np.random.permutation(data_size)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># loop over batches</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, data_size, batchsize):</span><br><span class="line">            x_var = Variable(x[shuffler[i : i + batchsize]])</span><br><span class="line">            y_var = Variable(y[shuffler[i : i + batchsize]])</span><br><span class="line"></span><br><span class="line">            output = mnist_forward(x_var, model)</span><br><span class="line">            model.zerograds()</span><br><span class="line">            loss = F.softmax_cross_entropy(output, y_var)</span><br><span class="line">            loss.backward()</span><br><span class="line">            mnist_optimizer.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a prediction function, using a softmax and argmax in order to</span></span><br><span class="line"><span class="comment"># match the target space so that we can validate.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_predict</span><span class="params">(x, model)</span>:</span></span><br><span class="line">    x = Variable(x)</span><br><span class="line"></span><br><span class="line">    output = mnist_forward(x, model)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> F.softmax(output).data.argmax(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Train-the-Model"><a href="#Train-the-Model" class="headerlink" title="Train the Model"></a>Train the Model</h3><p>我们现在可以开始训练神经网络了（这里我们使用一个比较小的训练次数和一个比较大的批大小，这样可以帮我们节省一些训练时间。你也可以修改一些参数，说不定就会出现更好的结果呢~）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mnist_train(x_train, y_train, mnist_model, n_epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h3><p>最后一件事情就是通过测试集来验证我们的模型的精确度，看看是否出现了过拟合的情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Call your prediction function on the test set</span></span><br><span class="line">pred = mnist_predict(x_test, mnist_model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare the prediction to the ground truth target values.</span></span><br><span class="line">accuracy = (pred==y_test).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print out test accuracy</span></span><br><span class="line">print(<span class="string">"Test accuracy: %f"</span> % accuracy)</span><br></pre></td></tr></table></figure>

<p>out: <code>Test accuracy: 0.965900</code></p>
<p>可以看到，我们才训练了5次就有了一个96.59%的准确率，amazing~</p>
<h3 id="模型复用"><a href="#模型复用" class="headerlink" title="模型复用"></a>模型复用</h3><p>如果你觉得某一次的训练结果不错，想要保存下来以后使用，你可以通过Chainer的serializers来将其保存成hdf5格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializers.save_hdf5(<span class="string">'test.model'</span>, mnist_model)</span><br><span class="line">serializers.save_hdf5(<span class="string">'test.state'</span>, mnist_optimizer)</span><br></pre></td></tr></table></figure>

<p>要调出使用的时候也很简单：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializers.load_hdf5(<span class="string">'my_model.model'</span>, model_name)</span><br><span class="line">serializers.load_hdf5(<span class="string">'my_optimizer.state'</span>, optimizer_name)</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>通过这篇入门教程，相信大家对于机器学习以及Chainer都有了一定的概念。可以看出，Chainer是一个非常灵活且实用的框架，机器学习也并非难以理解。如果你想进一步Chaier这个框架，个人觉得去看看<a href="http://docs.chainer.org/en/stable/" target="_blank" rel="noopener">Chainer的官方文档</a>也是一个不错的选择~</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>本文译自：<a href="http://multithreaded.stitchfix.com/blog/2015/12/09/intro-to-chainer/" target="_blank" rel="noopener">Introduction to Chainer: Neural Networks in Python</a></p>
<h3 id="每日一句："><a href="#每日一句：" class="headerlink" title="每日一句："></a>每日一句：</h3><p>On n’est jamais content là où on est.（人们从来不会满意自己所在的地方。）</p>
]]></content>
      <tags>
        <tag>Chainer</tag>
        <tag>入门教程</tag>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年10大战略性科技趋势1·2</title>
    <url>/2019/05/25/Gartner-2019%E5%B9%B410%E5%A4%A7%E6%88%98%E7%95%A5%E8%B6%8B%E5%8A%BF(12)/</url>
    <content><![CDATA[<h1 id="关键发现："><a href="#关键发现：" class="headerlink" title="关键发现："></a>关键发现：</h1><ul>
<li>AI开启了数字业务的新方向</li>
<li>我们对技术的感知和互动方式正在发生根本性的转变</li>
<li>事物和流程的数字化正在更多的被用于监控、分析和控制真实世界的环境</li>
<li>确定技术趋势并依据对业务的潜在影响排列优先级可以创造竞争优势</li>
</ul>
<h1 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h1><p>通过技术创新进行业务转型的公司架构和技术创新领导者必须：</p>
<ul>
<li>探索基本上可以通过AI驱动的自主功能为组织内的任何物理设备或客户环境提供支持的方式</li>
<li>与高级商业领袖一起教育，参与和思考他们的战略相关优先事项以及AI可以自动化或增强人类活动的地方</li>
<li>开发和部署混合平台，将对话交互与虚拟，增强和混合现实相结合，以针对目标用例创建身临其境的用户体验</li>
<li>通过开发和优先处理有针对性的高价值业务案例来构建物理事物和组织流程的数字双胞胎，从而支持物联网计划</li>
<li>在量子计算仍处于新兴状态时，了解并监控它。 找出具有潜力的现实问题并评估其对安全的可能影响</li>
</ul>
<h1 id="战略规划预测"><a href="#战略规划预测" class="headerlink" title="战略规划预测"></a>战略规划预测</h1><p>到2021年，10％的新车将具有自动驾驶功能，而2018年则不到1％。<br>到2020年，公民数据科学家的数量将比专家数据科学家的数量增长快五倍。<br>到2022年，至少40％的新应用程序开发项目将在团队中拥有人工智能联合开发人员。<br>到2021年，一半的大型工业公司将使用数字双胞胎，使这些组织的效率提高10％。<br>到2028年，存储，计算和高级AI和分析技术将扩展边缘设备的功能。<br>到2022年，70％的企业将尝试使用沉浸式技术进行消费和企业使用，25％的企业将其部署到生产中。<br>到2030年，区块链将创造3.1万亿美元的商业价值。<br>到2022年，超过50％在工业4.0生态系统中合作的人将使用虚拟助手或智能代理与周围环境和人们进行更自然的交互。<br>到2021年，那些绕过隐私要求并且缺乏隐私保护的组织将比遵守最佳实践的竞争对手支付高出100％的合规成本。<br>到2023年，20％的组织将为量子计算项目编制预算，而2018年则不到1％。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>数字化转型会导致企业不断更新其业务模型。企业领导需要接受并鼓励不断的改变，这也是在未来变化世界中的成功之道。</p>
<p>在未来，所有的智能设备和智能终端会组成一个“智能数字网”，这会成为一个颠覆性的技术趋势，所有的创新型公司都要做好准备应对。智能数字网的三个核心主题：</p>
<ul>
<li>智能。智能主题探讨了AI，特别强调机器学习，如何渗透到几乎所有现有技术并创建全新的技术类别。</li>
<li>数字。数字主题专注于融合数字和物理世界，以创造自然和身临其境的数字增强体验。</li>
<li>网络。网络主题主要开发人、业务、设备、内容、服务等之间的联系。</li>
</ul>
<h1 id="2019年十大战略技术趋势"><a href="#2019年十大战略技术趋势" class="headerlink" title="2019年十大战略技术趋势"></a>2019年十大战略技术趋势</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190527105918.png"></p>
<h2 id="趋势1-自主事物"><a href="#趋势1-自主事物" class="headerlink" title="趋势1:自主事物"></a>趋势1:自主事物</h2><p>自主事物通过AI来自动化执行原本由人类执行的行为。不同于之前死板的程式化的自动化，自主事物可以更好的在人类环境下进行更自然的交互。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190529202423.png"></p>
<h3 id="自主物理事物and自主虚拟事物"><a href="#自主物理事物and自主虚拟事物" class="headerlink" title="自主物理事物and自主虚拟事物"></a>自主物理事物and自主虚拟事物</h3><p>自主物理事物的应用：</p>
<ul>
<li>巡逻机器人</li>
<li>高级农业</li>
<li>更安全的载具运输</li>
</ul>
<p>自主虚拟事物的应用：</p>
<ul>
<li>虚拟个人助理</li>
<li>独立代理</li>
</ul>
<h3 id="自主能力的范围"><a href="#自主能力的范围" class="headerlink" title="自主能力的范围"></a>自主能力的范围</h3><ul>
<li>人工辅助</li>
<li>部分自动化</li>
<li>条件性自动化</li>
<li>高级自动化</li>
<li>全自动化</li>
</ul>
<h3 id="自主、智能、协调"><a href="#自主、智能、协调" class="headerlink" title="自主、智能、协调"></a>自主、智能、协调</h3><ul>
<li>Intel在2018年冬奥会开幕式上使用无人机群</li>
<li>迪拜警方准备使用自己部署的无人机盯梢</li>
<li>自主智能汽车可以互相通讯协调以优化城市交通</li>
<li>群智智能助理可以通过集成多终端数据满足复杂需求</li>
<li>多代理之间的自动协调可以是IT操作变得更加流畅和安全</li>
</ul>
<h2 id="趋势2-增强分析"><a href="#趋势2-增强分析" class="headerlink" title="趋势2:增强分析"></a>趋势2:增强分析</h2><p>增强分析包括：</p>
<ul>
<li>增强数据准备。它使用机器学习自动化来增强数据分析和数据质量，协调，建模，操作，丰富，元数据开发和编目。</li>
<li>增强分析。这使得业务用户和公民数据科学家能够自动查找，可视化和叙述相关发现，而无需构建模型或编写算法。</li>
<li>增强数据科学和机器学习。它使用AI来自动化数据科学和机器学习/AI建模的关键方面，例如特征工程，模型选择（自动机器学习[autoML]），模型操作，解释，调整和管理。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190529205050.png"></p>
<h3 id="赋能民间数据科学家"><a href="#赋能民间数据科学家" class="headerlink" title="赋能民间数据科学家"></a>赋能民间数据科学家</h3><p>到2020年，民间数据科学家的数量将比专业数据科学家的数量的增长快五倍。</p>
<h3 id="在民间数据科学家之上"><a href="#在民间数据科学家之上" class="headerlink" title="在民间数据科学家之上"></a>在民间数据科学家之上</h3><p>更多地使用机器学习以及自动化和人工增强模型将意味着更少的偏差。它将减少用户浏览数据所花费的时间，使他们有更多时间根据数据采取最相关的见解。它还将使一线工作人员能够获得更多情境化的分析见解和指导性建议，以改进决策和行动。</p>
<h3 id="行动起来"><a href="#行动起来" class="headerlink" title="行动起来"></a>行动起来</h3><ul>
<li>接受增强分析作为数据化转型策略的一部分</li>
<li>通过增强分析寻找机会</li>
<li>开发一种定位增强分析的影响的策略</li>
</ul>
<hr>
<pre><code>摘译自：https://www.gartner.com</code></pre>
]]></content>
      <categories>
        <category>Gartner</category>
        <category>趋势</category>
      </categories>
      <tags>
        <tag>科技趋势</tag>
        <tag>Gartner</tag>
        <tag>战略研究</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年10大战略性科技趋势3·4</title>
    <url>/2019/06/03/Gartner-2019%E5%B9%B410%E5%A4%A7%E6%88%98%E7%95%A5%E6%80%A7%E7%A7%91%E6%8A%80%E8%B6%8B%E5%8A%BF%EF%BC%883%EF%BC%8C4%EF%BC%89/</url>
    <content><![CDATA[<h1 id="2019年十大战略技术趋势"><a href="#2019年十大战略技术趋势" class="headerlink" title="2019年十大战略技术趋势"></a>2019年十大战略技术趋势</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190527105918.png"></p>
<h2 id="趋势3-AI驱动开发"><a href="#趋势3-AI驱动开发" class="headerlink" title="趋势3:AI驱动开发"></a>趋势3:AI驱动开发</h2><p>人工智能驱动的开发探索了将人工智能功能嵌入应用程序的工具、技术和最佳实践的演变。它还探讨了如何使用人工智能创建开发过程中使用的人工智能驱动工具。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190603231505.png"></p>
<p>这一趋势正沿着三个维度发展：</p>
<ul>
<li>用于构建人工智能解决方案的工具正在从面向数据科学家的工具（人工智能基础设施、人工智能框架和人工智能平台）扩展到面向专业开发人员社区的工具（人工智能平台和人工智能服务）。</li>
<li>用于构建人工智能供电解决方案的工具本身被赋予了人工智能驱动能力，帮助专业开发人员并自动化与人工智能增强解决方案开发相关的任务。</li>
<li>特别是，支持人工智能的工具正在从帮助和自动化与应用程序开发（AD）相关的功能发展到利用业务领域专业知识进行增强，并自动化更高层次的广告流程堆栈（从一般开发到业务解决方案设计）活动。</li>
</ul>
<h2 id="趋势4-数字孪生"><a href="#趋势4-数字孪生" class="headerlink" title="趋势4:数字孪生"></a>趋势4:数字孪生</h2><p>数字孪生是指现实世界实体或系统的数字表示。数字孪生兄弟的实现是一个封装的软件对象或模型，反映了一个独特的物理对象。来自多个数字孪生兄弟的数据可以在多个现实世界实体（如发电厂或城市）中聚合为一个复合视图。对现实世界中的实体或系统进行数字表示的概念并不新鲜。它的传统可以追溯到计算机辅助的物理资产设计表示或个人客户的配置文件。数字双胞胎最新迭代的区别在于：</p>
<ul>
<li>模型在于它们如何支持特定的业务结果的健壮性</li>
<li>数字孪生兄弟与现实世界的链接，可能实时监控</li>
<li>应用先进的大数据分析和人工智能来推动新的业务机会</li>
<li>与他们互动并评估“假设”情景的能力</li>
</ul>
<p>在物联网项目的背景下，数字孪生正在引起人们的兴趣。精心设计的数字孪生资产可以显著提高企业的决策能力。它们与现实世界中的对应物相关联，用于了解事物或系统的状态、响应变化、改进操作和增加价值。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190603232249.png"></p>
<hr>
<pre><code>摘译自：https://www.gartner.com</code></pre>
]]></content>
      <categories>
        <category>Gartner</category>
        <category>趋势</category>
      </categories>
      <tags>
        <tag>科技趋势</tag>
        <tag>Gartner</tag>
        <tag>战略研究</tag>
      </tags>
  </entry>
  <entry>
    <title>How to construct an evaluation/assessment/measurement index system</title>
    <url>/2020/01/05/How-to-build-an-evaluation-assessment-measurement-framework/</url>
    <content><![CDATA[<p>An evaluation index system refers to an organic whole with an internal structure composed of multiple indicators that characterize various aspects of the evaluation object and their interconnections.</p>
<h1 id="Principles-to-be-followed"><a href="#Principles-to-be-followed" class="headerlink" title="Principles to be followed"></a>Principles to be followed</h1><p>In order to make the indicator system scientific and standardized, the following principles should be followed when constructing it:</p>
<ol>
<li><strong>Systematic principle.</strong> There should be a certain logical relationship between the indicators. They should not only reflect the main characteristics and states of the ecological, economic and social subsystems from different aspects, but also reflect the internal relationship between the ecological, economic and social systems. Each subsystem is composed of a set of indicators, which are independent of each other and connected with each other to form an organic unity. The construction of the index system is hierarchical, from the top to the bottom, from the macro level to the micro level, forming an indivisible evaluation system.</li>
<li><strong>Typical principle.</strong> It is necessary to ensure that the evaluation indicators have certain typical representativeness, and reflect the comprehensive characteristics of the environment, economy and social changes in a specific region as accurately as possible. Even if the number of indicators is reduced, it is also necessary to facilitate data calculation and improve the reliability of the results. In addition, the setting of evaluation index system, the distribution of weight among indexes and the division of evaluation standard should be adapted to the natural and socio-economic conditions of a specific region.</li>
<li><strong>Dynamic principle.</strong> The interactive development of ecology, economy and social benefits can only be reflected through certain time scale indicators. Therefore, dynamic changes should be fully considered in the selection of indicators, and the change values of several years should be collected.</li>
<li><strong>Concise and scientific principle.</strong> The design of each index system and the selection of evaluation indexes must be based on the principle of scientificity, which can objectively and truly reflect the characteristics and conditions of Gaoxigou’s environmental, economic and social development, and can objectively and comprehensively reflect the real relationship between each index. Each evaluation index should be typical, not too many and too detailed, so that the index is too cumbersome and overlapping, and the index cannot be too few and too simple, so as to avoid the omission of index information, errors and untrue phenomena, and the data is easy to obtain and the calculation method is simple and easy to understand.</li>
<li><strong>Comparable, operable and quantifiable principle.</strong> In terms of indicator selection, special attention should be paid to the consistency within the overall scope. The construction of indicator system serves for the formulation of field assessment and scientific management. The calculation measures and calculation methods of indicator selection must be consistent and unified. Each indicator should be as simple and clear as possible, micro and easy to collect. Each indicator should be highly practical, operable and comparable. In addition, when selecting indicators, it is also necessary to consider whether quantitative processing can be carried out to facilitate mathematical calculation and analysis.</li>
<li><strong>Comprehensive principle.</strong> At the corresponding evaluation level, the factors affecting the environment, economy and social system are comprehensively considered, and comprehensive analysis and evaluation are carried out.</li>
</ol>
<h1 id="Features-that-should-be-possessed"><a href="#Features-that-should-be-possessed" class="headerlink" title="Features that should be possessed"></a>Features that should be possessed</h1><p>And the constructed index system should possess these features:</p>
<ol>
<li>Perform a clear guidance direction</li>
<li>Quantitative based and qualitative supplemented</li>
<li>Difference classification considered</li>
</ol>
<h1 id="General-construction-process"><a href="#General-construction-process" class="headerlink" title="General construction process"></a>General construction process</h1><ol>
<li>Building the theoretical foundation</li>
<li>Provide empirical evidence<ol>
<li>Statistical data support</li>
<li>Evidence from typical cases</li>
<li>Reasonable interpretation of contradictory cases</li>
</ol>
</li>
<li>Verify operability</li>
</ol>
<h1 id="Representative-evaluation-system-3E"><a href="#Representative-evaluation-system-3E" class="headerlink" title="Representative evaluation system: 3E"></a>Representative evaluation system: 3E</h1><p>3E theory refers to:</p>
<ul>
<li>Efficacy, which measures its own output</li>
<li>Efficiency, which reflects the utilization of resources</li>
<li>Effectiveness, which reflects the effect of the system output on its superior system</li>
</ul>
<p>3E system represents the trend of diversified development of performance evaluation system. Through the establishment of 3E standard system, the soft environment evaluation system is more scientific and transparent, and the efficiency and operability of performance evaluation are increased, which greatly promotes the improvement and development of public policy evaluation system.</p>
]]></content>
      <categories>
        <category>Methodology</category>
      </categories>
      <tags>
        <tag>Evaluation</tag>
        <tag>Assessment</tag>
        <tag>Measrement</tag>
        <tag>Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda演算精简教程</title>
    <url>/2019/04/24/Lambda%E6%BC%94%E7%AE%97%E7%B2%BE%E7%AE%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章译自：<a href="https://learnxinyminutes.com/docs/lambda-calculus/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/lambda-calculus/</a>，写的精简了点，理解起来可能有些困难</p>
<p>建议配合<a href="https://github.com/imonce/Lambda-Calculus/blob/master/lambda.pdf" target="_blank" rel="noopener">让我们谈谈 $\lambda$ 演算.pdf</a>一起食用（出自<a href="https://github.com/txyyss/Lambda-Calculus/releases" target="_blank" rel="noopener">https://github.com/txyyss/Lambda-Calculus/releases</a>）。这篇不算长，深入浅出，写的也极好。</p>
<h1 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h1><p>Lambda演算( $\lambda$ 演算)由Alonzo Church提出，是世界上最简洁的编程语言。尽管没有数字、字符串、布尔值等非函数数据类型，lambda演算还是可以表达任何图灵机。</p>
<p>Lambda演算由三种元素组成：变量（variables），函数（functions），以及应用（applications）。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">语法</th>
<th align="left">例子</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Variable</td>
<td align="left">&lt;name&gt;</td>
<td align="left">x</td>
<td align="left">一个名为“x”的变量</td>
</tr>
<tr>
<td align="left">Function</td>
<td align="left">$\lambda$ &lt;parameters&gt;.&lt;body&gt;</td>
<td align="left">$\lambda$ x.x</td>
<td align="left">一个拥有参数“x”以及函数体x的函数</td>
</tr>
<tr>
<td align="left">Application</td>
<td align="left">&lt;function&gt;&lt;variable or function&gt;</td>
<td align="left">( $\lambda$ x.x).a</td>
<td align="left">调用函数“ $\lambda$ x.x”且参数值为“a”</td>
</tr>
</tbody></table>
<p>最基础的函数就是恒等函数： $\lambda$ x.x（即f(x)=x）。第一个“x”代表函数的参数，第二个“x”代表函数体。</p>
<h1 id="自由变量vs约束变量"><a href="#自由变量vs约束变量" class="headerlink" title="自由变量vs约束变量"></a>自由变量vs约束变量</h1><ul>
<li>在 $\lambda$ x.x函数中，x被称为约束变量，因为它同时位于函数体和参数中。</li>
<li>在 $\lambda$ x.y函数中，y被称为自由变量，因为它从未被事先声明过。</li>
</ul>
<h1 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h1><p>通过 $\beta$ 规约进行计算，其基本上是词法范围的替代。</p>
<p>在计算表达式( $\lambda$ x.x)a时，我们用“a”替换函数体中出现的所有“x”。</p>
<ul>
<li>( $\lambda$ x.x)a 计算结果为：a</li>
<li>( $\lambda$ x.y)a 计算结果为：y</li>
</ul>
<p>也可以创建高阶函数：</p>
<ul>
<li>( $\lambda$ x.( $\lambda$ y.x))a 计算结果为： $\lambda$ y.a</li>
</ul>
<p>虽然lambda演算传统上只支持单参数函数，但是我们可以使用一种称为currying的技术创建多参数函数。</p>
<ul>
<li>( $\lambda$ x. $\lambda$ y. $\lambda$ z.xyz) 即 f(x, y, z) = ((x y) z)</li>
</ul>
<p>有时 $\lambda$ xy.&lt;body&gt;可与 $\lambda$ x. $\lambda$ y.&lt;body&gt;交替使用。</p>
<p>重要的是要认识到传统的lambda演算没有数字，字符或任何非函数数据类型！</p>
<h1 id="布尔逻辑"><a href="#布尔逻辑" class="headerlink" title="布尔逻辑"></a>布尔逻辑</h1><p>在lambda演算中没有“True”或“False”。甚至没有1或0。</p>
<p>取而代之的是：</p>
<ul>
<li>T表示为： $\lambda$ x. $\lambda$ y.x</li>
<li>F表示为： $\lambda$ x. $\lambda$ y.y</li>
</ul>
<p>首先，我们可以定义一个“if”函数 $\lambda$ btf，如果b为True则返回t，如果b为False则返回f</p>
<p>IF 也等同于 $\lambda$ b. $\lambda$ t. $\lambda$ f.b t f</p>
<p>通过使用IF，我们可以定义基础的布尔逻辑运算：</p>
<ul>
<li>a AND b 等同于:  $\lambda$ ab.IF a b F</li>
<li>a OR b 等同于:  $\lambda$ ab.IF a T b</li>
<li>NOT a 等同于:  $\lambda$ a.IF a F T</li>
</ul>
<p>注意: IF a b c 本质上是: IF((a b) c)</p>
<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><p>尽管lambda演算中没有数字，我们可以通过邱奇数编码数字。</p>
<p>任意数字n都可以编码为： $n = \lambda f.f^n$ 。因此：</p>
<ul>
<li>0 =  $\lambda$ f. $\lambda$ x.x</li>
<li>1 =  $\lambda$ f. $\lambda$ x.f x</li>
<li>2 =  $\lambda$ f. $\lambda$ x.f(f x)</li>
<li>3 =  $\lambda$ f. $\lambda$ x.f(f(f x))</li>
</ul>
<p>为了增加邱奇数，我们使用继承函数s(n)=n+1，即</p>
<p>S =  $\lambda$ n. $\lambda$ f. $\lambda$ x.f((n f) x)</p>
<p>通过继承，我们可以定义add：</p>
<p>ADD =  $\lambda$ ab.(a S)b</p>
<p>挑战：试着定义你自己的乘法函数！</p>
<h1 id="变得更精致：SKI，SK以及Iota"><a href="#变得更精致：SKI，SK以及Iota" class="headerlink" title="变得更精致：SKI，SK以及Iota"></a>变得更精致：SKI，SK以及Iota</h1><h2 id="SKI组合子演算"><a href="#SKI组合子演算" class="headerlink" title="SKI组合子演算"></a>SKI组合子演算</h2><p>使S, K, I，分别为以下函数：</p>
<ul>
<li>I x = x</li>
<li>K x y = x</li>
<li>S x y z = x z (y z)</li>
</ul>
<p>我们可以将lambda演算中的表达式转换为SKI组合子演算中的表达式：</p>
<ol>
<li>$\lambda$ x.x = I</li>
<li>$\lambda$ x.c = Kc</li>
<li>$\lambda$ x.(y z) = S ( $\lambda$ x.y) ( $\lambda$ x.z)</li>
</ol>
<p>以邱奇数2为例子：</p>
<p>2 =  $\lambda$ f. $\lambda$ x.f(f x)</p>
<p>对于内部部分  $\lambda$ x.f(f x):</p>
<p>$$\begin{split}<br>\lambda x.f(f x) &amp;=&amp; S ( \lambda x.f) ( \lambda x.(f x))          (case 3) \\<br>&amp;=&amp; S (K f)  (S ( \lambda x.f) ( \lambda x.x))   (case 2, 3) \\<br>&amp;=&amp; S (K f)  (S (K f) I)         (case 2, 1)<br>\end{split}$$</p>
<p>因此：</p>
<p>$$\begin{split}<br>2<br>&amp;=&amp;  \lambda f. \lambda x.f(f x) \\<br>&amp;=&amp;  \lambda f.(S (K f) (S (K f) I)) \\<br>&amp;=&amp;  \lambda f.((S (K f)) (S (K f) I)) \\<br>&amp;=&amp; S ( \lambda f.(S (K f))) ( \lambda f.(S (K f) I)) (case 3)<br>\end{split}$$</p>
<p>对于第一个参数 $\lambda f.(S (K f))$ ：</p>
<p>$$\begin{split}<br>\lambda f.(S (K f))<br>&amp;=&amp; S ( \lambda f.S) ( \lambda f.(K f))       (case 3)\\<br>&amp;=&amp; S (K S) (S ( \lambda f.K) ( \lambda f.f)) (case 2, 3)\\<br>&amp;=&amp; S (K S) (S (K K) I)       (case 2, 3)<br>\end{split}$$</p>
<p>对于第二个参数 $\lambda f.(S (K f) I)$ ：</p>
<p>$$\begin{split}<br> \lambda f.(S (K f) I)<br>&amp;=&amp;  \lambda f.((S (K f)) I)\\<br>&amp;=&amp; S ( \lambda f.(S (K f))) ( \lambda f.I)             (case 3)\\<br>&amp;=&amp; S (S ( \lambda f.S) ( \lambda f.(K f))) (K I)       (case 2, 3)\\<br>&amp;=&amp; S (S (K S) (S ( \lambda f.K) ( \lambda f.f))) (K I) (case 1, 3)\\<br>&amp;=&amp; S (S (K S) (S (K K) I)) (K I)       (case 1, 2)<br>\end{split}$$</p>
<p>合到一起：</p>
<p>$$\begin{split}<br>  2<br>&amp;=&amp; S ( \lambda f.(S (K f))) ( \lambda f.(S (K f) I))\\<br>&amp;=&amp; S (S (K S) (S (K K) I)) (S (S (K S) (S (K K) I)) (K I))<br>\end{split}$$</p>
<h2 id="SK-组合子运算"><a href="#SK-组合子运算" class="headerlink" title="SK 组合子运算"></a>SK 组合子运算</h2><p>SKI组合子运算仍可进一步简化。我们可以通过注意I = SKK来移除I组合子。我们可以用SKK替换所有I。</p>
<h2 id="Iota组合子"><a href="#Iota组合子" class="headerlink" title="Iota组合子"></a>Iota组合子</h2><p>SK组合子运算依然不是最简洁的。定义：</p>
<p>$$\begin{split}<br>ι =  \lambda f.((f S) K)<br>\end{split}$$</p>
<p>我们就有：</p>
<p>$$\begin{split}<br>I &amp;=&amp; ιι\\<br>K &amp;=&amp; ι(ιI) = ι(ι(ιι))\\<br>S &amp;=&amp; ι(K) = ι(ι(ι(ιι)))<br>\end{split}$$</p>
]]></content>
      <tags>
        <tag>Lambda</tag>
        <tag>Lambda演算</tag>
        <tag>Lambda Calculus</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机应用数学学习笔记（二）：L0范式、L1范式、L2范式、...、L ∞ 范式</title>
    <url>/2019/06/11/L0%E8%8C%83%E5%BC%8F%E3%80%81L1%E8%8C%83%E5%BC%8F%E3%80%81L2%E8%8C%83%E5%BC%8F%E3%80%81-%E3%80%81L-%E2%88%9E-%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="什么是范式"><a href="#什么是范式" class="headerlink" title="什么是范式"></a>什么是范式</h1><p>简单来说，一个 $l_p$ 范式可以被定义为</p>
<p>$||x||_p = \sqrt[p]{\Sigma_i|x_i|^p}$</p>
<h1 id="l0范式"><a href="#l0范式" class="headerlink" title="l0范式"></a>l0范式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>根据定义，l0范式应该是：</p>
<p>$||x||_0 = \sqrt[0]{\Sigma_i|x_i|^0}$</p>
<p>严格地说，l0范数实际上不是一个范数。它是一个基数函数，尽管许多人称之为范式。显然，任何x&gt;0都会变成1，但是零次幂的定义，特别是零次根的定义问题，在这里是混乱的。因此实际上，大多数数学家和工程师使用以下定义来代替l0范式：</p>
<p>$||x||_0 = \sharp(i|x_i \neq 0)$</p>
<p>这是指一个向量中非零元素的总数。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>许多应用，包括压缩感测，都试图将对应于某些约束的向量的l0范数最小化，因此称为“l0最小化”。标准最小化问题的公式如下：</p>
<p>$min ||x||_0$ subject to $Ax = b$</p>
<p>然而，这样做并不容易。由于缺乏l0范数的数学表示，l0最小化被计算机科学家视为一个NP难题，简单地说它太复杂，几乎不可能解决。</p>
<p>在许多情况下，l0最小化问题被放宽为高阶规范问题，如l1最小化和l2最小化。</p>
<h1 id="l1范式"><a href="#l1范式" class="headerlink" title="l1范式"></a>l1范式</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>$||x||_1 = \Sigma_i|x_i|$</p>
<p>这个规范在规范家族中很常见。它在各个领域有许多名称和形式，如曼哈顿范式是它的别称。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>如果计算两个向量或矩阵之间的差的l1范数，即</p>
<p>$SAD(x_1,x_2)=||x_1-x_2||_1=\Sigma_i|x_{1_i}-x_{2_i}|$</p>
<p>它在计算机视觉科学家之间被称为绝对差异之和（SAD）。</p>
<p>在信号差测量的一般情况下，可通过以下方式将其缩放为单位矢量：</p>
<p>$MAE(x_1, x_2) = \frac1n ||x_1-x_2|| _1 = \frac1n \Sigma_i |x_{1_i} - x_{2_i}|$ where $n$ is a size of $x$ .</p>
<p>这就是所谓的平均绝对误差(MAE)。</p>
<h1 id="l2范式"><a href="#l2范式" class="headerlink" title="l2范式"></a>l2范式</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>所有范式中最流行的是l_2-norm。它几乎应用于整个工程和科学的各个领域。根据基本定义，l_2-norm定义为</p>
<p>$||x||_2 = \sqrt{\Sigma_i|x_i|^2}$</p>
<h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><p>l2范数也被称为欧几里得范数，它被用作测量向量差的标准量。在l1范数中，如果欧几里得范数是针对向量差计算的，则称为欧几里得距离：</p>
<p>$||X_1-X_2||_2=\sqrt{\Sigma_i(x_{1_i}-x_{2_i})^2}$</p>
<p>或者以平方形式，即计算机视觉科学家之间所说的平方差之和（SSD）：</p>
<p>$SSD(x_1,x_2)=||X_1-X_2||_2^2=\Sigma_i(x_{1_i}-x_{2_i})^2$</p>
<p>在信号处理领域最著名的应用是均方误差（MSE）测量，它用于计算两个信号之间的相似性、质量或相关性。最小均方误差</p>
<p>$MSE(x_1,x_2)=\frac1n||X_1-X_2||_2^2=\frac1n\Sigma_i(x_{1_i}-x_{2_i})^2$</p>
<p>正如前面在L_0-优化部分讨论的那样，由于从计算和数学的角度来看有许多问题，许多L_0-优化问题放松自己，变成L_1-和L_2-优化。因此，我们现在将讨论L_2的优化。</p>
<h1 id="l-infty-范式"><a href="#l-infty-范式" class="headerlink" title="l $\infty$ 范式"></a>l $\infty$ 范式</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>$||x||_\infty = \sqrt[\infty]{\Sigma_i|x_i|^\infty}$</p>
<p>现在，这个定义看起来又很棘手，但实际上它是相当狭隘的。考虑向量 $x$ ，假设 $x_j$ 是向量 $x$ 中的最高项，根据无穷大本身的属性，我们可以这样说</p>
<p>$x_j^\infty \gg x_i^\infty \forall i \neq j$</p>
<p>然后</p>
<p>$\Sigma_ix_i^\infty=x_j^\infty$</p>
<p>然后</p>
<p>$||x||_\infty=\sqrt[\infty]{\Sigma_ix_i^\infty}=\sqrt[\infty]{x_j^\infty}=|x_j|$</p>
<p>现在我们可以将l $\infty$ 范式简化为</p>
<p>$||x||_\infty=max(|x_i|)$</p>
<p>其实也就是该向量的最大项的大小。</p>
<blockquote>
<p>ref：<a href="https://rorasa.wordpress.com/2012/05/13/l0-norm-l1-norm-l2-norm-l-infinity-norm/" target="_blank" rel="noopener">https://rorasa.wordpress.com/2012/05/13/l0-norm-l1-norm-l2-norm-l-infinity-norm/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机应用数学</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机应用数学</tag>
      </tags>
  </entry>
  <entry>
    <title>MECE分析法学习(Mutually Exclusive Collectively Exhaustive)</title>
    <url>/2019/04/02/MECE%E5%88%86%E6%9E%90%E6%B3%95%E5%AD%A6%E4%B9%A0-Mutually-Exclusive-Collectively-Exhaustive/</url>
    <content><![CDATA[<p>本文摘自：<a href="https://wiki.mbalib.com/wiki/MECE%E5%88%86%E6%9E%90%E6%B3%95" target="_blank" rel="noopener">MECE分析法</a></p>
<h1 id="MECE分析法"><a href="#MECE分析法" class="headerlink" title="MECE分析法"></a>MECE分析法</h1><p>MECE，是Mutually Exclusive Collectively Exhaustive，中文意思是“相互独立，完全穷尽”。 也就是对于一个重大的议题，能够做到不重叠、不遗漏的分类，而且能够藉此有效把握问题的核心，并解决问题的方法。</p>
<p>所谓的不遗漏、不重叠指在将某个整体（不论是客观存在的还是概念性的整体）划分为不同的部分时，必须保证划分后的各部门符合以下要求：</p>
<ul>
<li>各部分之间相互独立 （Mutually Exclusive）</li>
<li>所有部分完全穷尽 （Collectively Exhaustive）</li>
</ul>
<p>通常的做法分两种：</p>
<ul>
<li>一是在确立问题的时候，通过类似鱼刺图的方法，在确立主要问题的基础上，再逐个往下层层分解，直至所有的疑问都找到，通过问题的层层分解，可以分析出关键问题和初步的解决问题的思路；</li>
<li>另一种方法是结合头脑风暴法找到主要问题，然后在不考虑现有资源的限制基础上，考虑解决该问题的所有可能方法，在这个过程中，要特别注意多种方法的结合有可能是个新的解决方法，然后再往下分析，每种解决方法所需要的各种资源，并通过分析比较，从上述多种方案中找到目前状况下最现实最令人满意的答案。</li>
</ul>
<h1 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h1><p>对于分析问题的标准程序:</p>
<p>收集信息=&gt;描述发现=&gt;得出结论=&gt;提出方案</p>
<p>MECE分析法主要有两个步骤</p>
<p>步骤一、确认问题是什么？<br>步骤二、寻找MECE的切入点。</p>
<h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402150418.png"></p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>MECE</tag>
        <tag>分类方法</tag>
        <tag>分析法</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac如何卸载pandoc</title>
    <url>/2018/09/28/Mac%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BDpandoc/</url>
    <content><![CDATA[<h1 id="将以下脚本保存到本地，命名为uninstall-pandoc-pl"><a href="#将以下脚本保存到本地，命名为uninstall-pandoc-pl" class="headerlink" title="将以下脚本保存到本地，命名为uninstall-pandoc.pl"></a>将以下脚本保存到本地，命名为<strong>uninstall-pandoc.pl</strong></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Script to remove all files installed by the macOS pandoc installer</span></span><br><span class="line"><span class="comment"># and unregister the package.  Modified from a script contributed</span></span><br><span class="line"><span class="comment"># by Daniel T. Staal.</span></span><br><span class="line"></span><br><span class="line">use warnings;</span><br><span class="line">use strict;</span><br><span class="line"></span><br><span class="line">use File::Spec;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The main info: this is the list of files to remove and the pkg_id.</span></span><br><span class="line">my <span class="variable">$pkg_id</span>    = <span class="string">'net.johnmacfarlane.pandoc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find which, if any, volume Pandoc is installed on.</span></span><br><span class="line">my <span class="variable">$volume</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># First check /, then other volumes on the box.</span></span><br><span class="line">my <span class="variable">$cur_test</span> = `pkgutil --pkgs=<span class="variable">$pkg_id</span>`;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$cur_test</span> =~ m/<span class="variable">$pkg_id</span>/ ) &#123;</span><br><span class="line">    <span class="variable">$volume</span> = <span class="string">'/'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    opendir( my <span class="variable">$dh</span>, <span class="string">'/Volumes'</span> ) or die <span class="string">"Can't list Volumes: $!\n"</span>;</span><br><span class="line">    foreach my <span class="variable">$dir</span> ( readdir(<span class="variable">$dh</span>) ) &#123;</span><br><span class="line">      next <span class="keyword">if</span> <span class="variable">$dir</span> =~ m/^\./;    <span class="comment"># Skip dotfiles.</span></span><br><span class="line"></span><br><span class="line">      my <span class="variable">$path</span> = File::Spec-&gt;rel2abs( <span class="variable">$dir</span>, <span class="string">'/Volumes'</span> );</span><br><span class="line">      next <span class="keyword">if</span> !( -d <span class="variable">$path</span> );     <span class="comment"># Skip anything that isn't a directory.</span></span><br><span class="line"></span><br><span class="line">      my <span class="variable">$cur_test</span> = `pkgutil --pkgs=<span class="variable">$pkg_id</span> --volume <span class="string">'$path'</span>`;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="variable">$cur_test</span> =~ m/<span class="variable">$pkg_id</span>/ ) &#123;</span><br><span class="line">          <span class="variable">$volume</span> = <span class="variable">$path</span>;</span><br><span class="line">          last;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">die <span class="string">"Pandoc not installed.\n"</span> <span class="keyword">if</span> !( defined(<span class="variable">$volume</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the list of files to remove.</span></span><br><span class="line">my @pkg_files = `pkgutil --volume <span class="string">'$volume'</span> --only-files --files <span class="string">'$pkg_id'</span>`;</span><br><span class="line">@pkg_files = map &#123; chomp; File::Spec-&gt;rel2abs(<span class="variable">$_</span>, <span class="variable">$volume</span>) &#125; @pkg_files;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Confirm uninistall with the user.</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"The following files will be deleted:\n\n"</span>;</span><br><span class="line"><span class="built_in">print</span> join(<span class="string">"\n"</span>, @pkg_files);</span><br><span class="line"><span class="built_in">print</span> <span class="string">"\n\n"</span>;</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Do you want to proceed and uninstall pandoc (Y/N)?"</span>;</span><br><span class="line">my <span class="variable">$input</span> = &lt;STDIN&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$input</span> =~ m/^[Yy]/) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Actually remove the files.</span></span><br><span class="line">    foreach my <span class="variable">$file</span> (@pkg_files) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( -e <span class="variable">$file</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( system( <span class="string">'sudo'</span>, <span class="string">'rm'</span>, <span class="variable">$file</span> ) == 0 ) &#123;</span><br><span class="line">                warn <span class="string">"Deleted <span class="variable">$file</span>\n"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                warn <span class="string">"Unable to delete <span class="variable">$file</span>: $?\n"</span>;</span><br><span class="line">                die <span class="string">"Aborting Uninstall.\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">            warn <span class="string">"File <span class="variable">$file</span> does not exist.  Skipping.\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Clean up the install.</span></span><br><span class="line">    <span class="keyword">if</span> (system(<span class="string">'sudo'</span>, <span class="string">'pkgutil'</span>, <span class="string">'--forget'</span>, <span class="variable">$pkg_id</span>, <span class="string">'--volume'</span>, <span class="variable">$volume</span>) != 0) &#123;</span><br><span class="line">        die <span class="string">"Unable to clean up install: $?\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span> <span class="string">"OK, aborting uninstall.\n"</span>;</span><br><span class="line">   <span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">"Pandoc has been successfully uninstalled.\n"</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>

<h1 id="在uninstall-pandoc-pl目录下运行"><a href="#在uninstall-pandoc-pl目录下运行" class="headerlink" title="在uninstall-pandoc.pl目录下运行"></a>在uninstall-pandoc.pl目录下运行</h1><blockquote>
<p>perl uninstall-pandoc.pl</p>
</blockquote>
<h1 id="附：官方链接和截图"><a href="#附：官方链接和截图" class="headerlink" title="附：官方链接和截图"></a>附：官方链接和截图</h1><p>官方链接：<a href="http://pandoc.org/installing.html#macos" target="_blank" rel="noopener">http://pandoc.org/installing.html#macos</a></p>
<p>截图：<br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20180928095031.png"></p>
]]></content>
      <tags>
        <tag>MAC</tag>
        <tag>卸载</tag>
        <tag>Pandoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Modeling：建模的意义、方法和步骤</title>
    <url>/2019/06/13/Modeling%EF%BC%9A%E5%BB%BA%E6%A8%A1%E7%9A%84%E6%84%8F%E4%B9%89%E3%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<pre><code>建模就是建立模型，就是为了理解事物而对事物做出的一种抽象，是对事物的一种无歧义的书面描述。建立系统模型的过程，又称模型化。建模是研究系统的重要手段和前提。凡是用模型描述系统的因果关系或相互关系的过程都属于建模。因描述的关系各异，所以实现这一过程的手段和方法也是多种多样的。可以通过对系统本身运动规律的分析，根据事物的机理来建模;也可以通过对系统的实验或统计数据的处理，并根据关于系统的已有的知识和经验来建模。还可以同时使用几种方法。</code></pre>
<h1 id="建模的意义"><a href="#建模的意义" class="headerlink" title="建模的意义"></a>建模的意义</h1><p>系统建模主要用于三个方面。</p>
<ul>
<li>分析和设计实际系统。例如工程界在分析设计一个新系统时，通常先进行数学仿真和物理仿真实验，最后再到现场作实物实验。数学仿真比物理仿真简单、易行。用数学仿真来分析和设计一个实际系统时，必须有一个描述系统特征的模型。对于许多复杂的工业控制过程，建模往往是最关键和最困难的任务。对社会和经济系统的定性或定量研究也是从建模着手的。例如在人口控制论中，建立各种类型的人口模型，改变模型中的某些参量，可以分析研究人口政策对于人口发展的影响。</li>
<li>预测或预报实际系统的某些状态的未来发展趋势。预测或预报基于事物发展过程的连贯性。例如根据以往的测量数据建立气象变化的数学模型，用于预报未来的气象。</li>
<li>对系统实行最优控制。运用控制理论设计控制器或最优控制律的关键或前提是有一个能表征系统特征的数学模型。在建模的基础上，再根据极大值原理、动态规划、反馈、解耦、极点配置、自组织、自适应和智能控制等方法，设计各种各样的控制器或控制律。 系统建模主要用于3个方面对于同一个实际系统，人们可以根据不同的用途和目的建立不同的模型。但建立的任何模型都只是实际系统原型的简化，因为既不可能也没必要把实际系统的所有细节都列举出来。如果在简化模型中能保留系统原型的一些本质特征，那么就可认为模型与系统原型是相似的，是可以用来描述原系统的。因此，实际建模时，必须在模型的简化与分析结果的准确性之间作出适当的折中，这常是建模遵循的一条原则。</li>
</ul>
<h1 id="建模的常用方法"><a href="#建模的常用方法" class="headerlink" title="建模的常用方法"></a>建模的常用方法</h1><h2 id="实体建模法"><a href="#实体建模法" class="headerlink" title="实体建模法"></a>实体建模法</h2><p>实体是现实世界中存在的事物或发生的事件，是现实世界中任何可识别、可区分的事物。实体可以是人，可以是物，也可以是发生的某件事，比如一场篮球比赛。每一个实体都必须具备一定的特征，用来区分一个个实体，这些特征称为属性，每个实体可以用若干个属性来刻画，每个属性又有一定的取值类型和取值范围，属性是变量，其取值范围是属性的值域。实体建模法是根据客观世界中的一个个实体，以及实体之间的关系，在数据建模的过程中引入这种区分方法，将整个业务分成一个个实体，从而建立数据模型。实体建模可以比较容易的实现模型的划分，抽象出具体的业务概念，创建符合自己需要的数据库模型。实体建模是对客观世界的抽象，因此该方法建立的模型具有一定的局限性，适合于特定的领域。</p>
<h2 id="维度建模法"><a href="#维度建模法" class="headerlink" title="维度建模法"></a>维度建模法</h2><p>维度在数学上指独立参数的数据，在数据分析领域，是指描述事物的角度和方面，是数据库当中，描述某一事物的方法和属性的数目。维度建模就是针对给定的事物，使用不同的描述方法，记录该事物在不同分类方法当中每个属性的值。如对人进行维度建模时，按照性别的维度可以分为男和女，按照年龄段可以分为儿童、少年、青年、中年、老年，按照收入水平可以分为3000以下、3000-6000、6000-10000，10000以上等集中类别。</p>
<p>维度建模法的好处是对于某个事物，可以在各个维度进行预处理，进行统计、分类、排序等，提高数据库操作性能，同时维度建模法建立的数据模型比较直观，可以紧密围绕业务需求建立模型，直观的反应业务中的问题，建模方法简单，不需要进行特别的抽象处理。但是维度建模法同时也存在缺点，一是在数据建模时需要进行预处理，存在大量的预处理工作，并且当业务需求发生变化时，需要重新定义维度，重新进行新维度的数据预处理，在数据预处理过程中往往存在大量数据冗余，另外就是在进行维度建模时，仅仅依靠维度进行建模，不能保证数据来源的准确性和一致性，不适合在数据库底层使用。</p>
<h2 id="范式建模法"><a href="#范式建模法" class="headerlink" title="范式建模法"></a>范式建模法</h2><p>范式就是规则，是符合某一级别关系模式的集合，构造数据库时必须遵循一定的规则。关系数据库中的关系必须满足一定的规则，即满足不同的范式。</p>
<p>范式建模法是将原始数据信息根据一定的数据结构和转换模型，分解、转化为规范的格式，使数据遵守一定的约束条件，每一个数据项所表达的意思明确，不产生歧义，同时各条数据之间相互独立，不存在依赖关系。</p>
<h1 id="数学建模的步骤"><a href="#数学建模的步骤" class="headerlink" title="数学建模的步骤"></a>数学建模的步骤</h1><p>五步方法顾名思义，通过五个步骤完成用数学模型解决实际问题。它包含以下五个步骤：</p>
<ol>
<li>第一步，提出问题<ul>
<li>列出问题中涉及到的变量，包括适当的单位</li>
<li>注意不要混淆了变量和常量</li>
<li>列出对变量所做的全部假设，包括等式和不等式</li>
<li>检查单位从而保证假设是有意义的</li>
<li>用准确的数学表达式给出问题的目标</li>
</ul>
</li>
<li>第二步，选择建模方法<ul>
<li>选择解决问题的一个一般的求解方法</li>
<li>一般地，这一步需要有一定的数学建模经验和技巧。同时需要熟悉相关的文献</li>
</ul>
</li>
<li>第三步，推导模型的公式<ul>
<li>将第一步中得到的问题重新表达成第二步选定的建模方法所需要的形式</li>
<li>确保第一步中的变量名与第二步的一致</li>
<li>记下任何补充假设，这些假设是为了使第一步中描述的问题与第二步中选定的数学结构相适应而做出的</li>
</ul>
</li>
<li>第四步，求解模型<ul>
<li>将第二步中所选方法应用于第三步得到的表达式</li>
<li>注意数学推导，确保推导过程无误且结果有意义</li>
<li>采用适当的方法扩大解决问题的范围并减少计算错误</li>
</ul>
</li>
<li>第五步，回答问题<ul>
<li>用非技术性的语言将第四步的结果重新表述</li>
<li>避免数学符号和术语</li>
</ul>
</li>
</ol>
<blockquote>
<p>reference:<br><a href="https://baike.baidu.com/item/%E5%BB%BA%E6%A8%A1/814831?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/建模/814831?fr=aladdin</a><br><a href="https://blog.csdn.net/qq_27123591/article/details/82223552" target="_blank" rel="noopener">https://blog.csdn.net/qq_27123591/article/details/82223552</a><br><a href="https://blog.csdn.net/hebi123s/article/details/84566377" target="_blank" rel="noopener">https://blog.csdn.net/hebi123s/article/details/84566377</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Modeling</category>
      </categories>
      <tags>
        <tag>建模</tag>
        <tag>Modeling</tag>
      </tags>
  </entry>
  <entry>
    <title>ModuleNotFoundError: No module named &#39;execjs&#39;</title>
    <url>/2019/12/31/ModuleNotFoundError-No-module-named-execjs/</url>
    <content><![CDATA[<p>Just use:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pip install PyExecJS</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pip3 install PyExecJS</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>常见问题</category>
        <category>Python常见问题</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js教程:一张图就够了</title>
    <url>/2020/10/13/Node-js%E6%95%99%E7%A8%8B-%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<blockquote>
<p>reference:<br><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-tutorial.html</a></p>
</blockquote>
<p><a href="/assets/files/Node.js.xmind">下载Node.js.xmind</a></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/Node.js.png" alt="Node.js.xmind"></p>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python]通过threading开启多线程</title>
    <url>/2018/08/09/Python-python%E9%80%9A%E8%BF%87threading%E5%BC%80%E5%90%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure>

<h1 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h1><p>Thread(group=None, target=None, name=None, args=(), kwargs={}) </p>
<ul>
<li>group: 线程组，目前还没有实现，库引用中提示必须是None； </li>
<li>target: 要执行的方法； </li>
<li>name: 线程名； </li>
<li>args/kwargs: 要传入方法的参数。</li>
</ul>
<h1 id="实例方法："><a href="#实例方法：" class="headerlink" title="实例方法："></a>实例方法：</h1><ul>
<li>isAlive(): 返回线程是否在运行。正在运行指启动后、终止前。 </li>
<li>get/setName(name): 获取/设置线程名。 </li>
<li>start():  线程准备就绪，等待CPU调度</li>
<li>is/setDaemon(bool): 获取/设置是后台线程（默认前台线程（False））。（在start之前设置）<ul>
<li>如果是后台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程不论成功与否，主线程和后台线程均停止</li>
<li>如果是前台线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，程序停止</li>
</ul>
</li>
<li>start(): 启动线程。 </li>
<li>join([timeout]): 阻塞当前上下文环境的线程，直到调用此方法的线程终止或到达指定的timeout（可选参数）。</li>
</ul>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split items and run function through n threads</span></span><br><span class="line"><span class="comment"># func形如func(arg_list[0], ..., arg_list[n], items),run_through_threads 可以把items分为num份分配给num个线程运行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_through_threads</span><span class="params">(func, arg_list, items, num=<span class="number">4</span>)</span>:</span></span><br><span class="line">    threads = []</span><br><span class="line">    item_len = len(items)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        threads.append(threading.Thread(target=func, args=(*arg_list, items[int(i*item_len/num):int((i+<span class="number">1</span>)*item_len/num)])))</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Threading</tag>
        <tag>多线程</tag>
        <tag>Python入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入门：pickle模块简介</title>
    <url>/2017/04/24/Python%E5%85%A5%E9%97%A8%EF%BC%9Apickle%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>这篇文章介绍了何为pickle以及pickle模块的简单使用方法，即如何使用pickle进行存储存储以及数据的提取，关于pickle模块的其他更加详细的介绍可以参看<a href="https://docs.python.org/2/library/pickle.html" target="_blank" rel="noopener">https://docs.python.org/2/library/pickle.html</a></p>
<h2 id="pickle简介"><a href="#pickle简介" class="headerlink" title="pickle简介"></a>pickle简介</h2><p>pickle模块是python中用来持久化对象的一个模块。所谓对对象进行持久化，即将对象的数据类型、存储结构、存储内容等所有信息作为文件保存下来以便下次使用。</p>
<p>就比如说你通过pickle将一个数组保存成了文件，那么当你下次通过pickle将这个文件读取出来的时候，你读取到的依然是一个数组，而不是一个看起来长得像数组的字符串。</p>
<h2 id="用pickle保存对象到文件"><a href="#用pickle保存对象到文件" class="headerlink" title="用pickle保存对象到文件"></a>用pickle保存对象到文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入pickle模块</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个名为data1的对象</span></span><br><span class="line">data1 = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开(或创建)一个名为data1.pkl的文件，打开方式为二进制写入(参数‘wb’)</span></span><br><span class="line">file_to_save = open(<span class="string">"data1.pkl"</span>, <span class="string">"wb"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过pickle模块中的dump函数将data1保存到data1.pkl文件中。</span></span><br><span class="line"><span class="comment">#第一个参数是要保存的对象名</span></span><br><span class="line"><span class="comment">#第二个参数是写入到的类文件对象file。file必须有write()接口， file可以是一个以'w'方式打开的文件或者一个StringIO对象或者其他任何实现write()接口的对象。如果protocol&gt;=1，文件对象需要是二进制模式打开的。</span></span><br><span class="line"><span class="comment">#第三个参数为序列化使用的协议版本，0：ASCII协议，所序列化的对象使用可打印的ASCII码表示；1：老式的二进制协议；2：2.3版本引入的新二进制协议，较以前的更高效；-1：使用当前版本支持的最高协议。其中协议0和1兼容老版本的python。protocol默认值为0。</span></span><br><span class="line">pickle.dump(data1, file_to_save, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭文件对象</span></span><br><span class="line">file_to_save.close()</span><br></pre></td></tr></table></figure>

<h2 id="用pickle从文件中读取对象"><a href="#用pickle从文件中读取对象" class="headerlink" title="用pickle从文件中读取对象"></a>用pickle从文件中读取对象</h2><p>(请接着上一个脚本运行)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入pickle模块</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开一个名为data1.pkl的文件，打开方式为二进制读取(参数‘rb’)</span></span><br><span class="line">file_to_read = open(<span class="string">'data1.pkl'</span>, <span class="string">'rb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过pickle的load函数读取data1.pkl中的对象，并赋值给data2</span></span><br><span class="line">data2 = pickle.load(file_to_read)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印data2</span></span><br><span class="line"><span class="keyword">print</span> data2</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭文件对象</span></span><br><span class="line">file_to_read.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python入门</tag>
        <tag>Pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python]对dict字典进行排序</title>
    <url>/2018/08/08/Python-%E5%AF%B9dict%E5%AD%97%E5%85%B8%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义字典</span></span><br><span class="line">dict = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'d'</span>:<span class="number">4</span>, <span class="string">'e'</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">#根据key进行排序</span></span><br><span class="line">dict_sorted_by_key = sorted(dict.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#根据key进行反向排序</span></span><br><span class="line">dict_sorted_by_key_reverse = sorted(dict.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#根据value进行排序</span></span><br><span class="line">dict_sorted_by_value = sorted(dict.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#根据value进行反向排序</span></span><br><span class="line">dict_sorted_by_value_reverse = sorted(dict.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>

<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20180808100756.png"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Python入门</tag>
        <tag>Dict</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>React教程:一张图就够了</title>
    <url>/2020/10/13/React%E6%95%99%E7%A8%8B-%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<blockquote>
<p>reference:<br><a href="https://www.runoob.com/react/react-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/react/react-tutorial.html</a></p>
</blockquote>
<p><a href="/assets/files/React.xmind">下载React.xmind</a></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/React.png" alt="React.xmind"></p>
]]></content>
      <categories>
        <category>Learn X in Y minutes</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes] A Service Computing Manifesto: The Next Ten Years</title>
    <url>/2019/05/22/Reading-Notes-A-Service-Computing-Manifesto-The-Next-Ten-Years/</url>
    <content><![CDATA[<h1 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h1><p>这份宣言的主要内容</p>
<ul>
<li>确定阻碍现实世界中服务计算发展和潜在实现的主要障碍</li>
<li>提出服务计算的研究方向</li>
<li>制定路线图，使服务计算领域能够重新定义自己和 成为社会和经济活动的强大引擎之一。</li>
</ul>
<p>推荐关注于4个主要研究方向</p>
<ol>
<li>服务设计 service design</li>
<li>服务集成 service composition</li>
<li>基于众包的信誉 crowdsourcing based reputation</li>
<li>物联网 the Internet of Things</li>
</ol>
<h1 id="BACKGROUND"><a href="#BACKGROUND" class="headerlink" title="BACKGROUND"></a>BACKGROUND</h1><h2 id="服务计算的定义"><a href="#服务计算的定义" class="headerlink" title="服务计算的定义"></a>服务计算的定义</h2><p>我们将服务计算（或者称为面向服务的计算）定义为：探索或开发为服务提供广泛支持的计算抽象、计算架构、计算技术和计算工具的学科。</p>
<blockquote>
<p>We define service computing (alternatively termed service- oriented computing) as the discipline that seeks to develop computational abstractions, architectures, techniques, and tools to support services broadly.</p>
</blockquote>
<h2 id="服务计算的来源"><a href="#服务计算的来源" class="headerlink" title="服务计算的来源"></a>服务计算的来源</h2><p>在计算的早期阶段，面临的挑战是以机器可读的格式表示信息，该格式由位和字节组成，称为数据。 随着时间的推移，人们对用意义补充数据产生了浓厚的兴趣，从而将其转化为信息。随着计算技术的进一步发展，人们开始在信息中加入推理，从而产生了知识。最近，对更高抽象级别的需求导致了向知识添加行动，从而产生服务的概念。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190522220858.png"></p>
<h2 id="服务计算的目标"><a href="#服务计算的目标" class="headerlink" title="服务计算的目标"></a>服务计算的目标</h2><p>服务计算的最终目标是弥合IT和业务服务之间的差距，使IT服务能够更有效地运行业务服务。</p>
<blockquote>
<p>The ultimate goal of service computing is to bridge the gap between IT and business services to en- able IT services to run business services more effectively and efficiently.</p>
</blockquote>
<p>服务计算的目标是利用服务范例的功能和简单性及其功能和非功能组件来构建模块化软件应用程序，并为选择和组合服务提供更高级别的抽象，从而将其提升到第一类对象状态。</p>
<h2 id="服务计算的相关机构和会议"><a href="#服务计算的相关机构和会议" class="headerlink" title="服务计算的相关机构和会议"></a>服务计算的相关机构和会议</h2><p>为了自动化组合服务资源，以根据用户的目标和偏好提供定制的IT服务，标准化机构，如万维网联盟（W3C）和结构化信息标准促进组织（OASIS），已经为实施服务系统领导了规范和标准化工作。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190522221342.png"></p>
<h2 id="服务计算的挑战"><a href="#服务计算的挑战" class="headerlink" title="服务计算的挑战"></a>服务计算的挑战</h2><p>现有的Web服务标准和技术无法为关键新兴领域的计算需求提供足够的支持，包括移动计算，云计算，大数据和社交计算。这些是<a href="http://www.idc.com/prodserv/3rd-platform/" target="_blank" rel="noopener">IDC</a>命名的第三平台的四项关键技术，目前正在影响全球业务的格局。</p>
<h2 id="服务计算和SOA的区别"><a href="#服务计算和SOA的区别" class="headerlink" title="服务计算和SOA的区别"></a>服务计算和SOA的区别</h2><p>面向服务的体系结构（SOA）是一种独立于技术的框架，用于定义，注册和调用服务。</p>
<p>服务计算比SOA更广泛，包括对较低级别的服务数据管理和分析的业务流程建模，管理和分析的上层。</p>
<p>SOA已成为服务计算的核心概念，并为实现服务计算提供了基础技术。</p>
<h2 id="服务计算和传统计算的区别"><a href="#服务计算和传统计算的区别" class="headerlink" title="服务计算和传统计算的区别"></a>服务计算和传统计算的区别</h2><ol>
<li>服务计算的驱动因素是将服务计算与技术分离，以实现面向服务的系统，充分利用服务计算的承诺和期望</li>
<li>这项工作强调服务计算对计算新兴趋势的贡献和影响</li>
</ol>
<h1 id="CHALLENGES-IN-SERVICE-COMPUTING-RESEARCH"><a href="#CHALLENGES-IN-SERVICE-COMPUTING-RESEARCH" class="headerlink" title="CHALLENGES IN SERVICE COMPUTING RESEARCH"></a>CHALLENGES IN SERVICE COMPUTING RESEARCH</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190522222706.png"></p>
<p>当前的服务计算研究主要集中在七个问题领域：架构，规范语言，协议，框架，生命周期，服务质量，以及跨越自治企业边界建立信任和声誉。</p>
<blockquote>
<p>current service computing research focuses mostly on seven problem areas: architecture, specification languages, protocols, frameworks, lifecycle, quality of service, and the establishment of trust and reputation across the boundaries of autonomous enterprises.</p>
</blockquote>
<p>服务计算中经常被忽视的战略挑战是分析为什么服务计算尚未在现实世界中发挥其全部潜力，以及需要采取哪些措施来改变这一点。</p>
<p>一项重大挑战是实现在不同平台上工作的多个组织的无缝合作，以满足消费者的需求。</p>
<p>我们确定了服务计算中的四个新兴研究挑战：服务设计，服务组合，基于群体的声誉和物联网（IoT）。</p>
<blockquote>
<p>We identify four emerging research challenges in service computing: Service Design, Service Composition, Crowdsourcing-Based Reputation, and the Internet of Things (IoT).</p>
</blockquote>
<h2 id="Challenges-in-Service-Design"><a href="#Challenges-in-Service-Design" class="headerlink" title="Challenges in Service Design"></a>Challenges in Service Design</h2><p>服务设计是关于对服务性质及其关系的正式理解的映射。</p>
<p>现有设计方法：</p>
<ol>
<li>通常不会考虑到服务系统固有地将自治部件集合在一起这一事实</li>
<li>没有任何全面的理论框架来定义和分析Web上复杂的服务系统</li>
</ol>
<h2 id="Challenges-in-Service-Composition"><a href="#Challenges-in-Service-Composition" class="headerlink" title="Challenges in Service Composition"></a>Challenges in Service Composition</h2><p>由于需要对大规模的Web和云服务进行组合，有以下几个挑战：</p>
<ol>
<li>准确有效地从这些大型存储库中搜索服务正成为一个至关重要的挑战</li>
<li>现有服务选择，组合和推荐方法都是在假设静态数据环境下运行的，这是不充分的</li>
<li>从众多不断变化的设备和服务中选择和组合服务，以实时和上下文感知的方式满足用户需求</li>
<li>基于社会关系的服务构成构成了根本的严峻挑战</li>
</ol>
<h2 id="Challenges-in-Crowdsourcing-Based-Reputation"><a href="#Challenges-in-Crowdsourcing-Based-Reputation" class="headerlink" title="Challenges in Crowdsourcing-Based Reputation"></a>Challenges in Crowdsourcing-Based Reputation</h2><ol>
<li>众包的质量。鉴于声誉受到若干相关因素的影响，因此强烈需要预测众包声誉的结果。目前尚不清楚这些因素如何影响众包的质量。</li>
<li>众包贡献者的可信度。一些服务用户的意见可能是不公平的，甚至是对特定服务产品的恶意。</li>
<li>测试平台。对设计适当的评估指标以比较服务的信任和信誉模型存在强烈需求。</li>
</ol>
<h2 id="Challenges-in-the-IoT"><a href="#Challenges-in-the-IoT" class="headerlink" title="Challenges in the IoT"></a>Challenges in the IoT</h2><p>物联网（IoT）是一个新兴和有前景的领域，它建议将每个有形实体转变为互联网上的一个节点。</p>
<p>物联网提出了两个基本挑战：（1）与事物的沟通（2）事物的管理。</p>
<p>一个挑战是资源有限，传统标准（如SOAP和BPEL）太庞大，无法应用于物联网。 此外，由于架构差异，现有的服务组合模型不能直接用于物联网互操作。与单类型Web服务组件模型（即，服务）相反，IoT组件模型是异构的和多层的（例如，设备，数据，服务和组织）。与传统设置相比，组件的所需功能更具动态性和上下文感知能力。</p>
<p>与服务计算相关的基本物联网挑战包括：</p>
<ol>
<li>持续维护物联网设备的网络个性和环境。 特别是，物联网事物需要具有反映其物理空间的Web身份和Web表示（例如，Web代理）。 他们还需要在社交，环境，以用户为中心和应用程序环境中进行连接和通信，并且需要维护和管理此类上下文。</li>
<li>不断发现，集成和（重新）使用物联网事物及其数据。 具体而言，物联网环境是一个联合环境，其中事物及其数据，云服务和IT服务（例如，用于数据分析和可视化）通常由具有不同接口的独立提供商以及业务，成本提供。 和QoS模型。 为了提供新的互联网规模的服务，物联网必须（重新）使用他人部署的物联网和其他人为自己的目的收集的数据。</li>
</ol>
<h1 id="SERVICE-COMPUTING-RESEARCH-ROADMAP"><a href="#SERVICE-COMPUTING-RESEARCH-ROADMAP" class="headerlink" title="SERVICE COMPUTING RESEARCH ROADMAP"></a>SERVICE COMPUTING RESEARCH ROADMAP</h1><h2 id="Service-Design"><a href="#Service-Design" class="headerlink" title="Service Design"></a>Service Design</h2><p>服务系统的设计应建立在正式的服务模型之上，以便能够有效地访问具有不同功能的大型服务空间。</p>
<p>服务模型支持不同服务及其操作之间的依赖关系非常重要。</p>
<p>总之，满足上述要求的正式服务模型将成为通过服务提供高效透明的计算资源访问的中心，这是充分发挥服务计算潜力的关键一步。</p>
<p>特别是，服务的三个关键特征至关重要：功能，行为和质量。 功能由服务提供的操作指定; 行为反映了如何调用服务操作，并由服务操作之间的依赖性约束决定; 质量决定了服务的非功能特性。</p>
<h2 id="Service-Composition"><a href="#Service-Composition" class="headerlink" title="Service Composition"></a>Service Composition</h2><p>几个研究方向：</p>
<ul>
<li>大规模的Web和云服务组合。 服务组合研究应扩展到由纯文本描述的非WSDL描述的服务或服务。</li>
<li>大数据驱动的服务组合。当前大数据研究的一个重要主题是开发在线处理数据的算法和模型</li>
<li>基于社交网络的服务组合。大规模社交网络中的服务选择，推荐和组合应该结合社交网络和复杂的网络分析方法以及信任计算技术。 一个有希望的方向是结合记录服务用户与服务数据的交互的社交网络数据，以检测服务之间的隐藏关系并生成潜在的服务组合。可以通过捕获用户个人判断的社交媒体服务来提取反映用户选择和组合服务的兴趣的特定于域的质量特征</li>
</ul>
<p>云计算环境为部署服务提供了一个有吸引力的选择，因为它提供了潜在的可扩展性和可访问性。 但是，它引入了与以下问题相关的问题：</p>
<ol>
<li>维护 - 资源不受服务提供商的明确控制。</li>
<li>安全性 - 云可能不在服务提供商的企业边界内。</li>
<li>服务级别协议（SLA） - 资源分配是云提供商的责任。 例如，服务可能不可用，不仅是由于服务提供商的更新，还因为云提供商的更新。</li>
</ol>
<h2 id="Crowdsourcing-Based-Reputation"><a href="#Crowdsourcing-Based-Reputation" class="headerlink" title="Crowdsourcing-Based Reputation"></a>Crowdsourcing-Based Reputation</h2><ul>
<li>众包的质量。应进行社会研究，以调查这些利益因素对众包可靠性的影响以及众包贡献者的范围。这两种因素，例如社会关系和个人偏好，可以同时相互影响。 未来的研究应该针对如何模拟两组因素之间的相互关系以及如何将它们整合起来预测它们对众包数据质量的影响。</li>
<li>众包贡献者的可信度。还应探索用于选择具有不同成本和可信赖的众包用户的权衡策略。</li>
</ul>
<h2 id="Internet-of-Things"><a href="#Internet-of-Things" class="headerlink" title="Internet of Things"></a>Internet of Things</h2><p>物联网研究的新方向在于设备发现和集成领域。一个有趣的方向是多跳连接，它利用人与物之间的相互作用来关联物联网事物。</p>
<h1 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h1><p>服务计算拥有光明的未来，支持新兴计算领域的巨大进步，如移动计算，云计算，大数据，社交计算等。 我们在本宣言中提出，服务计算的潜力远远大于迄今为止所取得的成就。 我们为将服务计算提升到创新的新高度铺平了道路。 为了开拓进取，我们做出了一个重要的声明，即，要使服务计算范例取得成功，就需要将其与当时的技术分离开来。 挑战可能很困难，但收益很大，没有理由为什么雄心勃勃的研究议程不会给计算机科学和社会带来巨大的好处。</p>
]]></content>
      <categories>
        <category>Reading Notes</category>
        <category>Service Computing</category>
      </categories>
      <tags>
        <tag>Service Computing</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes]Customer Value Chain Analysis</title>
    <url>/2019/09/27/Reading-Notes-Customer-Value-Chain-Analysis/</url>
    <content><![CDATA[<h1 id="overall"><a href="#overall" class="headerlink" title="overall"></a>overall</h1><p>Customer Value Chain Analysis (CVCA) is an original methodological tool that enables design teams in the product definition phase to comprehensively identify pertinent stakeholders, their relationships with each other, and their role in the product’s life cycle.</p>
<h1 id="method"><a href="#method" class="headerlink" title="method"></a>method</h1><ol>
<li>CVCA Step 1: Determine the business model for the vending machine.</li>
<li>CVCA Step 2: Delineate pertinent parties involved with the vending machine’s life cycle.</li>
<li>CVCA Step 3: Determine how the vending machine’s customers are related to each other.</li>
<li>CVCA Step 4: Identify the value propositions of the vending machine’s customers and define the flows between them.</li>
<li>CVCA Step 5: Analyze the Customer Chain to determine the vending machine’s critical customers and their value propositions. The vending operator and the soft drink bottler (circled) were determined to be the critical customers to the vending machine manufacturer.</li>
</ol>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190927200439.png"></p>
<h1 id="case-study"><a href="#case-study" class="headerlink" title="case study"></a>case study</h1><h2 id="Case-study-1-electrocardiogram-EKG-machine"><a href="#Case-study-1-electrocardiogram-EKG-machine" class="headerlink" title="Case study 1: electrocardiogram (EKG) machine"></a>Case study 1: electrocardiogram (EKG) machine</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190927200555.png"></p>
<h2 id="Case-study-2-pacemaker-alert-system"><a href="#Case-study-2-pacemaker-alert-system" class="headerlink" title="Case study 2: pacemaker alert system"></a>Case study 2: pacemaker alert system</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190927200646.png"></p>
<h2 id="Case-study-3-donor-funded-micro-irrigation-pump"><a href="#Case-study-3-donor-funded-micro-irrigation-pump" class="headerlink" title="Case study 3: donor-funded micro-irrigation pump"></a>Case study 3: donor-funded micro-irrigation pump</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190927200754.png"></p>
]]></content>
      <categories>
        <category>Reading Notes</category>
        <category>Service Computing</category>
      </categories>
      <tags>
        <tag>Service System</tag>
        <tag>Value Chain</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes] Business process management (BPM) standards: a survey</title>
    <url>/2019/04/22/Reading-Notes-Business-process-management-BPM-standards-a-survey/</url>
    <content><![CDATA[<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><h2 id="purpose"><a href="#purpose" class="headerlink" title="purpose"></a>purpose</h2><p>This paper seeks to make sense of the myriad BPM standards, organizing them in a classification framework, and to identify key industry trends.</p>
<h2 id="Design-methodology-approach"><a href="#Design-methodology-approach" class="headerlink" title="Design/methodology/approach"></a>Design/methodology/approach</h2><p>Proposed BPM Standards Classification Framework to list each standard’s distinct features, strengths and weaknesses.</p>
<h2 id="Findings"><a href="#Findings" class="headerlink" title="Findings"></a>Findings</h2><p>An attempt is made to classify BPM languages, standards and notations into four main groups: execution, interchange, graphical, and diagnosis(lack) standards.</p>
<h2 id="Practical-implications"><a href="#Practical-implications" class="headerlink" title="Practical implications"></a>Practical implications</h2><p>Researchers and practitioners may wish to position their work around this review.</p>
<h2 id="Originality-value"><a href="#Originality-value" class="headerlink" title="Originality/value"></a>Originality/value</h2><p>No body did before.</p>
<h2 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h2><p>Process management, Standards, Work flow</p>
<h2 id="Paper-type"><a href="#Paper-type" class="headerlink" title="Paper type"></a>Paper type</h2><p>Literature review</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="The-growth-of-business-process-management"><a href="#The-growth-of-business-process-management" class="headerlink" title="The growth of business process management"></a>The growth of business process management</h2><p>Some factors:</p>
<ul>
<li>the rise in frequency of goods ordered;</li>
<li>the need for fast information transfer;</li>
<li>quick decision making;</li>
<li>the need to adapt to change in demand;</li>
<li>more international competitors; and</li>
<li>demands for shorter cycle times</li>
</ul>
<p>Software tools supporting the management of such operational processes became known as business process management systems (BPMS).</p>
<h2 id="The-proliferation-of-BPM-languages-standards-and-software-systems"><a href="#The-proliferation-of-BPM-languages-standards-and-software-systems" class="headerlink" title="The proliferation of BPM languages, standards and software systems"></a>The proliferation of BPM languages, standards and software systems</h2><p>Naturally, interest in BPM from practitioners and researchers grew rapidly.</p>
<p>Many new BPM terminologies and technologies are often not well defined and understood by many practitioners and researchers using them.New languages and notations proposed often contain duplicating features for similar concepts, and loosely claim to be based on theoretical formalisms such as Pi-calculus and Petri nets. Most of them have also not been validated, especially in a real business and office environment.</p>
<h2 id="Motivation-of-this-paper"><a href="#Motivation-of-this-paper" class="headerlink" title="Motivation of this paper"></a>Motivation of this paper</h2><p>This paper’s goal is to leave the reader with some semblance of order out of a disparate collection of specifications, white papers, journal publications, conference publications and workshop notes to be consolidated as a single paper.</p>
<ul>
<li>discuss and rationalize the terminologies associated with BPM and its standards;</li>
<li>systematically categorize/classify BPM standards;</li>
<li>discuss the current strengths and limitations of each standard;</li>
<li>clarify, the differences of theoretical underpinnings of prominent BPM standards; and</li>
<li>explore the gaps of knowledge of current BPM standards and how these may be bridged.</li>
</ul>
<h1 id="BPM-basics"><a href="#BPM-basics" class="headerlink" title="BPM basics"></a>BPM basics</h1><h2 id="The-BPM-life-cycle"><a href="#The-BPM-life-cycle" class="headerlink" title="The BPM life cycle"></a>The BPM life cycle</h2><table>
<thead>
<tr>
<th align="left">Term</th>
<th align="left">Explanation</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Process design</td>
<td align="left">In this stage, fax- or paper-based as-is business processes are electronically modeled into BPMS. Graphical standards are dominant in this stage.</td>
</tr>
<tr>
<td align="left">System configuration</td>
<td align="left">This stage configures the BPMS and the underlying system infrastructure. This stage is hard to standardize due to the differing IT architectures of different enterprises.</td>
</tr>
<tr>
<td align="left">Process enactment</td>
<td align="left">Electronically modeled business processes are deployed in BPMS engines. Execution standards dominate this stage.</td>
</tr>
<tr>
<td align="left">Diagnosis</td>
<td align="left">Given appropriate analysis and monitoring tools, the BPM analyst can identify and improve on bottlenecks and potential fraudulent loopholes in the business processes. The tools to do this are embodied in diagnosis standards.</td>
</tr>
</tbody></table>
<h2 id="BPM-vs-BPR-vs-WfM"><a href="#BPM-vs-BPR-vs-WfM" class="headerlink" title="BPM vs BPR vs WfM"></a>BPM vs BPR vs WfM</h2><ul>
<li>BPM: Business Process Management</li>
<li>BPR: Business Process Reengineering</li>
<li>WfM: Workflow Management</li>
</ul>
<h3 id="BPM-vs-BPR"><a href="#BPM-vs-BPR" class="headerlink" title="BPM vs BPR"></a>BPM vs BPR</h3><p>BPR calls for a radical obliteration of existing business processes, its descendant BPM is more practical, iterative and incremental in fine-tuning business processes.</p>
<h3 id="BPM-vs-WfM"><a href="#BPM-vs-WfM" class="headerlink" title="BPM vs WfM"></a>BPM vs WfM</h3><ul>
<li>One viewpoint by Gartner research views BPM as a management discipline with WfM supporting it as a technology. </li>
<li>Another viewpoint from academics is that the features stated in WfM according to Georgakopoulos et al. is a subset of BPM defined by van der Aalst et al., with the diagnosis stage of the BPM life cycle as the main difference.</li>
</ul>
<h2 id="BPM-theory-vs-BPM-standards-and-languages-vs-BPMS"><a href="#BPM-theory-vs-BPM-standards-and-languages-vs-BPMS" class="headerlink" title="BPM theory vs BPM standards and languages vs BPMS"></a>BPM theory vs BPM standards and languages vs BPMS</h2><p>BPMS/BPMSs: Business Process Management Suites</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190508215035.png"></p>
<h2 id="BPM-vs-service-oriented-architecture"><a href="#BPM-vs-service-oriented-architecture" class="headerlink" title="BPM vs service oriented architecture"></a>BPM vs service oriented architecture</h2><p>SOA: Service Oriented Architecture</p>
<p>BPM is a process-oriented management discipline aided by IT while SOA is an IT architectural paradigm. </p>
<p>According to Gartner (Hill et al., 2006), BPM “organizes people for greater agility” while SOA “organizes technology for greater agility”.</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190508215950.png"></p>
<h1 id="Categorising-the-BPM-standards"><a href="#Categorising-the-BPM-standards" class="headerlink" title="Categorising the BPM standards"></a>Categorising the BPM standards</h1><p>B2B: business-to-business</p>
<ul>
<li>Graphical standards. This allows users to express business processes and their possible flows and transitions in a diagrammatic way.</li>
<li>Execution standards. It computerizes the deployment and automation of business processes.</li>
<li>Interchange standards. It facilitates portability of data, e.g. the portability of business process designs in different graphical standards across BPMS; different execution standards across disparate BPMS, and the context-less translation of graphical standards to execution standards and vice versa.</li>
<li>Diagnosis standards. It provides administrative and monitoring (such as runtime and post-modeling) capabilities. These standards can identify bottlenecks, audit and query real-time the business processes in a company.</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190508222437.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190508222557.png"></p>
]]></content>
      <tags>
        <tag>Reading Notes</tag>
        <tag>BPM</tag>
        <tag>Survey</tag>
        <tag>Business Process Management</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes] How Should I Slice My Network? A Multi-Service Empirical Evaluation of Resource Sharing Efficiency</title>
    <url>/2020/01/03/Reading-Notes-How-Should-I-Slice-My-Network-A-Multi-Service-Empirical-Evaluation-of-Resource-Sharing-Efficiency/</url>
    <content><![CDATA[<blockquote>
<p><strong>reference:</strong><br><a href="https://e-archivo.uc3m.es/bitstream/handle/10016/27943/how_MOBICOM_2018_ps.pdf?sequence=1" target="_blank" rel="noopener">https://e-archivo.uc3m.es/bitstream/handle/10016/27943/how_MOBICOM_2018_ps.pdf?sequence=1</a><br><strong>author:</strong><br>Cristina Marquez, Marco Gramaglia, Marco Fiore, Alert Banchs, Xavier Costa-Perez<br><strong>Institution:</strong><br>Universidad Carlos III Madrid<br>CNR-IEIIT (Institute of Electronics, Computer and Telecommunication Engineering, the National Research Council of Italy)<br>NEC Laboratories Europe</p>
</blockquote>
<h1 id="FOR-A-QUICK-GLANCE"><a href="#FOR-A-QUICK-GLANCE" class="headerlink" title="FOR A QUICK GLANCE"></a>FOR A QUICK GLANCE</h1><h2 id="What-is-network-slicing-or-background"><a href="#What-is-network-slicing-or-background" class="headerlink" title="What is network slicing or background"></a>What is network slicing or background</h2><p>Network slicing has profound implications on resource management, as it entails an inherent trade-off between: </p>
<p>(i) the need for fully dedicated resources to support service customization, and </p>
<p>(ii) the dynamic resource sharing among services to increase resource efficiency and cost-effectiveness of the system.</p>
<h2 id="Why-study-it-or-what-is-the-problem"><a href="#Why-study-it-or-what-is-the-problem" class="headerlink" title="Why study it or what is the problem"></a>Why study it or what is the problem</h2><p>While the technology needed to support this paradigm is well understood from a system standpoint, its implications in terms of efficiency are still unclear. </p>
<h2 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do"></a>How to do</h2><p>In this paper, we fill such a gap via an empirical study of resource management efficiency in network slicing.</p>
<p>Building on substantial measurement data collected in an operational mobile network </p>
<p>(i) we quantify the efficiency gap introduced by non-reconfigurable allocation strategies of different kinds of resources, from radio access to the core of the network, and </p>
<p>(ii) we quantify the advantages of their dynamic orchestration at different timescales.</p>
<h2 id="As-a-result"><a href="#As-a-result" class="headerlink" title="As a result"></a>As a result</h2><p>Our results provide insights on the achievable efficiency of network slicing architectures, their dimensioning, and their interplay with resource management algorithms.</p>
<h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Current trends in mobile networks point towards a strong diversification of services, which are characterized by increasingly heterogeneous Key Performance Indicator (KPI) and Quality of Service (QoS) requirements.</p>
<p>current mobile network architectures lack the necessary flexibility to meet the ex- treme requirements imposed by such services.</p>
<h2 id="Network-virtualization-and-slicing"><a href="#Network-virtualization-and-slicing" class="headerlink" title="Network virtualization and slicing"></a>Network virtualization and slicing</h2><p>The agenda for 5G networks is to achieve this mainly via network virtualization, which evolves the traditional hardbox paradigm into a cloudified architecture where the once hardware-based network functions are implemented as software Virtual Network Functions (VNFs) running on a general-purpose telco-cloud. Network virtualization enables the deployment of multiple virtual instances of the complete network, named network slices.</p>
<p>Network slicing strategies. Deeper slices (A to E) reserve resources to services across a wider portion of the end-to-end network architecture, but reduce the space for unconstrained resource sharing.</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20191231112013.png"></p>
<h2 id="Network-slicing-and-resource-management"><a href="#Network-slicing-and-resource-management" class="headerlink" title="Network slicing and resource management"></a>Network slicing and resource management</h2><p>When instantiating a slice, an operator needs to allocate sufficient computational and communication resources to its VNFs. In some cases, these resources may be dedicated, be- coming inaccessible to other slices. Alternatively,</p>
<h2 id="Inherent-trade-off"><a href="#Inherent-trade-off" class="headerlink" title="Inherent trade-off"></a>Inherent trade-off</h2><p>(i) service customization, which favours the deployment of specialized slices with tailored functions for each service and, possibly, dedicated and guaranteed resources; </p>
<p>(ii) resource management efficiency, which increases by dynamically shar- ing the resources of the common infrastructure among the different services and slices; and, </p>
<p>(iii) system complexity, resulting from deploying more dynamic resource allocation mechanisms that provide higher efficiency at the cost of em- ploying elaborate operation and maintenance functions.</p>
<h2 id="Contribution-of-this-paper"><a href="#Contribution-of-this-paper" class="headerlink" title="Contribution of this paper"></a>Contribution of this paper</h2><p>From a system standpoint, the technology needed to support the different types of slices is well understood or even already available. </p>
<p>Our aim is to shed light on the trade-offs between customization, efficiency, and complexity in network slicing, by evaluating the impact of resource allocation dynamics at different network points. Based on our analysis, it is thus possible to determine in which cases the gains in efficiency are worth the sacrifice in customization/isolation and/or the extra complexity. Since resource management efficiency in network slicing highly depends on the traffic patterns of different services supported by the various slices, we build on substantial service-level measurement data collected by a major operator in a production mobile network, and: </p>
<p>(i) quantify the price paid in efficiency when suitable algorithms for dynamic resource allocation are not available, and the operator has to resort to physical network duplication; </p>
<p>(ii) evaluate the impact of sharing resources at different<br>locations of the network, including the cloudified core, the virtualized radio access, or the individual antennas; </p>
<p>(iii) outline the benefit of dynamic resource allocation<br>at different timescales, i.e., allowing to reallocate resources across slices with different reconfiguration intervals</p>
<h1 id="NETWORK-SCENARIO-AND-METRICS"><a href="#NETWORK-SCENARIO-AND-METRICS" class="headerlink" title="NETWORK SCENARIO AND METRICS"></a>NETWORK SCENARIO AND METRICS</h1><h2 id="Network-slicing-scenario"><a href="#Network-slicing-scenario" class="headerlink" title="Network slicing scenario"></a>Network slicing scenario</h2><p>The operator owning the infrastructure implements slices $s \in S$ , each dedicated to a different subset of services. Every network level $\ell$ is composed by a set $C_{\ell}$ of network nodes.</p>
<p>model the mobile network architecture as a hierarchy composed by a fixed number of levels ( $\ell=1, \ldots, L$ ) ordered from the most distributed ( $\ell=1$ )  to the most centralized ( $\ell=L$ ) </p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200103163047.png"></p>
<h2 id="Slice-specifications"><a href="#Slice-specifications" class="headerlink" title="Slice specifications"></a>Slice specifications</h2><p>Denote a slice specification as:</p>
<p>$$<br>\mathbb{Z}=(f, w)<br>$$</p>
<p>involves:</p>
<p>(i) Guaranteed time fraction $f$ : the operator engages to guarantee that the traffic demand of the slice is fully serviced during at least a fraction $f \in[0,1]$ of time.</p>
<p>(ii) Averaging window length w: the operator commitment on fraction f above is intended on discrete-time demands of granularity w, with traffic averaged over the disjoint time windows of duration w.</p>
<p>average load over window k covering a time interval of the same name with duration w:</p>
<p>$$<br>\bar{o} _ {c,s} (k)=\frac{1}{w}\int_{k}o_{c, s}(t)\mathrm{d}t<br>$$</p>
<p>the amount of resources allocated to slice s at node c during window k:</p>
<p>$$<br>r_{c, s}^{\mathbb{Z}}(k)<br>$$</p>
<h2 id="Resource-allocation-to-slices"><a href="#Resource-allocation-to-slices" class="headerlink" title="Resource allocation to slices"></a>Resource allocation to slices</h2><p>Let $F _ {s, c, n} ^ {w}$ be the Cumulative Distribution Function (CDF)<br>of the demand for slice s at node c during reconfiguration period k, averaged over windows of length w: then, the minimum $\hat{r} _ {c, s} ^ {\mathbb{Z}} (n)$<br>that satisfies Equation (1) can be computed as $\hat{r} _ {c, s} ^ {\mathbb{Z}} (n)=\left(F_{s, c, n}^{w}\right)^{-1}(f)$ .</p>
<p>$$<br>\mathbb{R} _ {\ell, \tau} ^ {\mathbb{Z}} = \sum _ {s \in \mathcal{S}} \sum _ {\mathcal{C} \in C _ {\ell}} \sum_{n \in \mathcal{T}} \tau \cdot \hat{r} _ {c, s} ^ {\mathbb{Z}} (n)<br>$$</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200103164643.png"></p>
<p>The above equation represents the total amount of resources needed to meet slice specifications, under the possibility of dynamically re-configuring the allocation with periodicity $\tau$ .</p>
<h2 id="Multiplexing-efficiency"><a href="#Multiplexing-efficiency" class="headerlink" title="Multiplexing efficiency"></a>Multiplexing efficiency</h2><p>In perfect sharing, the allocated resources correspond to those required when there is no isolation among different services, hence traffic multiplexing is maximum. Formally,</p>
<p>$$<br>\mathbb{P} _ {\ell, \tau} ^ {\mathbb{Z}} = \sum _ {c \in C_{\ell}} \sum _ {n \in \mathcal{T}} \tau \cdot \hat{r} _ {c} ^ {\mathbb{Z}} (n)<br>$$</p>
<p>Multiplexing efficiency as the ratio between the resources required with network slicing and those needed under perfect sharing:</p>
<p>$$<br>\mathbb{B} _ {\ell, \tau} ^ {\mathbb{Z}} = \mathbb{R} _ {\ell, \tau} ^ {\mathbb{Z}} / \mathbb{P} _ {\ell, \tau} ^ {\mathbb{Z}}<br>$$</p>
<h1 id="CASE-STUDIES"><a href="#CASE-STUDIES" class="headerlink" title="CASE STUDIES"></a>CASE STUDIES</h1><p>Our two reference urban regions are a large metropolis of<br>several millions of inhabitants, and a typical medium-sized city with a population of around 500,000, both situated in Europe. Service-level measurement data was collected in the target areas by a major operator with a national market share of around 30%. We leverage these real-world traffic demands to define network slices. Details are in Section 3.1. </p>
<p>On top of this, we model the hierarchical network infrastructures in the target regions by assuming that the operator deploys level- $\ell$ nodes so as to balance the offered load among them. This is discussed in Section 3.2.</p>
<h1 id="DATA-DRIVEN-EVALUATION"><a href="#DATA-DRIVEN-EVALUATION" class="headerlink" title="DATA-DRIVEN EVALUATION"></a>DATA-DRIVEN EVALUATION</h1><p>We organise our evaluation as follows. First, we investigate worst-case settings where very stringent slice specifications are enforced, and no dynamic reconfiguration of resources is possible (Section 4.1). We then relax these constraints, and assess efficiency as slice specifications are softened (Section 4.2), or in presence of periodic resource orchestration (Section 4.3). Finally, we evaluate the impact of varied slice configurations (Section 4.4), and of a resource assignment accounting for instantaneous traffic demands (Section 4.5).</p>
<h1 id="TAKEAWAYS-AND-PERSPECTIVES"><a href="#TAKEAWAYS-AND-PERSPECTIVES" class="headerlink" title="TAKEAWAYS AND PERSPECTIVES"></a>TAKEAWAYS AND PERSPECTIVES</h1><ol>
<li>Multi-service requires more resources</li>
<li>Traffic direction is a factor</li>
<li>Loose service level agreements may not help</li>
<li>Dynamic resource assignment must also be rapid</li>
<li>Aggregating services is beneficial</li>
<li>Deployment is slightly more efficient than operation</li>
<li>Urban topography has limited impact</li>
<li>There is room for improvement</li>
</ol>
]]></content>
      <categories>
        <category>Reading Notes</category>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>Service Computing</tag>
        <tag>Network Slicing</tag>
        <tag>Resource Management</tag>
        <tag>Network Efficiency</tag>
        <tag>Edge Computing</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes]IoT-Cloud Service Optimization in Next Generation Smart Environments</title>
    <url>/2021/03/15/Reading-Notes-IoT-Cloud-Service-Optimization-in-Next-Generation-Smart-Environments/</url>
    <content><![CDATA[<object data="/Reading-Notes-IoT-Cloud-Service-Optimization-in-Next-Generation-Smart-Environments/IoT-Cloud_Service_Optimization_in_Next_Generation_Smart_Environments.pdf" type="application/pdf" width="100%" height="1000px"></object>]]></content>
      <categories>
        <category>Reading Notes</category>
      </categories>
      <tags>
        <tag>Internet of Things</tag>
        <tag>cloud</tag>
        <tag>edge computing</tag>
        <tag>service optimization</tag>
        <tag>energy efficiency</tag>
        <tag>smart cities</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes] Quality Assessment of Business Process Models based on Thresholds</title>
    <url>/2020/01/04/Reading-Notes-Quality-Assessment-of-Business-Process-Models-based-on-Thresholds/</url>
    <content><![CDATA[<blockquote>
<p><strong>reference:</strong><br><a href="https://www.researchgate.net/profile/Francisco_Ruiz14/publication/220831115_Quality_Assessment_of_Business_Process_Models_Based_on_Thresholds/links/5473100f0cf216f8cfae97f4.pdf" target="_blank" rel="noopener">https://www.researchgate.net/profile/Francisco_Ruiz14/publication/220831115_Quality_Assessment_of_Business_Process_Models_Based_on_Thresholds/links/5473100f0cf216f8cfae97f4.pdf</a><br><strong>author:</strong><br>Laura Sánchez-González, Félix García, Jan Mendling, Francisco Ruiz<br><strong>Institution:</strong><br>Grupo Alarcos, Universidad de Castilla La Mancha<br>Humboldt-Universität zu Berlin</p>
</blockquote>
<h1 id="Background-and-Motivation"><a href="#Background-and-Motivation" class="headerlink" title="Background and Motivation"></a>Background and Motivation</h1><p>Process improvement is recognized as the main benefit of process modelling initiatives. Quality considerations are important when conducting a process modelling project. While the early stage of business process design might not be the most expensive ones, they tend to have the highest impact on the benefits and costs of the implemented business processes. In this context, <strong>quality assurance of the models has become a significant objective.</strong></p>
<h1 id="Quality-from-the-perspective-of-understandability-and-modifiability"><a href="#Quality-from-the-perspective-of-understandability-and-modifiability" class="headerlink" title="Quality from the perspective of understandability and modifiability"></a>Quality from the perspective of understandability and modifiability</h1><p>The aim of our empirical research approach is to validate the connections between an extensive set of metrics (<em>number of nodes, diameter, density, coefficient of connectivity, average gateway degree, maximum gateway degree, separability, sequentiality, depth, gateway mismatch, gateway heterogeneity, cyclicity and concurrency</em>) and the ease with which business process models can be understood (<em>understandability</em>) and modified (<em>modifiability</em>).</p>
<h1 id="null-hypothesis-There-is-no-correlation-between-structural-metrics-and-understandability-and-modifiability"><a href="#null-hypothesis-There-is-no-correlation-between-structural-metrics-and-understandability-and-modifiability" class="headerlink" title="null hypothesis: There is no correlation between structural metrics and understandability and modifiability"></a>null hypothesis: There is no correlation between structural metrics and understandability and modifiability</h1><p>The structural metrics apparently seem to be closely connected with understandability and modifiability.</p>
<ol>
<li><strong>For understandability</strong> these include Number of Nodes, Gateway Mismatch, Depth, Coefficient of Connectivity and Sequentiality. </li>
<li><strong>For modifiability</strong> Gateway Mismatch, Density and Sequentiality showed the best results.</li>
</ol>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200104162021.png"></p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>After analyzing which measures are most useful, it is interesting to know what values of these measures indicate poor quality in models. That means, thresholds values could be used as an alarm of detecting low-quality structures in conceptual models.</p>
<p>The strength of the correlation of structural metrics with different quality aspects clearly shows the potential of these metrics to accurately capture aspects closely connected with actual usage.</p>
]]></content>
      <categories>
        <category>Reading Notes</category>
        <category>Service Computing</category>
      </categories>
      <tags>
        <tag>Service Computing</tag>
        <tag>Quality Assessment</tag>
        <tag>Business Process Model</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes]Service system fundamentals: Work system, value chain, and life cycle</title>
    <url>/2019/09/23/Reading-Notes-Service-system-fundamentals-Work-system-value-chain-and-life-cycle/</url>
    <content><![CDATA[<p>This paper presents three interrelated frameworks as a first attempt to define the fundamentals of service systems.</p>
<ul>
<li>The <strong>work system framework</strong> uses nine basic elements to provide a system-oriented view of any system that performs work within or across organizations. Service systems are work systems.<br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190923165345.png"></li>
<li>The <strong>service value chain framework</strong> augments the work system framework by introducing functions that are associated specifically with services. It presents a two-sided view of service processes based on the common observation that services are typically coproduced by service providers and customers.<br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190923165509.png"></li>
<li>The <strong>work system life cycle model</strong> looks at how work systems (including service systems) change and evolve over time. It treats the life cycle of a system as a set of iterations involving planned and unplanned change.<br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190923165759.png"></li>
</ul>
<p>This paper uses two examples, one largely manual and one highly automated, to illustrate the potential usefulness of the three frameworks, which can be applied together to describe, analyze, and study how service systems are created, how they operate, and how they evolve through a combination of planned and unplanned change.</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190923165943.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190923170026.png"></p>
]]></content>
      <categories>
        <category>Reading Notes</category>
        <category>Service Computing</category>
      </categories>
      <tags>
        <tag>Service System</tag>
        <tag>Value Chain</tag>
      </tags>
  </entry>
  <entry>
    <title>SAT问题，P，NP，NP-complete(NPC)，NP-hard</title>
    <url>/2021/01/17/SAT%E9%97%AE%E9%A2%98%EF%BC%8CP%EF%BC%8CNP%EF%BC%8CNP-complete%EF%BC%8CNP-Hard/</url>
    <content><![CDATA[<h1 id="问题简介"><a href="#问题简介" class="headerlink" title="问题简介"></a>问题简介</h1><p>SAT问题（Boolean Satisfiability Problem）是判断一个以合取范式形式给出的逻辑命题公式是否存在一个真值指派，使得公式为真。<br>SAT 可满足问题是第一个被证明的NP问题（就是能在多项式时间验证答案正确与否的问题）</p>
<p>解决方法：</p>
<ol>
<li>完备方法：枚举法、贪婪算法、局部搜索法等</li>
<li>不完备方法：各类启发式算法，如演化算法、退火算法、蚁群算法等</li>
</ol>
<p>P问题：在多项式时间内能够求解，是一类可以通过确定性图灵机在多项式时间(Polynomial time)内解决的问题集合。</p>
<p>NP问题：在多项式时间里能够验证是否有解，可以通过非确定性图灵机(Non-deterministic Turing Machine)在多项式时间(Polynomial time)内解决的决策问题集合。</p>
<blockquote>
<p>NOTE：P是NP的子集，也就是说任何可以被图灵机在多项式时间内解决的问题都可以被非确定性的图灵机解决。</p>
</blockquote>
<p>如果一个决策问题 L 是 NP-complete的，那么L具备以下两个性质：</p>
<ol>
<li>L  是 NP（给定一个解决NP-complete的方案(solution，感兴趣的读者可以思考一下solution 和 answer的区别)，可以很快验证是否可行，但不存在已知高效的方案 。）</li>
<li>NP里的任何问题可以在多项式时间内转为 L。</li>
</ol>
<p>而NP-hard只需要具备NP-complete的第二个性质，因此NP-complete是NP-hard的子集。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20210117221738.png"></p>
<h1 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h1><p>研究中遇到的大部分问题都是NPC问题，选择的方法可以视问题的输入规模而定：</p>
<ol>
<li>规模小：搜索法，利用搜索策略在指数时间内求解问题</li>
<li>规模大：随机算法，在多项式时间内“高概率”地精确求解问题；近似算法，也可以考虑在多项式时间内求得问题的一个近似解</li>
</ol>
<blockquote>
<p>reference:<br><a href="https://www.cnblogs.com/sancyun/p/4250360.html" target="_blank" rel="noopener">https://www.cnblogs.com/sancyun/p/4250360.html</a><br><a href="https://baike.baidu.com/item/%E5%B8%83%E5%B0%94%E5%8F%AF%E6%BB%A1%E8%B6%B3%E6%80%A7%E9%97%AE%E9%A2%98/4715567?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/布尔可满足性问题/4715567?fr=aladdin</a><br><a href="https://blog.csdn.net/zhushiq1234/article/details/79484280" target="_blank" rel="noopener">https://blog.csdn.net/zhushiq1234/article/details/79484280</a><br><a href="https://en.wikipedia.org/wiki/NP_(complexity)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/NP_(complexity)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>SAT</tag>
        <tag>P</tag>
        <tag>NP</tag>
        <tag>NP-complete</tag>
        <tag>NP-hard</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语句命令执行顺序</title>
    <url>/2019/11/06/SQL%E8%AF%AD%E5%8F%A5%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<div id="flowchart-0" class="flow-chart"></div><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">op1=>operation: from + join
op2=>operation: where
op3=>operation: group by
op4=>operation: having
op5=>operation: select
op6=>operation: order by
op7=>operation: limit
op1->op2->op3->op4->op5->op6->op7</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Trick]-bash: tensorboard: 未找到命令</title>
    <url>/2018/09/06/Trick-bash-tensorboard-%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>tensorboard命令不在环境变量中</p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>找到tensorboard脚本路径，然后运行</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 /home/USERNAME/.<span class="built_in">local</span>/lib/python3.6/site-packages/tensorboard/main.py --logdir=LOGDIR</span><br></pre></td></tr></table></figure>

<p><strong><em>NOTE：</em></strong></p>
<ul>
<li>USERNAME是指用户名称</li>
<li>LOGDIR是指log文件存放的相对或绝对目录</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>trick</tag>
        <tag>tensorboard</tag>
      </tags>
  </entry>
  <entry>
    <title>[Trick]git pull 强制覆盖本地文件</title>
    <url>/2018/07/31/Trick-git-pull-%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch --all </span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>note：出错的话就再试一次，说不定就可以了</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>Trick</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图常用关系</title>
    <url>/2019/12/02/UML%E7%B1%BB%E5%9B%BE%E5%B8%B8%E7%94%A8%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20191202144401.png"></p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><table>
<thead>
<tr>
<th align="left">关系名称</th>
<th align="left">说明</th>
<th align="left">图形</th>
</tr>
</thead>
<tbody><tr>
<td align="left">泛化（Generalization）</td>
<td align="left">是一种继承关系, 表示一般与特殊的关系, 它指定了子类如何特化父类的所有特征和行为.</td>
<td align="left">带三角箭头的实线，箭头指向父类</td>
</tr>
<tr>
<td align="left">实现（Realization）</td>
<td align="left">是一种类与接口的关系, 表示类是接口所有特征和行为的实现.</td>
<td align="left">带三角箭头的虚线，箭头指向接口</td>
</tr>
<tr>
<td align="left">关联（Association)</td>
<td align="left">是一种拥有的关系, 它使一个类知道另一个类的属性和方法</td>
<td align="left">带普通箭头（或实心三角形箭头）的实心线，指向被拥有者</td>
</tr>
<tr>
<td align="left">聚合（Aggregation）</td>
<td align="left">是整体与部分的关系, 且部分可以离开整体而单独存在</td>
<td align="left">带空心菱形的实心线，菱形指向整体</td>
</tr>
<tr>
<td align="left">组合(Composition)</td>
<td align="left">是整体与部分的关系, 但部分不能离开整体而单独存在</td>
<td align="left">带实心菱形的实线，菱形指向整体</td>
</tr>
<tr>
<td align="left">依赖(Dependency)</td>
<td align="left">是一种使用的关系,  即一个类的实现需要另一个类的协助</td>
<td align="left">带箭头的虚线，指向被使用者</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>UML</tag>
        <tag>类图</tag>
      </tags>
  </entry>
  <entry>
    <title>WS-BPEL 2.0 xml schema 详解(一)</title>
    <url>/2019/03/21/WS-BPEL-2-0-xml-schema-%E8%AF%A6%E8%A7%A3(%E4%B8%80)/</url>
    <content><![CDATA[<p>本系列文章将一行一行的解读wsbpel2.0的源码。</p>
<p>相关xsd语法问题，请参见<a href="https://imonce.github.io/2019/03/15/XSD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%8C%E6%95%B4%E7%89%88/#%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B">XSD学习笔记完整版</a></p>
<p>wsbpel2.0 xsd源码来自：<a href="http://docs.oasis-open.org/wsbpel/2.0/OS/process/executable/ws-bpel_executable.xsd" target="_blank" rel="noopener">ws-bpel_executable.xsd</a></p>
<h1 id="schema声明"><a href="#schema声明" class="headerlink" title="schema声明"></a>schema声明</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://docs.oasis-open.org/wsbpel/2.0/process/executable"</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://docs.oasis-open.org/wsbpel/2.0/process/executable"</span> <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span> <span class="attr">blockDefault</span>=<span class="string">"#all"</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;<span class="name">\xsd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明命名空间<code>http://docs.oasis-open.org/wsbpel/2.0/process/executable</code>，没有前缀。</p>
<p>引入<code>http://www.w3.org/2001/XMLSchema</code>的语素并以xsd为前缀。</p>
<p><code>elementFormDefault=&quot;qualified&quot;</code>表示所有元素都必须加上前缀以表明其命名空间。</p>
<p><code>blockDefault=&quot;#all&quot;</code>表示默认情况下不能通过派生类代替原类型。</p>
<h1 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">Schema for Executable Process for WS-BPEL 2.0 OASIS Standard 11th April, 2007</span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>赠送了一个简单的文档说明。</p>
<h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">"http://www.w3.org/XML/1998/namespace"</span> <span class="attr">schemaLocation</span>=<span class="string">"http://www.w3.org/2001/xml.xsd"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入<code>http://www.w3.org/2001/xml.xsd</code>的xml语素，前缀默认为xml。</p>
<h1 id="element：process"><a href="#element：process" class="headerlink" title="element：process"></a>element：process</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"process"</span> <span class="attr">type</span>=<span class="string">"tProcess"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This is the root element for a WS-BPEL 2.0 process.</span><br><span class="line">		<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BPEL的根元素，此处没有定义任何内容，内部元素属性通过type=”tProcess”引入。</p>
<h1 id="complexType：tProcess"><a href="#complexType：tProcess" class="headerlink" title="complexType：tProcess"></a>complexType：tProcess</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tProcess"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extensions"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"import"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"partnerLinks"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"messageExchanges"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"variables"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"correlationSets"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"faultHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"eventHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"targetNamespace"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"queryLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">default</span>=<span class="string">"urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">default</span>=<span class="string">"urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"suppressJoinFailure"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"exitOnStandardFault"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先是一个名为tExtensibleElements的扩展，先放一下往后看。</p>
<p>一个sequence，包括extensions，import，partnerLinks，messageExchanges，variables，correlationSets，faultHandlers，eventHandlers，还有一个activity的group，这里全部是ref，我们知道大概有些啥就行了，后边肯定会有详细的定义，先往后看吧。</p>
<p>接着是一堆attribute，包括process的</p>
<ul>
<li>名称name</li>
<li>目标命名空间targetNamespace</li>
<li>查询语言queryLanguage，默认是urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0</li>
<li>表达语言expressionLanguage，默认是：urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0</li>
<li>抑制链接失败suppressJoinFailure，默认是否</li>
<li>标准错误退出exitOnStandardFault，默认是否</li>
</ul>
<h1 id="complexType：tExtensibleElement"><a href="#complexType：tExtensibleElement" class="headerlink" title="complexType：tExtensibleElement"></a>complexType：tExtensibleElement</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This type is extended by other component types to allow elements and attributes from other namespaces to be added at the modeled places.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"documentation"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tExtensibleElements这个扩展马上就来了，可以看到，扩展除了0至多个documentation（后边再讲），还有</p>
<ul>
<li>element：来自该元素的父元素的目标命名空间之外的任何命名空间的元素，且即使不能获取该命名空间架构，也不会发生任何错误。</li>
<li>attribute：同上</li>
</ul>
<h1 id="element：documentation"><a href="#element：documentation" class="headerlink" title="element：documentation"></a>element：documentation</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"documentation"</span> <span class="attr">type</span>=<span class="string">"tDocumentation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tDocumentation"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"source"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">ref</span>=<span class="string">"xml:lang"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>documentation中：</p>
<ul>
<li>element：一个字符元素可混合出现的，元素可随意引入，不在此命名空间也没关系</li>
<li>attribute：<ul>
<li>source：通过URI表明来源</li>
<li>xml:lang: 文档语言，如en、CN等</li>
</ul>
</li>
</ul>
<h1 id="group：activity"><a href="#group：activity" class="headerlink" title="group：activity"></a>group：activity</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">name</span>=<span class="string">"activity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">All standard WS-BPEL 2.0 activities in alphabetical order. Basic activities and structured activities. Addtional constraints: - rethrow activity can be used ONLY within a fault handler (i.e. "catch" and "catchAll" element) - compensate or compensateScope activity can be used ONLY within a fault handler, a compensation handler or a termination handler</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"assign"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensateScope"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"empty"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"exit"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extensionActivity"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"flow"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"forEach"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"if"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"invoke"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"pick"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"receive"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"repeatUntil"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"reply"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"rethrow"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"sequence"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"throw"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"validate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"wait"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"while"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义了一个activity的group，用于在其他地方引用，比如说通过tProcess引用到process里边。</p>
<p>一个activity可以是以下元素中的一个，没写到的看后边源码解读好了：</p>
<table>
<thead>
<tr>
<th align="left">基本活动名称</th>
<th align="left">释义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">assign</td>
<td align="left">活动的作用是用新的数据来更新变量的值。Assign活动可以包括任意数量的基本复制操作。</td>
</tr>
<tr>
<td align="left">compensate</td>
<td align="left">通过该活动做一些补偿动作，通常需要和scope联合使用。只能从故障处理程序或另一个补偿处理活动中调用这个活动。补偿处理程序只能被调用一次。</td>
</tr>
<tr>
<td align="left">compensateScope</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">empty</td>
<td align="left">无所事事，比如在一个错误发生后可以不做反应来消除这个错误</td>
</tr>
<tr>
<td align="left">exit</td>
<td align="left">该活动用于立刻终止业务流程实例。所有当前运行的活动必须被立刻终止。不用引用任何终点处理、错误处理或者补偿行为。</td>
</tr>
<tr>
<td align="left">forEach</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">invoke</td>
<td align="left">活动允许业务流程同步或异步调用由合作伙伴提供的服务，服务实现可以是单向或请求-响应操作。Invoke活动使用“partnerLink”来引用伙伴服务。同过“portType”和“operation”指定相应的WSDL接口和操作。</td>
</tr>
<tr>
<td align="left">pick</td>
<td align="left">活动会等待一组相互排斥事件中的一个事件的发生，然后执行与发生的事件相关联的活动。它会阻塞业务流程执行，以等待某一特定的事件发生，比如接收到一个合适的消息或超时警报响起。当其中任何一个事件被触发后，业务流程就会继续执行，pick也随即完成了，不会再等待其他事件的发生。</td>
</tr>
<tr>
<td align="left">receive</td>
<td align="left">活动从流程的外部伙伴那获取数据，并将其保存到流程变量。通常一个Receive是一个流程的初始点，它会阻塞执行直到匹配的消息的到达。</td>
</tr>
<tr>
<td align="left">reply</td>
<td align="left">活动发送消息给伙伴来应答通过receive活动所接收到的消息。receive和reply的组合对应着WSDL portType上定义的一个请求-响应操作。如果receive活动对应着一个单向(one-way)操作，则不能在流程中定义对应的reply活动。</td>
</tr>
<tr>
<td align="left">rethrow</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">throw</td>
<td align="left">提示一个错误，一个故障处理可以处理这样的错误。假如一个错误不被处理的话它最终到达最高层后导致过程的终止</td>
</tr>
<tr>
<td align="left">validate</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">wait</td>
<td align="left">活动会暂停流程执行，等待一段给定的时间或等到某一时刻才继续运行。在WebSphere Process Server 6.0中，开发者可以非常灵活地指定wait中的到期条件，比如等待多少秒，等到特定的一个日期，或是使用内置的日期表现法。也可以使用Java代码来动态指定等待时间。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">结构化活动名称</th>
<th align="left">释义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">extensionActivity</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">flow</td>
<td align="left">可以描述更为复杂的活动执行顺序。我们可以利用flow指定一个或多个并行执行的活动。为了定义任意的控制结构，可以在并行的活动中使用链接。</td>
</tr>
<tr>
<td align="left">if</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">repeatUntil</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">scope</td>
<td align="left">使用这个结构可以将一组活动组织在一起作为一个处理单位。通过这个组织方法多个活动可以使用同一个故障处理、事故处理和补偿处理。通过补偿处理BPEL可以处理长时间的处理。</td>
</tr>
<tr>
<td align="left">sequence</td>
<td align="left">定义一组按顺序先后执行的活动。执行顺序是sequence活动中嵌套活动的先后顺序。当sequence中的最后一个活动完成后，该sequence活动也就完成了。</td>
</tr>
<tr>
<td align="left">while</td>
<td align="left">继承于传统的结构化编程思想，提供了while-do循环结构的支持。它可以包含一个或多个活动。它指定反复执行其内部活动，直到成功条件不被满足为止。在WPS中允许其使用Java代码来描述条件表达式。</td>
</tr>
</tbody></table>
<h1 id="element：extensions"><a href="#element：extensions" class="headerlink" title="element：extensions"></a>element：extensions</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extensions"</span> <span class="attr">type</span>=<span class="string">"tExtensions"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extension"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extension"</span> <span class="attr">type</span>=<span class="string">"tExtension"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtension"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"namespace"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"mustUnderstand"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个extensions由1到多个extension组成。</p>
<p>extension扩展自tExtensibleElements，增加了namespace和mustUnderstand两个属性。</p>
<h1 id="element：import"><a href="#element：import" class="headerlink" title="element：import"></a>element：import</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"import"</span> <span class="attr">type</span>=<span class="string">"tImport"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tImport"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"namespace"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"importType"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BPEL允许import，import元素在tExtensibleElements的基础上，增加namespace、location、importType三个属性，和xsd的import类似。</p>
<h1 id="element：partnerLinks"><a href="#element：partnerLinks" class="headerlink" title="element：partnerLinks"></a>element：partnerLinks</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"partnerLinks"</span> <span class="attr">type</span>=<span class="string">"tPartnerLinks"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tPartnerLinks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"partnerLink"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"tPartnerLink"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tPartnerLink"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLinkType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"myRole"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerRole"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"initializePartnerRole"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，partnerLinks由1到多个partnerLink组成，同时支持tExtensibleElements扩展。</p>
<p>partnerLink在tExtensibleElements的基础上，增加了以下5个属性</p>
<ul>
<li>name</li>
<li>partnerLinkType</li>
<li>myRole</li>
<li>partnerRole</li>
<li>initializaPartnerRole</li>
</ul>
<h1 id="element：messageExchanges"><a href="#element：messageExchanges" class="headerlink" title="element：messageExchanges"></a>element：messageExchanges</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"messageExchanges"</span> <span class="attr">type</span>=<span class="string">"tMessageExchanges"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tMessageExchanges"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"messageExchange"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"tMessageExchange"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tMessageExchange"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，messageExchanges由1到多个messageExchange组成，同时支持tExtensibleElements扩展。</p>
<p>messageExchange在tExtensibleElements的基础上，增加了一个属性</p>
<ul>
<li>name</li>
</ul>
<h1 id="element：variables"><a href="#element：variables" class="headerlink" title="element：variables"></a>element：variables</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"variables"</span> <span class="attr">type</span>=<span class="string">"tVariables"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tVariables"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"variable"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"tVariable"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tVariable"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"from"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"element"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，variables由1到多个variable组成，同时支持tExtensibleElements扩展。</p>
<p>variable在tExtensibleElements的基础上，增加了一个元素</p>
<ul>
<li>from</li>
</ul>
<p>增加了四个属性</p>
<ul>
<li>name</li>
<li>messageType</li>
<li>type</li>
<li>element</li>
</ul>
<h1 id="simpleType：BPELVariableName"><a href="#simpleType：BPELVariableName" class="headerlink" title="simpleType：BPELVariableName"></a>simpleType：BPELVariableName</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"BPELVariableName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:NCName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">"[^\.]+"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bpel变量的一个限制，BPELVariableName需要满足xsd:NCName限制，不能以<code>.</code>开头，且长度大于等于一个字符。</p>
<h1 id="element：correlationSets"><a href="#element：correlationSets" class="headerlink" title="element：correlationSets"></a>element：correlationSets</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlationSets"</span> <span class="attr">type</span>=<span class="string">"tCorrelationSets"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationSets"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"correlationSet"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlationSet"</span> <span class="attr">type</span>=<span class="string">"tCorrelationSet"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationSet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"properties"</span> <span class="attr">type</span>=<span class="string">"QNames"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，correlationSets由1到多个correlationSet组成，同时支持tExtensibleElements扩展。</p>
<p>correlationSet在tExtensibleElements的基础上，增加了2个属性</p>
<ul>
<li>properties</li>
<li>name</li>
</ul>
<h1 id="simpleType：QNames"><a href="#simpleType：QNames" class="headerlink" title="simpleType：QNames"></a>simpleType：QNames</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"QNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:list</span> <span class="attr">itemType</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:minLength</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>QNames就是一个QName的list，最少1个，默认空格分割。</p>
<h1 id="element：faultHandlers"><a href="#element：faultHandlers" class="headerlink" title="element：faultHandlers"></a>element：faultHandlers</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"faultHandlers"</span> <span class="attr">type</span>=<span class="string">"tFaultHandlers"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFaultHandlers"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catch"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catchAll"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>faultHandlers，听名字就知道是干啥的了，同样支持tExtensibleElements扩展，由2种元素的sequence组成：</p>
<ul>
<li>catch</li>
<li>catchAll</li>
</ul>
<h1 id="element：catch"><a href="#element：catch" class="headerlink" title="element：catch"></a>element：catch</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"catch"</span> <span class="attr">type</span>=<span class="string">"tCatch"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate, compensateScope and rethrow.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCatch"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultName"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultMessageType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultElement"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>catch扩展自tActivityContainer，包含4个属性，对catch做了限定：</p>
<ul>
<li>faultName</li>
<li>faultVariable</li>
<li>faultMessageType</li>
<li>faultElement</li>
</ul>
<h1 id="element：catchAll"><a href="#element：catchAll" class="headerlink" title="element：catchAll"></a>element：catchAll</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"catchAll"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate, compensateScope and rethrow.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同于catch，catchAll没有那么多属性（我全都要），就是tActivityContainer本尊，扩展自tExtensibleElements，同时包含一个activity的sequence。</p>
]]></content>
      <tags>
        <tag>BPEL</tag>
        <tag>WSBPEL</tag>
        <tag>ws-bpel</tag>
        <tag>BPEL2.0</tag>
        <tag>Schema</tag>
        <tag>XSD</tag>
      </tags>
  </entry>
  <entry>
    <title>WS-BPEL 2.0 xml schema 详解(三)</title>
    <url>/2019/03/22/WS-BPEL-2-0-xml-schema-%E8%AF%A6%E8%A7%A3-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="element：exit"><a href="#element：exit" class="headerlink" title="element：exit"></a>element：exit</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"exit"</span> <span class="attr">type</span>=<span class="string">"tExit"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<p>和compensate、empty定义是一样的，在语义上和用法上不一样。</p>
<h1 id="element：extensionActivity"><a href="#element：extensionActivity" class="headerlink" title="element：extensionActivity"></a>element：extensionActivity</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extensionActivity"</span> <span class="attr">type</span>=<span class="string">"tExtensionActivity"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensionActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>允许从其他命名空间增加元素当作activity装进来</p>
<h1 id="element：flow"><a href="#element：flow" class="headerlink" title="element：flow"></a>element：flow</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"flow"</span> <span class="attr">type</span>=<span class="string">"tFlow"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFlow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"links"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基于tActivity进行扩展，sequence中包含：</p>
<ul>
<li>element links：可以没有，在后边定义</li>
<li>group activity：1到多个activity的group，算是一个嵌套的定义</li>
</ul>
<h1 id="element：links"><a href="#element：links" class="headerlink" title="element：links"></a>element：links</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"links"</span> <span class="attr">type</span>=<span class="string">"tLinks"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tLinks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"link"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"link"</span> <span class="attr">type</span>=<span class="string">"tLink"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tLink"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>links基于tExtensibleElements进行扩展（辣个男人又回来了），包含1至多个link</p>
<p>link同样基于tExtensibleElements进行扩展，增加了一个属性</p>
<p>name：NCName，这就是link的真相了</p>
<h1 id="element：forEach"><a href="#element：forEach" class="headerlink" title="element：forEach"></a>element：forEach</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"forEach"</span> <span class="attr">type</span>=<span class="string">"tForEach"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tForEach"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"startCounterValue"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"finalCounterValue"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"completionCondition"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"counterName"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"parallel"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"startCounterValue"</span> <span class="attr">type</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"finalCounterValue"</span> <span class="attr">type</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>看名字就知道是一个forEach循环了，element包括</p>
<ul>
<li>startCounterValue</li>
<li>finalCounterValue</li>
<li>completionCondition</li>
<li>scope</li>
</ul>
<p>这四个应该不用解释了吧，for循环要素</p>
<p>然后还有两个属性</p>
<ul>
<li>counterName：计数器的名称</li>
<li>parallel：是否并行</li>
</ul>
<h1 id="element：completionCondition"><a href="#element：completionCondition" class="headerlink" title="element：completionCondition"></a>element：completionCondition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"completionCondition"</span> <span class="attr">type</span>=<span class="string">"tCompletionCondition"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCompletionCondition"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"branches"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个condition由一组branches构成</p>
<h1 id="element：branches"><a href="#element：branches" class="headerlink" title="element：branches"></a>element：branches</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"branches"</span> <span class="attr">type</span>=<span class="string">"tBranches"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tBranches"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"successfulBranchesOnly"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>branches基于tExpression进行扩展，还有一个属性</p>
<ul>
<li>successfulBranchesOnly：默认是no</li>
</ul>
<h1 id="element：if"><a href="#element：if" class="headerlink" title="element：if"></a>element：if</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"if"</span> <span class="attr">type</span>=<span class="string">"tIf"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tIf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"elseif"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"else"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>if也是一类activity，基于tAcitivity进行扩展，sequence中包括</p>
<ul>
<li>condition：element，至少一个</li>
<li>activity：group，至少一个</li>
<li>elseif：element，0到多个</li>
<li>else：element，可以没有</li>
</ul>
<h1 id="element：elseif"><a href="#element：elseif" class="headerlink" title="element：elseif"></a>element：elseif</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"elseif"</span> <span class="attr">type</span>=<span class="string">"tElseif"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tElseif"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"else"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>elseif基于tExtensibleElements扩展，sequence中包括</p>
<ul>
<li>condition：element，数量1</li>
<li>activity：group，数量1</li>
</ul>
<p>Else就直接是tActivityContainer了，condition都不用。</p>
<h1 id="element：invoke"><a href="#element：invoke" class="headerlink" title="element：invoke"></a>element：invoke</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"invoke"</span> <span class="attr">type</span>=<span class="string">"tInvoke"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tInvoke"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the non-invoke activities.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelationsWithPattern"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catch"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catchAll"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensationHandler"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"toParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"inputVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"outputVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>annotation说明就不讲了</p>
<p>基于tActivity扩展，用调用其他 Web 服务，element有6个</p>
<ul>
<li>correlations：本地的元素声明</li>
<li>catch</li>
<li>catchAll</li>
<li>compensationHandler</li>
<li>toParts</li>
<li>fromParts</li>
</ul>
<p>attribute有5个</p>
<ul>
<li>partnerLink</li>
<li>portType</li>
<li>operation</li>
<li>inputVariable</li>
<li>outputVariable</li>
</ul>
<p>感觉看名字就懂了，没啥好讲的</p>
<h1 id="complexType：tCorrelationsWithPattern"><a href="#complexType：tCorrelationsWithPattern" class="headerlink" title="complexType：tCorrelationsWithPattern"></a>complexType：tCorrelationsWithPattern</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationsWithPattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlation needs to be a Local Element Declaration, because there is another correlation element defined for the non-invoke activities.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlation"</span> <span class="attr">type</span>=<span class="string">"tCorrelationWithPattern"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationWithPattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tCorrelation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">type</span>=<span class="string">"tPattern"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tPattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"request"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"response"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"request-response"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一通定义，实际上这个tCorrelationsWithPattern就是1至多个tCorrelationWithPattern</p>
<p>这个tCorrelationWithPattern从tCorrelation进行扩展，增加了属性pattern</p>
<p>这个pattern就是request、response、request-response三选一</p>
<h1 id="element：fromParts"><a href="#element：fromParts" class="headerlink" title="element：fromParts"></a>element：fromParts</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"fromParts"</span> <span class="attr">type</span>=<span class="string">"tFromParts"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFromParts"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromPart"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"fromPart"</span> <span class="attr">type</span>=<span class="string">"tFromPart"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFromPart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"toVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>fromParts扩展自tExtensibleElements，由1到多个fromPart组成</p>
<p>fromPart同样扩展自tExtensibleElements，包含两个attribute</p>
<ul>
<li>part</li>
<li>toVariable</li>
</ul>
<h1 id="element：toParts"><a href="#element：toParts" class="headerlink" title="element：toParts"></a>element：toParts</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"toParts"</span> <span class="attr">type</span>=<span class="string">"tToParts"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tToParts"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"toPart"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"toPart"</span> <span class="attr">type</span>=<span class="string">"tToPart"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tToPart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"fromVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>toParts扩展自tExtensibleElements，由1到多个toPart组成</p>
<p>toPart同样扩展自tExtensibleElements，包含两个attribute</p>
<ul>
<li>part</li>
<li>fromVariable</li>
</ul>
<h1 id="element：pick"><a href="#element：pick" class="headerlink" title="element：pick"></a>element：pick</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"pick"</span> <span class="attr">type</span>=<span class="string">"tPick"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tPick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element onAlarm needs to be a Local Element Declaration, because there is another onAlarm element defined for event handlers.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"onMessage"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onAlarm"</span> <span class="attr">type</span>=<span class="string">"tOnAlarmPick"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"createInstance"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>pick扩展自tActivity</p>
<p>两个属性都在后边定义：</p>
<ul>
<li>onMessage</li>
<li>onAlarm</li>
</ul>
<p>一个属性：</p>
<ul>
<li>createInstance</li>
</ul>
<h1 id="element：onMessage"><a href="#element：onMessage" class="headerlink" title="element：onMessage"></a>element：onMessage</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onMessage"</span> <span class="attr">type</span>=<span class="string">"tOnMessage"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnMessage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tOnMsgCommon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tOnMsgCommon</p>
<p>sequence中是一个activity的group</p>
<h1 id="complexType：tOnAlarmPick"><a href="#complexType：tOnAlarmPick" class="headerlink" title="complexType：tOnAlarmPick"></a>complexType：tOnAlarmPick</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnAlarmPick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"forOrUntilGroup"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tExtensibleElements</p>
<p>sequence中有两个group</p>
<ul>
<li>forOrUntilGroup</li>
<li>activity</li>
</ul>
<p>都是出现一次</p>
<h1 id="element：receive"><a href="#element：receive" class="headerlink" title="element：receive"></a>element：receive</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"receive"</span> <span class="attr">type</span>=<span class="string">"tReceive"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tReceive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelations"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"createInstance"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，用于（接收请求）等待客户端通过发送消息调用业务流程</p>
<p>2个element</p>
<ul>
<li>correlations</li>
<li>fromParts</li>
</ul>
<p>6个attribute</p>
<ul>
<li>partnerLink</li>
<li>portType</li>
<li>operation</li>
<li>variable</li>
<li>createInstance</li>
<li>messageExchange</li>
</ul>
<h1 id="element：repeatUntil"><a href="#element：repeatUntil" class="headerlink" title="element：repeatUntil"></a>element：repeatUntil</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"repeatUntil"</span> <span class="attr">type</span>=<span class="string">"tRepeatUntil"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tRepeatUntil"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity</p>
<p>sequence中包含</p>
<ul>
<li>activity：group，数量为1</li>
<li>condition：element，数量也是1</li>
</ul>
<h1 id="element：reply"><a href="#element：reply" class="headerlink" title="element：reply"></a>element：reply</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"reply"</span> <span class="attr">type</span>=<span class="string">"tReply"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tReply"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelations"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"toParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultName"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，用于生成同步操作的响应</p>
<p>2个element</p>
<ul>
<li>correlations</li>
<li>toParts</li>
</ul>
<p>6个attribute</p>
<ul>
<li>partnerLink</li>
<li>portType</li>
<li>operation</li>
<li>variable</li>
<li>faultName</li>
<li>messageExchange</li>
</ul>
<h1 id="element：rethrow"><a href="#element：rethrow" class="headerlink" title="element：rethrow"></a>element：rethrow</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"rethrow"</span> <span class="attr">type</span>=<span class="string">"tRethrow"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tRethrow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<p>和compensate、empty，exit定义是一样的，就是在语义上和用法上不一样。</p>
<h1 id="element：scope"><a href="#element：scope" class="headerlink" title="element：scope"></a>element：scope</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"scope"</span> <span class="attr">type</span>=<span class="string">"tScope"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tScope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">There is no schema-level default for "exitOnStandardFault" at "scope". Because, it will inherit default from enclosing scope or process.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"partnerLinks"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"messageExchanges"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"variables"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"correlationSets"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"faultHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensationHandler"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"terminationHandler"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"eventHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"isolated"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"exitOnStandardFault"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，用于以分层方式将复杂流程划分为多个组织部分。scope为活动提供了行为上下文。换言之，scope可以为不同的活动（或在 <sequence> 或 <flow>) 等通用的结构化活动下收集的活动集）定义不同的故障处理程序。除了定义故障处理程序以外，scope还可以声明只在作用域中可见的变量。scope还可以定义本地关联集、补偿处理程序和事件处理程序。</flow></sequence></p>
<p>sequence中有：</p>
<ul>
<li>partnerLinks</li>
<li>messageExchanges</li>
<li>variables</li>
<li>correlationSets</li>
<li>faultHandlers</li>
<li>compensationHandler</li>
<li>terminationHandler</li>
<li>eventHandlers</li>
<li>activity</li>
</ul>
<p>还有两个属性  </p>
<ul>
<li>isolated</li>
<li>exitOnStandardFault</li>
</ul>
<h1 id="element：compensationHandler"><a href="#element：compensationHandler" class="headerlink" title="element：compensationHandler"></a>element：compensationHandler</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"compensationHandler"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate and compensateScope.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上就是一个tActivityContainer</p>
<h1 id="element：terminationHandler"><a href="#element：terminationHandler" class="headerlink" title="element：terminationHandler"></a>element：terminationHandler</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"terminationHandler"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate and compensateScope.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上就是一个tActivityContainer</p>
<h1 id="element：sequence"><a href="#element：sequence" class="headerlink" title="element：sequence"></a>element：sequence</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"sequence"</span> <span class="attr">type</span>=<span class="string">"tSequence"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tSequence"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，但是里边还可以装很多的activity的group的序列</p>
<h1 id="element：throw"><a href="#element：throw" class="headerlink" title="element：throw"></a>element：throw</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"throw"</span> <span class="attr">type</span>=<span class="string">"tThrow"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tThrow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultName"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了两个属性</p>
<ul>
<li>faultName</li>
<li>faultVariable</li>
</ul>
<h1 id="element：validate"><a href="#element：validate" class="headerlink" title="element：validate"></a>element：validate</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"validate"</span> <span class="attr">type</span>=<span class="string">"tValidate"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tValidate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variables"</span> <span class="attr">use</span>=<span class="string">"required"</span> <span class="attr">type</span>=<span class="string">"BPELVariableNames"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了1个属性</p>
<ul>
<li>variables：BPELVariableNames</li>
</ul>
<h1 id="simpleType：BPELVariableNames"><a href="#simpleType：BPELVariableNames" class="headerlink" title="simpleType：BPELVariableNames"></a>simpleType：BPELVariableNames</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"BPELVariableNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:list</span> <span class="attr">itemType</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:minLength</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个BPELVariableName的list，默认空格分割，最短一个</p>
<h1 id="element：wait"><a href="#element：wait" class="headerlink" title="element：wait"></a>element：wait</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"wait"</span> <span class="attr">type</span>=<span class="string">"tWait"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tWait"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"for"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"until"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了元素，从for和until中二选一</p>
<h1 id="element：while"><a href="#element：while" class="headerlink" title="element：while"></a>element：while</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"while"</span> <span class="attr">type</span>=<span class="string">"tWhile"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tWhile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了一个sequence，里边有</p>
<ul>
<li>condition</li>
<li>activity</li>
</ul>
<h1 id="complexType：tExpression"><a href="#complexType：tExpression" class="headerlink" title="complexType：tExpression"></a>complexType：tExpression</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExpression"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tExpression的内容基本就是随便写</p>
<p>属性有一个expressionLanguage，然后还可以再增加其他属性</p>
<p>看起来是any，实际上要看expressionLanguage的</p>
<h1 id="complexType：tCondition"><a href="#complexType：tCondition" class="headerlink" title="complexType：tCondition"></a>complexType：tCondition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCondition"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tCondition就是在tExpression的基础上随便写</p>
<h1 id="element：condition"><a href="#element：condition" class="headerlink" title="element：condition"></a>element：condition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"condition"</span> <span class="attr">type</span>=<span class="string">"tBoolean-expr"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tBoolean-expr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>condition也是在tExpression的基础上随便写</p>
<h1 id="complexType：tDuration-expr"><a href="#complexType：tDuration-expr" class="headerlink" title="complexType：tDuration-expr"></a>complexType：tDuration-expr</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tDuration-expr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在tExpression的基础上随便写</p>
<h1 id="complexType：tDeadline-expr"><a href="#complexType：tDeadline-expr" class="headerlink" title="complexType：tDeadline-expr"></a>complexType：tDeadline-expr</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tDeadline-expr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在tExpression的基础上随便写</p>
<h1 id="simpleType：tBoolean"><a href="#simpleType：tBoolean" class="headerlink" title="simpleType：tBoolean"></a>simpleType：tBoolean</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tBoolean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yes or no，二选一</p>
]]></content>
      <tags>
        <tag>BPEL</tag>
        <tag>WSBPEL</tag>
        <tag>ws-bpel</tag>
        <tag>BPEL2.0</tag>
        <tag>Schema</tag>
        <tag>XSD</tag>
      </tags>
  </entry>
  <entry>
    <title>WS-BPEL 2.0 xml schema 详解(二)</title>
    <url>/2019/03/22/WS-BPEL-2-0-xml-schema-%E8%AF%A6%E8%A7%A3-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="element：eventHandlers"><a href="#element：eventHandlers" class="headerlink" title="element：eventHandlers"></a>element：eventHandlers</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"eventHandlers"</span> <span class="attr">type</span>=<span class="string">"tEventHandlers"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tEventHandlers"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element onAlarm needs to be a Local Element Declaration, because there is another onAlarm element defined for the pick activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"onEvent"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onAlarm"</span> <span class="attr">type</span>=<span class="string">"tOnAlarmEvent"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>eventHandlers基于tExtensibleElements扩展，由2种元素的sequence组成：</p>
<ul>
<li>onEvent：见element：onEvent</li>
<li>onAlarm：见complexType：tOnAlarmEvent</li>
</ul>
<h1 id="element：onEvent"><a href="#element：onEvent" class="headerlink" title="element：onEvent"></a>element：onEvent</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onEvent"</span> <span class="attr">type</span>=<span class="string">"tOnEvent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnEvent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tOnMsgCommon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"element"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>onEvent元素基于tOnMsgCommon进行扩展，包含一个element sequence：</p>
<ul>
<li>scope：用于表明作用范围</li>
</ul>
<p>2个attribute：</p>
<ul>
<li>messageType</li>
<li>element</li>
</ul>
<h1 id="complexType：tOnMsgCommon"><a href="#complexType：tOnMsgCommon" class="headerlink" title="complexType：tOnMsgCommon"></a>complexType：tOnMsgCommon</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnMsgCommon"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelations"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tOnMsgCommon这个complexType同样支持tExtensibleElements扩展，包含由两类element组成的sequence：</p>
<ul>
<li>correlations：type为tCorrelations</li>
<li>fromParts</li>
</ul>
<p>同时还引入了5种属性：</p>
<ul>
<li>partnerLink：必填的链接名</li>
<li>portType：选填的端口类型</li>
<li>operation：必填的操作</li>
<li>messageExchange：选填的操作信息</li>
<li>variable：选填的变量</li>
</ul>
<h1 id="complexType：tCorrelations"><a href="#complexType：tCorrelations" class="headerlink" title="complexType：tCorrelations"></a>complexType：tCorrelations</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelations"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlation needs to be a Local Element Declaration, because there is another correlation element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlation"</span> <span class="attr">type</span>=<span class="string">"tCorrelation"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"set"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"initiate"</span> <span class="attr">type</span>=<span class="string">"tInitiate"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tInitiate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"join"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tCorrelations基于tExtensibleElements扩展，由1至多个correlation的sequence组成。</p>
<p>tCorrelation同样基于tExtensibleElements扩展，在此之上还定义了两个属性：</p>
<ul>
<li>set</li>
<li>initiate：yes | join | no</li>
</ul>
<h1 id="complexType：tOnAlarmEvent"><a href="#complexType：tOnAlarmEvent" class="headerlink" title="complexType：tOnAlarmEvent"></a>complexType：tOnAlarmEvent</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnAlarmEvent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"forOrUntilGroup"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"repeatEvery"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"repeatEvery"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tOnAlarmEvent基于tExtensibleElements扩展，由1个group：forOrUntilGroup 和 0或1个element：repeatEvery组成的sequence，或者1个element：repeatEvery，再加上一个scope组成的sequence组成。</p>
<p>三个元素都通过ref引用，可以继续往后看定义。</p>
<h1 id="group：forOrUntilGroup"><a href="#group：forOrUntilGroup" class="headerlink" title="group：forOrUntilGroup"></a>group：forOrUntilGroup</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">name</span>=<span class="string">"forOrUntilGroup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"for"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"until"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"for"</span> <span class="attr">type</span>=<span class="string">"tDuration-expr"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"until"</span> <span class="attr">type</span>=<span class="string">"tDeadline-expr"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"repeatEvery"</span> <span class="attr">type</span>=<span class="string">"tDuration-expr"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，forOrUntilGroup还真就是for或者until两个元素中选一个。这两个东西又分别通过tDuration-expr，tDeadline-expr来定义。</p>
<p>刚好element：repeatEvery也在这后边，一起讲了吧，同样通过tDuration-expr来定义。</p>
<h1 id="complexType：tActivity"><a href="#complexType：tActivity" class="headerlink" title="complexType：tActivity"></a>complexType：tActivity</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"targets"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"sources"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"suppressJoinFailure"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一看是activity的type，感觉应该出现过，其实并没有，大概是后边会用到吧。</p>
<p>同样基于tExtensibleElements扩展（啥都要tExtensibleElements扩展一下，这兼容性也太强了吧），包含两个元素组成的sequence</p>
<ul>
<li>targets：出现0或1次</li>
<li>sources：出现0或1次</li>
</ul>
<p>另外还有俩属性：</p>
<ul>
<li>name</li>
<li>suppressJoinFailure：有一种故障叫joinFailure，在连接条件求值为 false 时抛出。通过将流程或活动属性 suppressJoinFailure 设置为 yes，可以禁止此故障。</li>
</ul>
<h1 id="element：targets"><a href="#element：targets" class="headerlink" title="element：targets"></a>element：targets</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"targets"</span> <span class="attr">type</span>=<span class="string">"tTargets"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tTargets"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"joinCondition"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"target"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>targets基于tExtensibleElements进行扩展，包含两个元素组成的sequence：</p>
<ul>
<li>joinCondition：0或1个</li>
<li>target：1到多个</li>
</ul>
<h1 id="element：joinCondition"><a href="#element：joinCondition" class="headerlink" title="element：joinCondition"></a>element：joinCondition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"joinCondition"</span> <span class="attr">type</span>=<span class="string">"tCondition"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这玩意儿的定义在tCondition里边，其实装的就是几乎啥都可以写的混合内容。</p>
<h1 id="element：target"><a href="#element：target" class="headerlink" title="element：target"></a>element：target</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">type</span>=<span class="string">"tTarget"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tTarget"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"linkName"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tTarget这个东西是一个机遇tExtensibleElements扩展的元素，就增加了一个元素</p>
<ul>
<li>linkName：NCName，必填，写上你的目标</li>
</ul>
<h1 id="element：sources"><a href="#element：sources" class="headerlink" title="element：sources"></a>element：sources</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"sources"</span> <span class="attr">type</span>=<span class="string">"tSources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tSources"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"source"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"source"</span> <span class="attr">type</span>=<span class="string">"tSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"transitionCondition"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"linkName"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"transitionCondition"</span> <span class="attr">type</span>=<span class="string">"tCondition"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>sources：tExtensibleElements，以及1到多个source</p>
<p>source：tExtensibleElements扩展，还有一个元素的sequence</p>
<ul>
<li>transitionCondition：转移条件，可以不出现，也可以出现一次</li>
</ul>
<p>还有一个属性</p>
<ul>
<li>linkName：NCName，必填，写上你的来源</li>
</ul>
<h1 id="element：assign"><a href="#element：assign" class="headerlink" title="element：assign"></a>element：assign</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"assign"</span> <span class="attr">type</span>=<span class="string">"tAssign"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tAssign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:choice</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"copy"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extensionAssignOperation"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"validate"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Assign，基于tActivity扩展，增加了两个属性，二选一只猴构成sequence</p>
<ul>
<li>copy：出现1至多次</li>
<li>extensionAssignOperation：出现1至多次</li>
</ul>
<p>还增加了一个属性</p>
<ul>
<li>validate：bool值，默认是no，可选</li>
</ul>
<h1 id="element：copy"><a href="#element：copy" class="headerlink" title="element：copy"></a>element：copy</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"copy"</span> <span class="attr">type</span>=<span class="string">"tCopy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCopy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"from"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"to"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"keepSrcElementName"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"ignoreMissingFromData"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>copy，基于tExtensibleElements扩展，两个元素比较好理解</p>
<ul>
<li>from：从哪里copy</li>
<li>to：copy到哪里</li>
</ul>
<p>还有两个属性：</p>
<ul>
<li>keepSrcElementName：bool值，可选，默认no，是否保存源元素的属性名</li>
<li>ignoreMissingFromData：bool值，可选，默认no，是否忽略数据中的遗失部分</li>
</ul>
<h1 id="element：from"><a href="#element：from" class="headerlink" title="element：from"></a>element：from</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"from"</span> <span class="attr">type</span>=<span class="string">"tFrom"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFrom"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"documentation"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:choice</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"literal"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"query"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"endpointReference"</span> <span class="attr">type</span>=<span class="string">"tRoles"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而这个from并不简单，我们先看看这个sequence里边装了什么</p>
<ul>
<li>documentation：element，0至多个，前边定义过了，基本上就是一个mixed的啥都可以写的东西，属性里边指明source和language就可以了</li>
<li>any：0至多个来自其他命名空间的任意元素</li>
<li>literal/query：这俩二选一，具体是啥看后边定义</li>
</ul>
<p>还有几个属性</p>
<ul>
<li>expressionLanguage：表达语言</li>
<li>variable：BPELVariableName</li>
<li>part：来自哪一部分</li>
<li>property：属性是什么</li>
<li>partnerLink</li>
<li>endpointReference：通过tRoles定义</li>
<li>anyAttribute：还可以随便加其他属性</li>
</ul>
<h1 id="element：literal"><a href="#element：literal" class="headerlink" title="element：literal"></a>element：literal</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"literal"</span> <span class="attr">type</span>=<span class="string">"tLiteral"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tLiteral"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##any"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>literal就是一个mixed描述段落，里边可以有一个任意元素。</p>
<h1 id="element：query"><a href="#element：query" class="headerlink" title="element：query"></a>element：query</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"query"</span> <span class="attr">type</span>=<span class="string">"tQuery"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tQuery"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"queryLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Query和literal相似，是一个mixed描述段落，里边可以有任意个任意元素。同时它还有属性</p>
<ul>
<li>queryLanguage：表明查询语言</li>
<li>anyAttribute：看似随便加属性，实际上根据查询语言不通增加其他属性</li>
</ul>
<h1 id="simpleType：tRoles"><a href="#simpleType：tRoles" class="headerlink" title="simpleType：tRoles"></a>simpleType：tRoles</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tRoles"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"myRole"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"partnerRole"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>myRole和partnerRole两个值二选一</p>
<h1 id="element：to"><a href="#element：to" class="headerlink" title="element：to"></a>element：to</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">type</span>=<span class="string">"tTo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tTo"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"documentation"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"query"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个to也不简单，我们看看这个sequence里边装了什么</p>
<ul>
<li>documentation：element，0至多个，前边定义过了，基本上就是一个mixed的啥都可以写的东西，属性里边指明source和language就可以了</li>
<li>any：0至多个来自其他命名空间的任意元素</li>
<li>query：查询到对应写入的部分</li>
</ul>
<p>还有几个属性</p>
<ul>
<li>expressionLanguage：表达语言</li>
<li>variable：BPELVariableName</li>
<li>part：去哪一部分</li>
<li>property：属性是什么</li>
<li>partnerLink</li>
<li>anyAttribute：还可以根据表达语言随便加其他属性</li>
</ul>
<h1 id="element：extensionAssignOperation"><a href="#element：extensionAssignOperation" class="headerlink" title="element：extensionAssignOperation"></a>element：extensionAssignOperation</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extensionAssignOperation"</span> <span class="attr">type</span>=<span class="string">"tExtensionAssignOperation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensionAssignOperation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个东西是assign中的一个element，怪不得assign没有基于tExtensibleElements扩展，放在里边了。</p>
<h1 id="element：compensate"><a href="#element：compensate" class="headerlink" title="element：compensate"></a>element：compensate</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"compensate"</span> <span class="attr">type</span>=<span class="string">"tCompensate"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCompensate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<h1 id="element：compensateScope"><a href="#element：compensateScope" class="headerlink" title="element：compensateScope"></a>element：compensateScope</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"compensateScope"</span> <span class="attr">type</span>=<span class="string">"tCompensateScope"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCompensateScope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在compensate之上增加了一个属性：</p>
<ul>
<li>target：相当于给补偿增加了一个范围</li>
</ul>
<h1 id="element：empty"><a href="#element：empty" class="headerlink" title="element：empty"></a>element：empty</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"empty"</span> <span class="attr">type</span>=<span class="string">"tEmpty"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tEmpty"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<p>和compensate是一样的，在语义上和用法上不一样。</p>
]]></content>
      <tags>
        <tag>BPEL</tag>
        <tag>WSBPEL</tag>
        <tag>ws-bpel</tag>
        <tag>BPEL2.0</tag>
        <tag>Schema</tag>
        <tag>XSD</tag>
      </tags>
  </entry>
  <entry>
    <title>WhatIs: Definition, Theorem, Lemma, Corollary, Proposition, Conjecture, Claim, Axiom, Postulate, Identity, and Paradox</title>
    <url>/2019/09/02/WhatIs-Definition-Theorem-Lemma-Corollary-Proposition-Conjecture-Claim-Axiom-Postulate-Identity-and-Paradox/</url>
    <content><![CDATA[<h1 id="Definition（定义）"><a href="#Definition（定义）" class="headerlink" title="Definition（定义）"></a>Definition（定义）</h1><p>A precise and unambiguous description of the meaning of a mathematical term. It characterizes the meaning of a word by giving all the properties and only those properties that must be true.</p>
<p>对数学术语含义的精确而明确的描述。它通过给出一个词的所有性质，仅给出那些必须为真的性质，来表征该词的意义。</p>
<h1 id="Theorem（定理）"><a href="#Theorem（定理）" class="headerlink" title="Theorem（定理）"></a>Theorem（定理）</h1><p>A mathematical statement that is proved using rigorous mathematical reasoning. In a mathematical paper, the term theorem is often reserved for the most important results.</p>
<p>用严格的数学推理证明的数学陈述。在数学论文中，术语定理通常是为最重要的结果而保留的。</p>
<h1 id="Lemma（引理）"><a href="#Lemma（引理）" class="headerlink" title="Lemma（引理）"></a>Lemma（引理）</h1><p>A minor result whose sole purpose is to help in proving a theorem. It is a stepping stone on the path to proving a theorem. Very occasionally lemmas can take on a life of their own.</p>
<p>唯一目的是帮助证明定理的小结果。这是证明一个定理之路的踏脚石。极少情况下引理可以独立存在。</p>
<h1 id="Corollary（推论）"><a href="#Corollary（推论）" class="headerlink" title="Corollary（推论）"></a>Corollary（推论）</h1><p>A result in which the (usually short) proof relies heavily on a given theorem (we often say that “this is a corollary of Theorem A”).</p>
<p>证明（通常是简短的）很大程度上依赖于一个给定定理的结果（我们经常说“这是定理A的一个推论”）。</p>
<h1 id="Proposition（命题）"><a href="#Proposition（命题）" class="headerlink" title="Proposition（命题）"></a>Proposition（命题）</h1><p>A proved and often interesting result, but generally less important than a theorem.</p>
<p>一个被证明的，通常很有趣的结果，但一般没有定理重要。</p>
<h1 id="Conjecture（推测，猜想）"><a href="#Conjecture（推测，猜想）" class="headerlink" title="Conjecture（推测，猜想）"></a>Conjecture（推测，猜想）</h1><p>A statement that is unproved, but is believed to be true.</p>
<h1 id="Claim（断言）"><a href="#Claim（断言）" class="headerlink" title="Claim（断言）"></a>Claim（断言）</h1><p>An assertion that is then proved. It is often used like an informal lemma.</p>
<p>未经证实但被认为是真实的陈述。</p>
<h1 id="Axiom-Postulate（公理-假定）"><a href="#Axiom-Postulate（公理-假定）" class="headerlink" title="Axiom/Postulate（公理/假定）"></a>Axiom/Postulate（公理/假定）</h1><p>A statement that is assumed to be true without proof. These are the basic building blocks from which all theorems are proved.</p>
<p>没有证明，且假设为真的陈述。这些是证明所有定理的基本构造块。</p>
<h1 id="Identity（恒等式）"><a href="#Identity（恒等式）" class="headerlink" title="Identity（恒等式）"></a>Identity（恒等式）</h1><p>A mathematical expression giving the equality of two (often variable) quantities.</p>
<p>两个（通常是可变的）量相等的数学表达式。</p>
<h1 id="Paradox（悖论）"><a href="#Paradox（悖论）" class="headerlink" title="Paradox（悖论）"></a>Paradox（悖论）</h1><p>A statement that can be shown, using a given set of axioms and de nitions, to be both true and false. Paradoxes are often used to show the  inconsistencies in an awed theory. The term paradox is often used informally to describe a surprising or counterintuitive result that follows from a given set of rules. </p>
<p>一种使用一组给定的公理和定义，既正确又错误的陈述。悖论经常被用来显示敬畏理论中的矛盾。“悖论”一词通常被非正式地用来描述从一组给定规则得出的令人惊讶或违反直觉的结果。</p>
]]></content>
  </entry>
  <entry>
    <title>WS-BPEL 2.0 xml schema 详解(1+2+3全，方便检索)</title>
    <url>/2019/03/22/WS-BPEL-2-0-xml-schema-%E8%AF%A6%E8%A7%A3-%E5%85%A8/</url>
    <content><![CDATA[<p>这篇文章将一行一行的解读wsbpel2.0的源码。</p>
<p>相关xsd语法问题，请参见<a href="https://imonce.github.io/2019/03/15/XSD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%8C%E6%95%B4%E7%89%88/#%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B">XSD学习笔记完整版</a></p>
<p>wsbpel2.0源码：<a href="http://docs.oasis-open.org/wsbpel/2.0/OS/process/executable/ws-bpel_executable.xsd" target="_blank" rel="noopener">ws-bpel_executable.xsd</a></p>
<h1 id="schema声明"><a href="#schema声明" class="headerlink" title="schema声明"></a>schema声明</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://docs.oasis-open.org/wsbpel/2.0/process/executable"</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://docs.oasis-open.org/wsbpel/2.0/process/executable"</span> <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span> <span class="attr">blockDefault</span>=<span class="string">"#all"</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;<span class="name">\xsd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明命名空间<code>http://docs.oasis-open.org/wsbpel/2.0/process/executable</code>，没有前缀。</p>
<p>引入<code>http://www.w3.org/2001/XMLSchema</code>的语素并以xsd为前缀。</p>
<p><code>elementFormDefault=&quot;qualified&quot;</code>表示所有元素都必须加上前缀以表明其命名空间。</p>
<p><code>blockDefault=&quot;#all&quot;</code>表示默认情况下不能通过派生类代替原类型。</p>
<h1 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">Schema for Executable Process for WS-BPEL 2.0 OASIS Standard 11th April, 2007</span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>赠送了一个简单的文档说明。</p>
<h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">"http://www.w3.org/XML/1998/namespace"</span> <span class="attr">schemaLocation</span>=<span class="string">"http://www.w3.org/2001/xml.xsd"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入<code>http://www.w3.org/2001/xml.xsd</code>的xml语素，前缀默认为xml。</p>
<h1 id="element：process"><a href="#element：process" class="headerlink" title="element：process"></a>element：process</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"process"</span> <span class="attr">type</span>=<span class="string">"tProcess"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This is the root element for a WS-BPEL 2.0 process.</span><br><span class="line">		<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BPEL的根元素，此处没有定义任何内容，内部元素属性通过type=”tProcess”引入。</p>
<h1 id="complexType：tProcess"><a href="#complexType：tProcess" class="headerlink" title="complexType：tProcess"></a>complexType：tProcess</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tProcess"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extensions"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"import"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"partnerLinks"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"messageExchanges"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"variables"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"correlationSets"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"faultHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"eventHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"targetNamespace"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"queryLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">default</span>=<span class="string">"urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">default</span>=<span class="string">"urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"suppressJoinFailure"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"exitOnStandardFault"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先是一个名为tExtensibleElements的扩展，先放一下往后看。</p>
<p>一个sequence，包括extensions，import，partnerLinks，messageExchanges，variables，correlationSets，faultHandlers，eventHandlers，还有一个activity的group，这里全部是ref，我们知道大概有些啥就行了，后边肯定会有详细的定义，先往后看吧。</p>
<p>接着是一堆attribute，包括process的</p>
<ul>
<li>名称name</li>
<li>目标命名空间targetNamespace</li>
<li>查询语言queryLanguage，默认是urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0</li>
<li>表达语言expressionLanguage，默认是：urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0</li>
<li>抑制链接失败suppressJoinFailure，默认是否</li>
<li>标准错误退出exitOnStandardFault，默认是否</li>
</ul>
<h1 id="complexType：tExtensibleElement"><a href="#complexType：tExtensibleElement" class="headerlink" title="complexType：tExtensibleElement"></a>complexType：tExtensibleElement</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This type is extended by other component types to allow elements and attributes from other namespaces to be added at the modeled places.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"documentation"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tExtensibleElements这个扩展马上就来了，可以看到，扩展除了0至多个documentation（后边再讲），还有</p>
<ul>
<li>element：来自该元素的父元素的目标命名空间之外的任何命名空间的元素，且即使不能获取该命名空间架构，也不会发生任何错误。</li>
<li>attribute：同上</li>
</ul>
<h1 id="element：documentation"><a href="#element：documentation" class="headerlink" title="element：documentation"></a>element：documentation</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"documentation"</span> <span class="attr">type</span>=<span class="string">"tDocumentation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tDocumentation"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"source"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">ref</span>=<span class="string">"xml:lang"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>documentation中：</p>
<ul>
<li>element：一个字符元素可混合出现的，元素可随意引入，不在此命名空间也没关系</li>
<li>attribute：<ul>
<li>source：通过URI表明来源</li>
<li>xml:lang: 文档语言，如en、CN等</li>
</ul>
</li>
</ul>
<h1 id="group：activity"><a href="#group：activity" class="headerlink" title="group：activity"></a>group：activity</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">name</span>=<span class="string">"activity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">All standard WS-BPEL 2.0 activities in alphabetical order. Basic activities and structured activities. Addtional constraints: - rethrow activity can be used ONLY within a fault handler (i.e. "catch" and "catchAll" element) - compensate or compensateScope activity can be used ONLY within a fault handler, a compensation handler or a termination handler</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"assign"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensateScope"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"empty"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"exit"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extensionActivity"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"flow"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"forEach"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"if"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"invoke"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"pick"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"receive"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"repeatUntil"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"reply"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"rethrow"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"sequence"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"throw"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"validate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"wait"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"while"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义了一个activity的group，用于在其他地方引用，比如说通过tProcess引用到process里边。</p>
<p>一个activity可以是以下元素中的一个，没写到的看后边源码解读好了：</p>
<table>
<thead>
<tr>
<th align="left">活动名称</th>
<th align="left">释义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">assign</td>
<td align="left">活动的作用是用新的数据来更新变量的值。Assign活动可以包括任意数量的基本复制操作。</td>
</tr>
<tr>
<td align="left">compensate</td>
<td align="left">通过该活动做一些补偿动作，通常需要和scope联合使用。只能从故障处理程序或另一个补偿处理活动中调用这个活动。补偿处理程序只能被调用一次。</td>
</tr>
<tr>
<td align="left">compensateScope</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">empty</td>
<td align="left">无所事事，比如在一个错误发生后可以不做反应来消除这个错误</td>
</tr>
<tr>
<td align="left">exit</td>
<td align="left">该活动用于立刻终止业务流程实例。所有当前运行的活动必须被立刻终止。不用引用任何终点处理、错误处理或者补偿行为。</td>
</tr>
<tr>
<td align="left">extensionActivity</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">flow</td>
<td align="left">可以描述更为复杂的活动执行顺序。我们可以利用flow指定一个或多个并行执行的活动。为了定义任意的控制结构，可以在并行的活动中使用链接。</td>
</tr>
<tr>
<td align="left">forEach</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">if</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">invoke</td>
<td align="left">活动允许业务流程同步或异步调用由合作伙伴提供的服务，服务实现可以是单向或请求-响应操作。Invoke活动使用“partnerLink”来引用伙伴服务。同过“portType”和“operation”指定相应的WSDL接口和操作。</td>
</tr>
<tr>
<td align="left">pick</td>
<td align="left">活动会等待一组相互排斥事件中的一个事件的发生，然后执行与发生的事件相关联的活动。它会阻塞业务流程执行，以等待某一特定的事件发生，比如接收到一个合适的消息或超时警报响起。当其中任何一个事件被触发后，业务流程就会继续执行，pick也随即完成了，不会再等待其他事件的发生。</td>
</tr>
<tr>
<td align="left">receive</td>
<td align="left">活动从流程的外部伙伴那获取数据，并将其保存到流程变量。通常一个Receive是一个流程的初始点，它会阻塞执行直到匹配的消息的到达。</td>
</tr>
<tr>
<td align="left">repeatUntil</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">reply</td>
<td align="left">活动发送消息给伙伴来应答通过receive活动所接收到的消息。receive和reply的组合对应着WSDL portType上定义的一个请求-响应操作。如果receive活动对应着一个单向(one-way)操作，则不能在流程中定义对应的reply活动。</td>
</tr>
<tr>
<td align="left">rethrow</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">scope</td>
<td align="left">使用这个结构可以将一组活动组织在一起作为一个处理单位。通过这个组织方法多个活动可以使用同一个故障处理、事故处理和补偿处理。通过补偿处理BPEL可以处理长时间的处理。</td>
</tr>
<tr>
<td align="left">sequence</td>
<td align="left">定义一组按顺序先后执行的活动。执行顺序是sequence活动中嵌套活动的先后顺序。当sequence中的最后一个活动完成后，该sequence活动也就完成了。</td>
</tr>
<tr>
<td align="left">throw</td>
<td align="left">提示一个错误，一个故障处理可以处理这样的错误。假如一个错误不被处理的话它最终到达最高层后导致过程的终止</td>
</tr>
<tr>
<td align="left">validate</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">wait</td>
<td align="left">活动会暂停流程执行，等待一段给定的时间或等到某一时刻才继续运行。在WebSphere Process Server 6.0中，开发者可以非常灵活地指定wait中的到期条件，比如等待多少秒，等到特定的一个日期，或是使用内置的日期表现法。也可以使用Java代码来动态指定等待时间。</td>
</tr>
<tr>
<td align="left">while</td>
<td align="left">继承于传统的结构化编程思想，提供了while-do循环结构的支持。它可以包含一个或多个活动。它指定反复执行其内部活动，直到成功条件不被满足为止。在WPS中允许其使用Java代码来描述条件表达式。</td>
</tr>
</tbody></table>
<h1 id="element：extensions"><a href="#element：extensions" class="headerlink" title="element：extensions"></a>element：extensions</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extensions"</span> <span class="attr">type</span>=<span class="string">"tExtensions"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extension"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extension"</span> <span class="attr">type</span>=<span class="string">"tExtension"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtension"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"namespace"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"mustUnderstand"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个extensions由1到多个extension组成。</p>
<p>extension扩展自tExtensibleElements，增加了namespace和mustUnderstand两个属性。</p>
<h1 id="element：import"><a href="#element：import" class="headerlink" title="element：import"></a>element：import</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"import"</span> <span class="attr">type</span>=<span class="string">"tImport"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tImport"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"namespace"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"importType"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BPEL允许import，import元素在tExtensibleElements的基础上，增加namespace、location、importType三个属性，和xsd的import类似。</p>
<h1 id="element：partnerLinks"><a href="#element：partnerLinks" class="headerlink" title="element：partnerLinks"></a>element：partnerLinks</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"partnerLinks"</span> <span class="attr">type</span>=<span class="string">"tPartnerLinks"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tPartnerLinks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"partnerLink"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"tPartnerLink"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tPartnerLink"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLinkType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"myRole"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerRole"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"initializePartnerRole"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，partnerLinks由1到多个partnerLink组成，同时支持tExtensibleElements扩展。</p>
<p>partnerLink在tExtensibleElements的基础上，增加了以下5个属性</p>
<ul>
<li>name</li>
<li>partnerLinkType</li>
<li>myRole</li>
<li>partnerRole</li>
<li>initializaPartnerRole</li>
</ul>
<h1 id="element：messageExchanges"><a href="#element：messageExchanges" class="headerlink" title="element：messageExchanges"></a>element：messageExchanges</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"messageExchanges"</span> <span class="attr">type</span>=<span class="string">"tMessageExchanges"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tMessageExchanges"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"messageExchange"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"tMessageExchange"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tMessageExchange"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，messageExchanges由1到多个messageExchange组成，同时支持tExtensibleElements扩展。</p>
<p>messageExchange在tExtensibleElements的基础上，增加了一个属性</p>
<ul>
<li>name</li>
</ul>
<h1 id="element：variables"><a href="#element：variables" class="headerlink" title="element：variables"></a>element：variables</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"variables"</span> <span class="attr">type</span>=<span class="string">"tVariables"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tVariables"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"variable"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"tVariable"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tVariable"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"from"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"element"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，variables由1到多个variable组成，同时支持tExtensibleElements扩展。</p>
<p>variable在tExtensibleElements的基础上，增加了一个元素</p>
<ul>
<li>from</li>
</ul>
<p>增加了四个属性</p>
<ul>
<li>name</li>
<li>messageType</li>
<li>type</li>
<li>element</li>
</ul>
<h1 id="simpleType：BPELVariableName"><a href="#simpleType：BPELVariableName" class="headerlink" title="simpleType：BPELVariableName"></a>simpleType：BPELVariableName</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"BPELVariableName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:NCName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">"[^\.]+"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bpel变量的一个限制，BPELVariableName需要满足xsd:NCName限制，不能以<code>.</code>开头，且长度大于等于一个字符。</p>
<h1 id="element：correlationSets"><a href="#element：correlationSets" class="headerlink" title="element：correlationSets"></a>element：correlationSets</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlationSets"</span> <span class="attr">type</span>=<span class="string">"tCorrelationSets"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationSets"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"correlationSet"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlationSet"</span> <span class="attr">type</span>=<span class="string">"tCorrelationSet"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationSet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"properties"</span> <span class="attr">type</span>=<span class="string">"QNames"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和extensions相似，correlationSets由1到多个correlationSet组成，同时支持tExtensibleElements扩展。</p>
<p>correlationSet在tExtensibleElements的基础上，增加了2个属性</p>
<ul>
<li>properties</li>
<li>name</li>
</ul>
<h1 id="simpleType：QNames"><a href="#simpleType：QNames" class="headerlink" title="simpleType：QNames"></a>simpleType：QNames</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"QNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:list</span> <span class="attr">itemType</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:minLength</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>QNames就是一个QName的list，最少1个，默认空格分割。</p>
<h1 id="element：faultHandlers"><a href="#element：faultHandlers" class="headerlink" title="element：faultHandlers"></a>element：faultHandlers</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"faultHandlers"</span> <span class="attr">type</span>=<span class="string">"tFaultHandlers"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFaultHandlers"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catch"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catchAll"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>faultHandlers，听名字就知道是干啥的了，同样支持tExtensibleElements扩展，由2种元素的sequence组成：</p>
<ul>
<li>catch</li>
<li>catchAll</li>
</ul>
<h1 id="element：catch"><a href="#element：catch" class="headerlink" title="element：catch"></a>element：catch</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"catch"</span> <span class="attr">type</span>=<span class="string">"tCatch"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate, compensateScope and rethrow.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCatch"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultName"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultMessageType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultElement"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>catch扩展自tActivityContainer，包含4个属性，对catch做了限定：</p>
<ul>
<li>faultName</li>
<li>faultVariable</li>
<li>faultMessageType</li>
<li>faultElement</li>
</ul>
<h1 id="element：catchAll"><a href="#element：catchAll" class="headerlink" title="element：catchAll"></a>element：catchAll</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"catchAll"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate, compensateScope and rethrow.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同于catch，catchAll没有那么多属性（我全都要），就是tActivityContainer本尊，扩展自tExtensibleElements，同时包含一个activity的sequence。</p>
<h1 id="element：eventHandlers"><a href="#element：eventHandlers" class="headerlink" title="element：eventHandlers"></a>element：eventHandlers</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"eventHandlers"</span> <span class="attr">type</span>=<span class="string">"tEventHandlers"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tEventHandlers"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element onAlarm needs to be a Local Element Declaration, because there is another onAlarm element defined for the pick activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"onEvent"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onAlarm"</span> <span class="attr">type</span>=<span class="string">"tOnAlarmEvent"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>eventHandlers基于tExtensibleElements扩展，由2种元素的sequence组成：</p>
<ul>
<li>onEvent：见element：onEvent</li>
<li>onAlarm：见complexType：tOnAlarmEvent</li>
</ul>
<h1 id="element：onEvent"><a href="#element：onEvent" class="headerlink" title="element：onEvent"></a>element：onEvent</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onEvent"</span> <span class="attr">type</span>=<span class="string">"tOnEvent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnEvent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tOnMsgCommon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"element"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>onEvent元素基于tOnMsgCommon进行扩展，包含一个element sequence：</p>
<ul>
<li>scope：用于表明作用范围</li>
</ul>
<p>2个attribute：</p>
<ul>
<li>messageType</li>
<li>element</li>
</ul>
<h1 id="complexType：tOnMsgCommon"><a href="#complexType：tOnMsgCommon" class="headerlink" title="complexType：tOnMsgCommon"></a>complexType：tOnMsgCommon</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnMsgCommon"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelations"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tOnMsgCommon这个complexType同样支持tExtensibleElements扩展，包含由两类element组成的sequence：</p>
<ul>
<li>correlations：type为tCorrelations</li>
<li>fromParts</li>
</ul>
<p>同时还引入了5种属性：</p>
<ul>
<li>partnerLink：必填的链接名</li>
<li>portType：选填的端口类型</li>
<li>operation：必填的操作</li>
<li>messageExchange：选填的操作信息</li>
<li>variable：选填的变量</li>
</ul>
<h1 id="complexType：tCorrelations"><a href="#complexType：tCorrelations" class="headerlink" title="complexType：tCorrelations"></a>complexType：tCorrelations</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelations"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlation needs to be a Local Element Declaration, because there is another correlation element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlation"</span> <span class="attr">type</span>=<span class="string">"tCorrelation"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"set"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"initiate"</span> <span class="attr">type</span>=<span class="string">"tInitiate"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tInitiate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"join"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tCorrelations基于tExtensibleElements扩展，由1至多个correlation的sequence组成。</p>
<p>tCorrelation同样基于tExtensibleElements扩展，在此之上还定义了两个属性：</p>
<ul>
<li>set</li>
<li>initiate：yes | join | no</li>
</ul>
<h1 id="complexType：tOnAlarmEvent"><a href="#complexType：tOnAlarmEvent" class="headerlink" title="complexType：tOnAlarmEvent"></a>complexType：tOnAlarmEvent</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnAlarmEvent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"forOrUntilGroup"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"repeatEvery"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"repeatEvery"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tOnAlarmEvent基于tExtensibleElements扩展，由1个group：forOrUntilGroup 和 0或1个element：repeatEvery组成的sequence，或者1个element：repeatEvery，再加上一个scope组成的sequence组成。</p>
<p>三个元素都通过ref引用，可以继续往后看定义。</p>
<h1 id="group：forOrUntilGroup"><a href="#group：forOrUntilGroup" class="headerlink" title="group：forOrUntilGroup"></a>group：forOrUntilGroup</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">name</span>=<span class="string">"forOrUntilGroup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"for"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"until"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"for"</span> <span class="attr">type</span>=<span class="string">"tDuration-expr"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"until"</span> <span class="attr">type</span>=<span class="string">"tDeadline-expr"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"repeatEvery"</span> <span class="attr">type</span>=<span class="string">"tDuration-expr"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，forOrUntilGroup还真就是for或者until两个元素中选一个。这两个东西又分别通过tDuration-expr，tDeadline-expr来定义。</p>
<p>刚好element：repeatEvery也在这后边，一起讲了吧，同样通过tDuration-expr来定义。</p>
<h1 id="complexType：tActivity"><a href="#complexType：tActivity" class="headerlink" title="complexType：tActivity"></a>complexType：tActivity</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"targets"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"sources"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"suppressJoinFailure"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一看是activity的type，感觉应该出现过，其实并没有，大概是后边会用到吧。</p>
<p>同样基于tExtensibleElements扩展（啥都要tExtensibleElements扩展一下，这兼容性也太强了吧），包含两个元素组成的sequence</p>
<ul>
<li>targets：出现0或1次</li>
<li>sources：出现0或1次</li>
</ul>
<p>另外还有俩属性：</p>
<ul>
<li>name</li>
<li>suppressJoinFailure：有一种故障叫joinFailure，在连接条件求值为 false 时抛出。通过将流程或活动属性 suppressJoinFailure 设置为 yes，可以禁止此故障。</li>
</ul>
<h1 id="element：targets"><a href="#element：targets" class="headerlink" title="element：targets"></a>element：targets</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"targets"</span> <span class="attr">type</span>=<span class="string">"tTargets"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tTargets"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"joinCondition"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"target"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>targets基于tExtensibleElements进行扩展，包含两个元素组成的sequence：</p>
<ul>
<li>joinCondition：0或1个</li>
<li>target：1到多个</li>
</ul>
<h1 id="element：joinCondition"><a href="#element：joinCondition" class="headerlink" title="element：joinCondition"></a>element：joinCondition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"joinCondition"</span> <span class="attr">type</span>=<span class="string">"tCondition"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这玩意儿的定义在tCondition里边，其实装的就是几乎啥都可以写的混合内容。</p>
<h1 id="element：target"><a href="#element：target" class="headerlink" title="element：target"></a>element：target</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">type</span>=<span class="string">"tTarget"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tTarget"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"linkName"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tTarget这个东西是一个机遇tExtensibleElements扩展的元素，就增加了一个元素</p>
<ul>
<li>linkName：NCName，必填，写上你的目标</li>
</ul>
<h1 id="element：sources"><a href="#element：sources" class="headerlink" title="element：sources"></a>element：sources</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"sources"</span> <span class="attr">type</span>=<span class="string">"tSources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tSources"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"source"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"source"</span> <span class="attr">type</span>=<span class="string">"tSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"transitionCondition"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"linkName"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"transitionCondition"</span> <span class="attr">type</span>=<span class="string">"tCondition"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>sources：tExtensibleElements，以及1到多个source</p>
<p>source：tExtensibleElements扩展，还有一个元素的sequence</p>
<ul>
<li>transitionCondition：转移条件，可以不出现，也可以出现一次</li>
</ul>
<p>还有一个属性</p>
<ul>
<li>linkName：NCName，必填，写上你的来源</li>
</ul>
<h1 id="element：assign"><a href="#element：assign" class="headerlink" title="element：assign"></a>element：assign</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"assign"</span> <span class="attr">type</span>=<span class="string">"tAssign"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tAssign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:choice</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"copy"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"extensionAssignOperation"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"validate"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Assign，基于tActivity扩展，增加了两个属性，二选一只猴构成sequence</p>
<ul>
<li>copy：出现1至多次</li>
<li>extensionAssignOperation：出现1至多次</li>
</ul>
<p>还增加了一个属性</p>
<ul>
<li>validate：bool值，默认是no，可选</li>
</ul>
<h1 id="element：copy"><a href="#element：copy" class="headerlink" title="element：copy"></a>element：copy</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"copy"</span> <span class="attr">type</span>=<span class="string">"tCopy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCopy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"from"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"to"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"keepSrcElementName"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"ignoreMissingFromData"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"optional"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>copy，基于tExtensibleElements扩展，两个元素比较好理解</p>
<ul>
<li>from：从哪里copy</li>
<li>to：copy到哪里</li>
</ul>
<p>还有两个属性：</p>
<ul>
<li>keepSrcElementName：bool值，可选，默认no，是否保存源元素的属性名</li>
<li>ignoreMissingFromData：bool值，可选，默认no，是否忽略数据中的遗失部分</li>
</ul>
<h1 id="element：from"><a href="#element：from" class="headerlink" title="element：from"></a>element：from</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"from"</span> <span class="attr">type</span>=<span class="string">"tFrom"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFrom"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"documentation"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:choice</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"literal"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"query"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"endpointReference"</span> <span class="attr">type</span>=<span class="string">"tRoles"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而这个from并不简单，我们先看看这个sequence里边装了什么</p>
<ul>
<li>documentation：element，0至多个，前边定义过了，基本上就是一个mixed的啥都可以写的东西，属性里边指明source和language就可以了</li>
<li>any：0至多个来自其他命名空间的任意元素</li>
<li>literal/query：这俩二选一，具体是啥看后边定义</li>
</ul>
<p>还有几个属性</p>
<ul>
<li>expressionLanguage：表达语言</li>
<li>variable：BPELVariableName</li>
<li>part：来自哪一部分</li>
<li>property：属性是什么</li>
<li>partnerLink</li>
<li>endpointReference：通过tRoles定义</li>
<li>anyAttribute：还可以随便加其他属性</li>
</ul>
<h1 id="element：literal"><a href="#element：literal" class="headerlink" title="element：literal"></a>element：literal</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"literal"</span> <span class="attr">type</span>=<span class="string">"tLiteral"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tLiteral"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##any"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>literal就是一个mixed描述段落，里边可以有一个任意元素。</p>
<h1 id="element：query"><a href="#element：query" class="headerlink" title="element：query"></a>element：query</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"query"</span> <span class="attr">type</span>=<span class="string">"tQuery"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tQuery"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"queryLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Query和literal相似，是一个mixed描述段落，里边可以有任意个任意元素。同时它还有属性</p>
<ul>
<li>queryLanguage：表明查询语言</li>
<li>anyAttribute：看似随便加属性，实际上根据查询语言不通增加其他属性</li>
</ul>
<h1 id="simpleType：tRoles"><a href="#simpleType：tRoles" class="headerlink" title="simpleType：tRoles"></a>simpleType：tRoles</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tRoles"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"myRole"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"partnerRole"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>myRole和partnerRole两个值二选一</p>
<h1 id="element：to"><a href="#element：to" class="headerlink" title="element：to"></a>element：to</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">type</span>=<span class="string">"tTo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tTo"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"documentation"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"query"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个to也不简单，我们看看这个sequence里边装了什么</p>
<ul>
<li>documentation：element，0至多个，前边定义过了，基本上就是一个mixed的啥都可以写的东西，属性里边指明source和language就可以了</li>
<li>any：0至多个来自其他命名空间的任意元素</li>
<li>query：查询到对应写入的部分</li>
</ul>
<p>还有几个属性</p>
<ul>
<li>expressionLanguage：表达语言</li>
<li>variable：BPELVariableName</li>
<li>part：去哪一部分</li>
<li>property：属性是什么</li>
<li>partnerLink</li>
<li>anyAttribute：还可以根据表达语言随便加其他属性</li>
</ul>
<h1 id="element：extensionAssignOperation"><a href="#element：extensionAssignOperation" class="headerlink" title="element：extensionAssignOperation"></a>element：extensionAssignOperation</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extensionAssignOperation"</span> <span class="attr">type</span>=<span class="string">"tExtensionAssignOperation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensionAssignOperation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个东西是assign中的一个element，怪不得assign没有基于tExtensibleElements扩展，放在里边了。</p>
<h1 id="element：compensate"><a href="#element：compensate" class="headerlink" title="element：compensate"></a>element：compensate</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"compensate"</span> <span class="attr">type</span>=<span class="string">"tCompensate"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCompensate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<h1 id="element：compensateScope"><a href="#element：compensateScope" class="headerlink" title="element：compensateScope"></a>element：compensateScope</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"compensateScope"</span> <span class="attr">type</span>=<span class="string">"tCompensateScope"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCompensateScope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在compensate之上增加了一个属性：</p>
<ul>
<li>target：相当于给补偿增加了一个范围</li>
</ul>
<h1 id="element：empty"><a href="#element：empty" class="headerlink" title="element：empty"></a>element：empty</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"empty"</span> <span class="attr">type</span>=<span class="string">"tEmpty"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tEmpty"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<p>和compensate是一样的，在语义上和用法上不一样。</p>
<h1 id="element：exit"><a href="#element：exit" class="headerlink" title="element：exit"></a>element：exit</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"exit"</span> <span class="attr">type</span>=<span class="string">"tExit"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<p>和compensate、empty定义是一样的，在语义上和用法上不一样。</p>
<h1 id="element：extensionActivity"><a href="#element：extensionActivity" class="headerlink" title="element：extensionActivity"></a>element：extensionActivity</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"extensionActivity"</span> <span class="attr">type</span>=<span class="string">"tExtensionActivity"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExtensionActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>允许从其他命名空间增加元素当作activity装进来</p>
<h1 id="element：flow"><a href="#element：flow" class="headerlink" title="element：flow"></a>element：flow</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"flow"</span> <span class="attr">type</span>=<span class="string">"tFlow"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFlow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"links"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基于tActivity进行扩展，sequence中包含：</p>
<ul>
<li>element links：可以没有，在后边定义</li>
<li>group activity：1到多个activity的group，算是一个嵌套的定义</li>
</ul>
<h1 id="element：links"><a href="#element：links" class="headerlink" title="element：links"></a>element：links</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"links"</span> <span class="attr">type</span>=<span class="string">"tLinks"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tLinks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"link"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"link"</span> <span class="attr">type</span>=<span class="string">"tLink"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tLink"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>links基于tExtensibleElements进行扩展（辣个男人又回来了），包含1至多个link</p>
<p>link同样基于tExtensibleElements进行扩展，增加了一个属性</p>
<p>name：NCName，这就是link的真相了</p>
<h1 id="element：forEach"><a href="#element：forEach" class="headerlink" title="element：forEach"></a>element：forEach</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"forEach"</span> <span class="attr">type</span>=<span class="string">"tForEach"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tForEach"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"startCounterValue"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"finalCounterValue"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"completionCondition"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"scope"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"counterName"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"parallel"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"startCounterValue"</span> <span class="attr">type</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"finalCounterValue"</span> <span class="attr">type</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>看名字就知道是一个forEach循环了，element包括</p>
<ul>
<li>startCounterValue</li>
<li>finalCounterValue</li>
<li>completionCondition</li>
<li>scope</li>
</ul>
<p>这四个应该不用解释了吧，for循环要素</p>
<p>然后还有两个属性</p>
<ul>
<li>counterName：计数器的名称</li>
<li>parallel：是否并行</li>
</ul>
<h1 id="element：completionCondition"><a href="#element：completionCondition" class="headerlink" title="element：completionCondition"></a>element：completionCondition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"completionCondition"</span> <span class="attr">type</span>=<span class="string">"tCompletionCondition"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCompletionCondition"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"branches"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个condition由一组branches构成</p>
<h1 id="element：branches"><a href="#element：branches" class="headerlink" title="element：branches"></a>element：branches</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"branches"</span> <span class="attr">type</span>=<span class="string">"tBranches"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tBranches"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"successfulBranchesOnly"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>branches基于tExpression进行扩展，还有一个属性</p>
<ul>
<li>successfulBranchesOnly：默认是no</li>
</ul>
<h1 id="element：if"><a href="#element：if" class="headerlink" title="element：if"></a>element：if</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"if"</span> <span class="attr">type</span>=<span class="string">"tIf"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tIf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"elseif"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"else"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>if也是一类activity，基于tAcitivity进行扩展，sequence中包括</p>
<ul>
<li>condition：element，至少一个</li>
<li>activity：group，至少一个</li>
<li>elseif：element，0到多个</li>
<li>else：element，可以没有</li>
</ul>
<h1 id="element：elseif"><a href="#element：elseif" class="headerlink" title="element：elseif"></a>element：elseif</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"elseif"</span> <span class="attr">type</span>=<span class="string">"tElseif"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tElseif"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"else"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>elseif基于tExtensibleElements扩展，sequence中包括</p>
<ul>
<li>condition：element，数量1</li>
<li>activity：group，数量1</li>
</ul>
<p>Else就直接是tActivityContainer了，condition都不用。</p>
<h1 id="element：invoke"><a href="#element：invoke" class="headerlink" title="element：invoke"></a>element：invoke</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"invoke"</span> <span class="attr">type</span>=<span class="string">"tInvoke"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tInvoke"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the non-invoke activities.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelationsWithPattern"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catch"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"catchAll"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensationHandler"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"toParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"inputVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"outputVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>annotation说明就不讲了</p>
<p>基于tActivity扩展，用调用其他 Web 服务，element有6个</p>
<ul>
<li>correlations：本地的元素声明</li>
<li>catch</li>
<li>catchAll</li>
<li>compensationHandler</li>
<li>toParts</li>
<li>fromParts</li>
</ul>
<p>attribute有5个</p>
<ul>
<li>partnerLink</li>
<li>portType</li>
<li>operation</li>
<li>inputVariable</li>
<li>outputVariable</li>
</ul>
<p>感觉看名字就懂了，没啥好讲的</p>
<h1 id="complexType：tCorrelationsWithPattern"><a href="#complexType：tCorrelationsWithPattern" class="headerlink" title="complexType：tCorrelationsWithPattern"></a>complexType：tCorrelationsWithPattern</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationsWithPattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlation needs to be a Local Element Declaration, because there is another correlation element defined for the non-invoke activities.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlation"</span> <span class="attr">type</span>=<span class="string">"tCorrelationWithPattern"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCorrelationWithPattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tCorrelation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">type</span>=<span class="string">"tPattern"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tPattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"request"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"response"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"request-response"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一通定义，实际上这个tCorrelationsWithPattern就是1至多个tCorrelationWithPattern</p>
<p>这个tCorrelationWithPattern从tCorrelation进行扩展，增加了属性pattern</p>
<p>这个pattern就是request、response、request-response三选一</p>
<h1 id="element：fromParts"><a href="#element：fromParts" class="headerlink" title="element：fromParts"></a>element：fromParts</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"fromParts"</span> <span class="attr">type</span>=<span class="string">"tFromParts"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFromParts"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromPart"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"fromPart"</span> <span class="attr">type</span>=<span class="string">"tFromPart"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tFromPart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"toVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>fromParts扩展自tExtensibleElements，由1到多个fromPart组成</p>
<p>fromPart同样扩展自tExtensibleElements，包含两个attribute</p>
<ul>
<li>part</li>
<li>toVariable</li>
</ul>
<h1 id="element：toParts"><a href="#element：toParts" class="headerlink" title="element：toParts"></a>element：toParts</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"toParts"</span> <span class="attr">type</span>=<span class="string">"tToParts"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tToParts"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"toPart"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"toPart"</span> <span class="attr">type</span>=<span class="string">"tToPart"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tToPart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"part"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"fromVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>toParts扩展自tExtensibleElements，由1到多个toPart组成</p>
<p>toPart同样扩展自tExtensibleElements，包含两个attribute</p>
<ul>
<li>part</li>
<li>fromVariable</li>
</ul>
<h1 id="element：pick"><a href="#element：pick" class="headerlink" title="element：pick"></a>element：pick</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"pick"</span> <span class="attr">type</span>=<span class="string">"tPick"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tPick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element onAlarm needs to be a Local Element Declaration, because there is another onAlarm element defined for event handlers.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"onMessage"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onAlarm"</span> <span class="attr">type</span>=<span class="string">"tOnAlarmPick"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"createInstance"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>pick扩展自tActivity</p>
<p>两个属性都在后边定义：</p>
<ul>
<li>onMessage</li>
<li>onAlarm</li>
</ul>
<p>一个属性：</p>
<ul>
<li>createInstance</li>
</ul>
<h1 id="element：onMessage"><a href="#element：onMessage" class="headerlink" title="element：onMessage"></a>element：onMessage</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"onMessage"</span> <span class="attr">type</span>=<span class="string">"tOnMessage"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnMessage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tOnMsgCommon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tOnMsgCommon</p>
<p>sequence中是一个activity的group</p>
<h1 id="complexType：tOnAlarmPick"><a href="#complexType：tOnAlarmPick" class="headerlink" title="complexType：tOnAlarmPick"></a>complexType：tOnAlarmPick</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tOnAlarmPick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExtensibleElements"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"forOrUntilGroup"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tExtensibleElements</p>
<p>sequence中有两个group</p>
<ul>
<li>forOrUntilGroup</li>
<li>activity</li>
</ul>
<p>都是出现一次</p>
<h1 id="element：receive"><a href="#element：receive" class="headerlink" title="element：receive"></a>element：receive</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"receive"</span> <span class="attr">type</span>=<span class="string">"tReceive"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tReceive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelations"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"fromParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"createInstance"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，用于（接收请求）等待客户端通过发送消息调用业务流程</p>
<p>2个element</p>
<ul>
<li>correlations</li>
<li>fromParts</li>
</ul>
<p>6个attribute</p>
<ul>
<li>partnerLink</li>
<li>portType</li>
<li>operation</li>
<li>variable</li>
<li>createInstance</li>
<li>messageExchange</li>
</ul>
<h1 id="element：repeatUntil"><a href="#element：repeatUntil" class="headerlink" title="element：repeatUntil"></a>element：repeatUntil</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"repeatUntil"</span> <span class="attr">type</span>=<span class="string">"tRepeatUntil"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tRepeatUntil"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity</p>
<p>sequence中包含</p>
<ul>
<li>activity：group，数量为1</li>
<li>condition：element，数量也是1</li>
</ul>
<h1 id="element：reply"><a href="#element：reply" class="headerlink" title="element：reply"></a>element：reply</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"reply"</span> <span class="attr">type</span>=<span class="string">"tReply"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tReply"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">XSD Authors: The child element correlations needs to be a Local Element Declaration, because there is another correlations element defined for the invoke activity.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"correlations"</span> <span class="attr">type</span>=<span class="string">"tCorrelations"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"toParts"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"partnerLink"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"portType"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"operation"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultName"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"messageExchange"</span> <span class="attr">type</span>=<span class="string">"xsd:NCName"</span> <span class="attr">use</span>=<span class="string">"optional"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，用于生成同步操作的响应</p>
<p>2个element</p>
<ul>
<li>correlations</li>
<li>toParts</li>
</ul>
<p>6个attribute</p>
<ul>
<li>partnerLink</li>
<li>portType</li>
<li>operation</li>
<li>variable</li>
<li>faultName</li>
<li>messageExchange</li>
</ul>
<h1 id="element：rethrow"><a href="#element：rethrow" class="headerlink" title="element：rethrow"></a>element：rethrow</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"rethrow"</span> <span class="attr">type</span>=<span class="string">"tRethrow"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tRethrow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是tActivity的一个元素化，可以看作是一个最原始，最纯粹的activity。</p>
<p>和compensate、empty，exit定义是一样的，就是在语义上和用法上不一样。</p>
<h1 id="element：scope"><a href="#element：scope" class="headerlink" title="element：scope"></a>element：scope</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"scope"</span> <span class="attr">type</span>=<span class="string">"tScope"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tScope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">There is no schema-level default for "exitOnStandardFault" at "scope". Because, it will inherit default from enclosing scope or process.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"partnerLinks"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"messageExchanges"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"variables"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"correlationSets"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"faultHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"compensationHandler"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"terminationHandler"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"eventHandlers"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"isolated"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span> <span class="attr">default</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"exitOnStandardFault"</span> <span class="attr">type</span>=<span class="string">"tBoolean"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，用于以分层方式将复杂流程划分为多个组织部分。scope为活动提供了行为上下文。换言之，scope可以为不同的活动（或在 <sequence> 或 <flow>) 等通用的结构化活动下收集的活动集）定义不同的故障处理程序。除了定义故障处理程序以外，scope还可以声明只在作用域中可见的变量。scope还可以定义本地关联集、补偿处理程序和事件处理程序。</flow></sequence></p>
<p>sequence中有：</p>
<ul>
<li>partnerLinks</li>
<li>messageExchanges</li>
<li>variables</li>
<li>correlationSets</li>
<li>faultHandlers</li>
<li>compensationHandler</li>
<li>terminationHandler</li>
<li>eventHandlers</li>
<li>activity</li>
</ul>
<p>还有两个属性  </p>
<ul>
<li>isolated</li>
<li>exitOnStandardFault</li>
</ul>
<h1 id="element：compensationHandler"><a href="#element：compensationHandler" class="headerlink" title="element：compensationHandler"></a>element：compensationHandler</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"compensationHandler"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate and compensateScope.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上就是一个tActivityContainer</p>
<h1 id="element：terminationHandler"><a href="#element：terminationHandler" class="headerlink" title="element：terminationHandler"></a>element：terminationHandler</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"terminationHandler"</span> <span class="attr">type</span>=<span class="string">"tActivityContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">This element can contain all activities including the activities compensate and compensateScope.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上就是一个tActivityContainer</p>
<h1 id="element：sequence"><a href="#element：sequence" class="headerlink" title="element：sequence"></a>element：sequence</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"sequence"</span> <span class="attr">type</span>=<span class="string">"tSequence"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tSequence"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，但是里边还可以装很多的activity的group的序列</p>
<h1 id="element：throw"><a href="#element：throw" class="headerlink" title="element：throw"></a>element：throw</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"throw"</span> <span class="attr">type</span>=<span class="string">"tThrow"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tThrow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultName"</span> <span class="attr">type</span>=<span class="string">"xsd:QName"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"faultVariable"</span> <span class="attr">type</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了两个属性</p>
<ul>
<li>faultName</li>
<li>faultVariable</li>
</ul>
<h1 id="element：validate"><a href="#element：validate" class="headerlink" title="element：validate"></a>element：validate</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"validate"</span> <span class="attr">type</span>=<span class="string">"tValidate"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tValidate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"variables"</span> <span class="attr">use</span>=<span class="string">"required"</span> <span class="attr">type</span>=<span class="string">"BPELVariableNames"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了1个属性</p>
<ul>
<li>variables：BPELVariableNames</li>
</ul>
<h1 id="simpleType：BPELVariableNames"><a href="#simpleType：BPELVariableNames" class="headerlink" title="simpleType：BPELVariableNames"></a>simpleType：BPELVariableNames</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"BPELVariableNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:list</span> <span class="attr">itemType</span>=<span class="string">"BPELVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:minLength</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个BPELVariableName的list，默认空格分割，最短一个</p>
<h1 id="element：wait"><a href="#element：wait" class="headerlink" title="element：wait"></a>element：wait</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"wait"</span> <span class="attr">type</span>=<span class="string">"tWait"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tWait"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"for"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"until"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:choice</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了元素，从for和until中二选一</p>
<h1 id="element：while"><a href="#element：while" class="headerlink" title="element：while"></a>element：while</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"while"</span> <span class="attr">type</span>=<span class="string">"tWhile"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tWhile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">ref</span>=<span class="string">"condition"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:group</span> <span class="attr">ref</span>=<span class="string">"activity"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展自tActivity，增加了一个sequence，里边有</p>
<ul>
<li>condition</li>
<li>activity</li>
</ul>
<h1 id="complexType：tExpression"><a href="#complexType：tExpression" class="headerlink" title="complexType：tExpression"></a>complexType：tExpression</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tExpression"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:any</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"expressionLanguage"</span> <span class="attr">type</span>=<span class="string">"xsd:anyURI"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:anyAttribute</span> <span class="attr">namespace</span>=<span class="string">"##other"</span> <span class="attr">processContents</span>=<span class="string">"lax"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tExpression的内容基本就是随便写</p>
<p>属性有一个expressionLanguage，然后还可以再增加其他属性</p>
<p>看起来是any，实际上要看expressionLanguage的</p>
<h1 id="complexType：tCondition"><a href="#complexType：tCondition" class="headerlink" title="complexType：tCondition"></a>complexType：tCondition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tCondition"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>tCondition就是在tExpression的基础上随便写</p>
<h1 id="element：condition"><a href="#element：condition" class="headerlink" title="element：condition"></a>element：condition</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"condition"</span> <span class="attr">type</span>=<span class="string">"tBoolean-expr"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tBoolean-expr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>condition也是在tExpression的基础上随便写</p>
<h1 id="complexType：tDuration-expr"><a href="#complexType：tDuration-expr" class="headerlink" title="complexType：tDuration-expr"></a>complexType：tDuration-expr</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tDuration-expr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在tExpression的基础上随便写</p>
<h1 id="complexType：tDeadline-expr"><a href="#complexType：tDeadline-expr" class="headerlink" title="complexType：tDeadline-expr"></a>complexType：tDeadline-expr</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"tDeadline-expr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexContent</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"tExpression"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在tExpression的基础上随便写</p>
<h1 id="simpleType：tBoolean"><a href="#simpleType：tBoolean" class="headerlink" title="simpleType：tBoolean"></a>simpleType：tBoolean</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"tBoolean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yes or no，二选一</p>
]]></content>
      <tags>
        <tag>BPEL</tag>
        <tag>WSBPEL</tag>
        <tag>ws-bpel</tag>
        <tag>BPEL2.0</tag>
        <tag>Schema</tag>
        <tag>XSD</tag>
      </tags>
  </entry>
  <entry>
    <title>XML Schema (XSD) 入门</title>
    <url>/2018/11/29/XMLSchema%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>这是一篇<a href="http://www.w3school.com.cn/schema/index.asp" target="_blank" rel="noopener">W3school Schema 教程</a>学习笔记。</p>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>XML Schema 是基于 XML 的 DTD 替代者。XML Schema 描述 XML 文档的结构。XML Schema 语言也称作 XML Schema 定义（XML Schema Definition，XSD）。</p>
<h1 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h1><h2 id="定义简易元素的语法："><a href="#定义简易元素的语法：" class="headerlink" title="定义简易元素的语法："></a>定义简易元素的语法：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="定义简易属性的语法："><a href="#定义简易属性的语法：" class="headerlink" title="定义简易属性的语法："></a>定义简易属性的语法：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数据类型的限定"><a href="#数据类型的限定" class="headerlink" title="数据类型的限定"></a>数据类型的限定</h2><table>
<thead>
<tr>
<th align="left">限定</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">enumeration</td>
<td align="left">定义可接受值的一个列表</td>
</tr>
<tr>
<td align="left">fractionDigits</td>
<td align="left">定义所允许的最大的小数位数。必须大于等于0。</td>
</tr>
<tr>
<td align="left">length</td>
<td align="left">定义所允许的字符或者列表项目的精确数目。必须大于或等于0。</td>
</tr>
<tr>
<td align="left">maxExclusive</td>
<td align="left">定义数值的上限。所允许的值必须小于此值。</td>
</tr>
<tr>
<td align="left">maxInclusive</td>
<td align="left">定义数值的上限。所允许的值必须小于或等于此值。</td>
</tr>
<tr>
<td align="left">maxLength</td>
<td align="left">定义所允许的字符或者列表项目的最大数目。必须大于或等于0。</td>
</tr>
<tr>
<td align="left">minExclusive</td>
<td align="left">定义数值的下限。所允许的值必需大于此值。</td>
</tr>
<tr>
<td align="left">minInclusive</td>
<td align="left">定义数值的下限。所允许的值必需大于或等于此值。</td>
</tr>
<tr>
<td align="left">minLength</td>
<td align="left">定义所允许的字符或者列表项目的最小数目。必须大于或等于0。</td>
</tr>
<tr>
<td align="left">pattern</td>
<td align="left">定义可接受的字符的精确序列。</td>
</tr>
<tr>
<td align="left">totalDigits</td>
<td align="left">定义所允许的阿拉伯数字的精确位数。必须大于0。</td>
</tr>
<tr>
<td align="left">whiteSpace</td>
<td align="left">定义空白字符（换行、回车、空格以及制表符）的处理方式。</td>
</tr>
</tbody></table>
<h2 id="限定的例子"><a href="#限定的例子" class="headerlink" title="限定的例子"></a>限定的例子</h2><h3 id="对值的限定"><a href="#对值的限定" class="headerlink" title="对值的限定"></a>对值的限定</h3><p>下面的例子定义了带有一个限定且名为 “age” 的元素。age 的值不能低于 0 或者高于 120：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:maxInclusive</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对一组值的限定"><a href="#对一组值的限定" class="headerlink" title="对一组值的限定"></a>对一组值的限定</h3><p>如需把 XML 元素的内容限制为一组可接受的值，我们要使用枚举约束（enumeration constraint）。<br>下面的例子定义了带有一个限定的名为 “car” 的元素。可接受的值只有：Audi, Golf, BMW：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"car"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Audi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Golf"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"BMW"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对一系列值的限定"><a href="#对一系列值的限定" class="headerlink" title="对一系列值的限定"></a>对一系列值的限定</h3><p>如需把 XML 元素的内容限制定义为一系列可使用的数字或字母，我们要使用模式约束（pattern constraint）。<br>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值只有小写字母 a - z 其中的一个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[a-z]"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下一个例子定义了带有一个限定的名为 “initials” 的元素。可接受的值是大写字母 A - Z 其中的三个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"initials"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[A-Z][A-Z][A-Z]"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下一个例子也定义了带有一个限定的名为 “initials” 的元素。可接受的值是大写或小写字母 a - z 其中的三个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"initials"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[a-zA-Z][a-zA-Z][a-zA-Z]"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下一个例子定义了带有一个限定的名为 “choice 的元素。可接受的值是字母 x, y 或 z 中的一个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"choice"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[xyz]"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下一个例子定义了带有一个限定的名为 “prodid” 的元素。可接受的值是五个阿拉伯数字的一个序列，且每个数字的范围是 0-9：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"prodid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[0-9][0-9][0-9][0-9][0-9]"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对一系列值的其他限定"><a href="#对一系列值的其他限定" class="headerlink" title="对一系列值的其他限定"></a>对一系列值的其他限定</h3><p>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值是 a - z 中零个或多个字母：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"([a-z])*"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值是一对或多对字母，每对字母由一个小写字母后跟一个大写字母组成。举个例子，”sToP”将会通过这种模式的验证，但是 “Stop”、”STOP” 或者 “stop” 无法通过验证：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"([a-z][A-Z])+"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子定义了带有一个限定的名为 “gender” 的元素。可接受的值是 male 或者 female：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"male|female"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子定义了带有一个限定的名为 “password” 的元素。可接受的值是由 8 个字符组成的一行字符，这些字符必须是大写或小写字母 a - z 亦或数字 0 - 9：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[a-zA-Z0-9]&#123;8&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对空白字符的限定"><a href="#对空白字符的限定" class="headerlink" title="对空白字符的限定"></a>对空白字符的限定</h3><p>如需规定对空白字符（whitespace characters）的处理方式，我们需要使用 whiteSpace 限定。<br>下面的例子定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “preserve”，这意味着 XML 处理器不会移除任何空白字符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:whiteSpace</span> <span class="attr">value</span>=<span class="string">"preserve"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子也定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “replace”，这意味着 XML 处理器将移除所有空白字符（换行、回车、空格以及制表符）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:whiteSpace</span> <span class="attr">value</span>=<span class="string">"replace"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子也定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “collapse”，这意味着 XML 处理器将移除所有空白字符（换行、回车、空格以及制表符会被替换为空格，开头和结尾的空格会被移除，而多个连续的空格会被缩减为一个单一的空格）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:whiteSpace</span> <span class="attr">value</span>=<span class="string">"collapse"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对长度的限定"><a href="#对长度的限定" class="headerlink" title="对长度的限定"></a>对长度的限定</h3><p>如需限制元素中值的长度，我们需要使用 length、maxLength 以及 minLength 限定。<br>本例定义了带有一个限定且名为 “password” 的元素。其值必须精确到 8 个字符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:length</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子也定义了带有一个限定的名为 “password” 的元素。其值最小为 5 个字符，最大为 8 个字符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:minLength</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:maxLength</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="最常用的类型是："><a href="#最常用的类型是：" class="headerlink" title="最常用的类型是："></a>最常用的类型是：</h2><ul>
<li>xs:string</li>
<li>xs:decimal</li>
<li>xs:integer</li>
<li>xs:boolean</li>
<li>xs:date</li>
<li>xs:time</li>
</ul>
<h2 id="属性的默认值和固定值"><a href="#属性的默认值和固定值" class="headerlink" title="属性的默认值和固定值"></a>属性的默认值和固定值</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">default</span>=<span class="string">"EN"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">fixed</span>=<span class="string">"EN"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="可选和必选"><a href="#可选和必选" class="headerlink" title="可选和必选"></a>可选和必选</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>XSD</tag>
        <tag>XML Schema</tag>
      </tags>
  </entry>
  <entry>
    <title>XSD/XML Schema 学习笔记完整版</title>
    <url>/2019/03/15/XSD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%8C%E6%95%B4%E7%89%88/</url>
    <content><![CDATA[<blockquote>
<p><strong>注：</strong>本文摘自<a href="http://www.w3school.com.cn/schema/index.asp" target="_blank" rel="noopener">W3school Schema 教程</a></p>
</blockquote>
<h1 id="schema声明"><a href="#schema声明" class="headerlink" title="schema声明"></a>schema声明</h1><p>属性大全</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">说明</th>
<th align="left">取值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">标识该元素的唯一ID</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">attributeFormDefault</td>
<td align="left">指定XML文档使用schema中定义的局部属性时是否必须使用命名空间限定</td>
<td align="left">qualified:必须通过命名空间前缀限定、unqualified：（默认值）无须通过命名空间前缀限定</td>
</tr>
<tr>
<td align="left">elementFormDefault</td>
<td align="left">指定XML文档使用schema中定义的局部元素时是否必须使用命名空间限定</td>
<td align="left">取值和含义同attributeFormDefault</td>
</tr>
<tr>
<td align="left">blockDefault</td>
<td align="left">设定schema中element和complexType上的block属性的默认值、block属性用来阻止以指定的派生类型代替原类型</td>
<td align="left">#all或者extension、restriction和substitution的自由组合、例如extension表示防止通过扩展派生的复杂类型替代该复杂类型</td>
</tr>
<tr>
<td align="left">finalDefault</td>
<td align="left">设定schema中element、simpleType和complexType上的final的默认值、final属性用来阻止以指定的派生类型来派生新类型</td>
<td align="left">对于element和complexType：值可以是#all或extension和restriction的自由组合、对于simpleType：值可以是#all或restriction、list和union的自由组合</td>
</tr>
<tr>
<td align="left">targetNamespace</td>
<td align="left">设定schema的命名空间的URI引用</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">version</td>
<td align="left">设定schema的版本</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">xmlns</td>
<td align="left">设定schema使用的一个或多个命名空间的URI引用</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">any attributes</td>
<td align="left">设定带有non-schema命名空间的任何其他属性</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="lt-schema-gt-声明"><a href="#lt-schema-gt-声明" class="headerlink" title="&lt;schema&gt; 声明"></a>&lt;schema&gt; 声明</h2><p>&lt;schema&gt; 元素是每一个 XML Schema 的根元素：<br>&lt;?xml version=”1.0”?&gt;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&lt;schema&gt; 元素可包含属性。一个 schema 声明往往看上去类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetNamespace</span>=<span class="string">"http://www.w3school.com.cn"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.w3school.com.cn"</span></span></span><br><span class="line"><span class="tag"><span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:xs="http://www.w3.org/2001/XMLSchema"</span><br></pre></td></tr></table></figure>

<p>显示 schema 中用到的元素和数据类型来自命名空间 <code>http://www.w3.org/2001/XMLSchema</code>。</p>
<p>同时它还规定了来自命名空间 <code>http://www.w3.org/2001/XMLSchema</code>的元素和数据类型应该使用前缀 xs。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">targetNamespace="http://www.w3school.com.cn"</span><br></pre></td></tr></table></figure>

<p>显示被此 schema 定义的元素 (note, to, from, heading, body) 来自命名空间： <code>http://www.w3school.com.cn</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns="http://www.w3school.com.cn"</span><br></pre></td></tr></table></figure>

<p>指出默认的命名空间是 <code>http://www.w3school.com.cn</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">elementFormDefault="qualified"</span><br></pre></td></tr></table></figure>

<p>指出任何 XML 实例文档所使用的且在此 schema 中声明过的元素必须被命名空间限定。</p>
<h2 id="在-XSD-文档中引用-其他Schema"><a href="#在-XSD-文档中引用-其他Schema" class="headerlink" title="在 XSD 文档中引用 其他Schema"></a>在 XSD 文档中引用 其他Schema</h2><p>引用方式有两种：</p>
<ul>
<li>include</li>
<li>import</li>
</ul>
<p>import与include的作用是一样的。 区别在于import是导入另外一个命名空间的xsd， 而inlude是包含同一个命名空间的xsd。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:include</span> <span class="attr">schemaLocation</span>=<span class="string">"module/owl1-lite-core.xsd"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">"http://www.w3.org/XML/1998/namespace"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">schemaLocation</span>=<span class="string">"xml.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- "http://www.w3.org/2001/xml.xsd" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">      Get access to the xml: attribute groups for xml:lang</span><br><span class="line">      as declared on 'Label' and 'Documentation' below </span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:import</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在-XML-文档中引用-Schema"><a href="#在-XML-文档中引用-Schema" class="headerlink" title="在 XML 文档中引用 Schema"></a>在 XML 文档中引用 Schema</h2><p>此 XML 文档含有对 XML Schema 的引用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3school.com.cn"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.w3school.com.cn note.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns="http://www.w3school.com.cn"</span><br></pre></td></tr></table></figure>

<p>规定了默认命名空间的声明。此声明会告知 schema 验证器，在此 XML 文档中使用的所有元素都被声明于 <code>http://www.w3school.com.cn</code> 这个命名空间。</p>
<p>一旦您拥有了可用的 XML Schema 实例命名空间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br></pre></td></tr></table></figure>

<p>您就可以使用 schemaLocation 属性了。此属性有两个值。第一个值是需要使用的命名空间。第二个值是供命名空间使用的 XML schema 的位置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xsi:schemaLocation="http://www.w3school.com.cn note.xsd"</span><br></pre></td></tr></table></figure>

<h1 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h1><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用类型："><a href="#常用类型：" class="headerlink" title="常用类型："></a>常用类型：</h3><ul>
<li>xs:string</li>
<li>xs:decimal</li>
<li>xs:integer</li>
<li>xs:boolean</li>
<li>xs:date</li>
<li>xs:time</li>
</ul>
<h3 id="默认值和固定值"><a href="#默认值和固定值" class="headerlink" title="默认值和固定值"></a>默认值和固定值</h3><p>缺省值（默认值）设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">default</span>=<span class="string">"red"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>固定值设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">fixed</span>=<span class="string">"red"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>这是一些 XML 元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>28<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dateborn</span>&gt;</span>1980-03-27<span class="tag">&lt;/<span class="name">dateborn</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是相应的简易元素定义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"xs:integer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"dateborn"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">ID</span> </span></span><br><span class="line"><span class="tag"><span class="attr">itemType</span>=<span class="string">QName</span> </span></span><br><span class="line"><span class="tag"><span class="attr">any</span> <span class="attr">attributes</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">(annotation?,(simpleType?))</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">可选。规定该元素的唯一的 ID。</td>
</tr>
<tr>
<td align="left">itemType</td>
<td align="left">在该 schema（或由指定的命名空间指示的其他 schema）中定义的内置数据类型或 simpleType 元素的名称。包含 list 元素的 simpleType 元素是从 list 值指定的简单类型派生的。list 值必须是限定名 (QName)。 如果内容包含 simpleType 元素，则不允许使用该属性，否则该属性是必需的。</td>
</tr>
<tr>
<td align="left">any attributes</td>
<td align="left">可选。规定带有 non-schema 命名空间的任何其他属性。</td>
</tr>
</tbody></table>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>下面的例子展示了为一列整数的简单类型：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"intvalues"</span> <span class="attr">type</span>=<span class="string">"valuelist"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span> <span class="attr">name</span>=<span class="string">"valuelist"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:list</span> <span class="attr">itemType</span>=<span class="string">"xs:integer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档中的 “intvalues” 元素类似这样（注意这个列表有五个列表项）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intvalues</span>&gt;</span>100 34 56 -23 1567<span class="tag">&lt;/<span class="name">intvalues</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释：空格被作为列表项的分隔符</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用类型：-1"><a href="#常用类型：-1" class="headerlink" title="常用类型："></a>常用类型：</h3><ul>
<li>xs:string</li>
<li>xs:decimal</li>
<li>xs:integer</li>
<li>xs:boolean</li>
<li>xs:date</li>
<li>xs:time</li>
</ul>
<h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p>这是带有属性的 XML 元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lastname</span> <span class="attr">lang</span>=<span class="string">"EN"</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是对应的属性定义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="默认值和固定值-1"><a href="#默认值和固定值-1" class="headerlink" title="默认值和固定值"></a>默认值和固定值</h3><p>缺省值（默认值）设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">default</span>=<span class="string">"EN"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>固定值设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">fixed</span>=<span class="string">"EN"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="可选和必选"><a href="#可选和必选" class="headerlink" title="可选和必选"></a>可选和必选</h3><p>在缺省的情况下，属性是可选的。如需规定属性为必选，请使用 “use” 属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="限定-Facets"><a href="#限定-Facets" class="headerlink" title="限定/Facets"></a>限定/Facets</h2><h3 id="对值的限定"><a href="#对值的限定" class="headerlink" title="对值的限定"></a>对值的限定</h3><p>下面的例子定义了带有一个限定且名为 “age” 的元素。age 的值不能低于 0 或者高于 120：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:maxInclusive</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对一组值的限定"><a href="#对一组值的限定" class="headerlink" title="对一组值的限定"></a>对一组值的限定</h3><p>如需把 XML 元素的内容限制为一组可接受的值，我们要使用枚举约束（enumeration constraint）。</p>
<p>下面的例子定义了带有一个限定的名为 “car” 的元素。可接受的值只有：Audi, Golf, BMW：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"car"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Audi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Golf"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"BMW"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的例子也可以被写为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">type</span>=<span class="string">"carType"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span> <span class="attr">name</span>=<span class="string">"carType"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Audi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Golf"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"BMW"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注释：</strong>在这种情况下，类型 “carType” 可被其他元素使用，因为它不是 “car” 元素的组成部分。</p>
<h3 id="对一系列值的限定"><a href="#对一系列值的限定" class="headerlink" title="对一系列值的限定"></a>对一系列值的限定</h3><p>如需把 XML 元素的内容限制定义为一系列可使用的数字或字母，我们要使用模式约束（pattern constraint）。</p>
<p>下一个例子也定义了带有一个限定的名为 “initials” 的元素。可接受的值是大写或小写字母 a - z 其中的三个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"initials"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[a-zA-Z][a-zA-Z][a-zA-Z]"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下一个例子定义了带有一个限定的名为 “choice 的元素。可接受的值是字母 x, y 或 z 中的一个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"choice"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[xyz]"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对一系列值的其他限定"><a href="#对一系列值的其他限定" class="headerlink" title="对一系列值的其他限定"></a>对一系列值的其他限定</h3><p>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值是 a - z 中零个或多个字母：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"([a-z])*"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子定义了带有一个限定的名为 “letter” 的元素。可接受的值是一对或多对字母，每对字母由一个小写字母后跟一个大写字母组成。举个例子，”sToP”将会通过这种模式的验证，但是 “Stop”、”STOP” 或者 “stop” 无法通过验证：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"([a-z][A-Z])+"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子定义了带有一个限定的名为 “gender” 的元素。可接受的值是 male 或者 female：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"male|female"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子定义了带有一个限定的名为 “password” 的元素。可接受的值是由 8 个字符组成的一行字符，这些字符必须是大写或小写字母 a - z 亦或数字 0 - 9：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:pattern</span> <span class="attr">value</span>=<span class="string">"[a-zA-Z0-9]&#123;8&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对空白字符的限定"><a href="#对空白字符的限定" class="headerlink" title="对空白字符的限定"></a>对空白字符的限定</h3><p>如需规定对空白字符（whitespace characters）的处理方式，我们需要使用 whiteSpace 限定。</p>
<p>下面的例子定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “preserve”，这意味着 XML 处理器不会移除任何空白字符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:whiteSpace</span> <span class="attr">value</span>=<span class="string">"preserve"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子也定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “replace”，这意味着 XML 处理器将移除所有空白字符（换行、回车、空格以及制表符）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:whiteSpace</span> <span class="attr">value</span>=<span class="string">"replace"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子也定义了带有一个限定的名为 “address” 的元素。这个 whiteSpace 限定被设置为 “collapse”，这意味着 XML 处理器将移除所有空白字符（换行、回车、空格以及制表符会被替换为空格，开头和结尾的空格会被移除，而多个连续的空格会被缩减为一个单一的空格）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:whiteSpace</span> <span class="attr">value</span>=<span class="string">"collapse"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对长度的限定"><a href="#对长度的限定" class="headerlink" title="对长度的限定"></a>对长度的限定</h3><p>如需限制元素中值的长度，我们需要使用 length、maxLength 以及 minLength 限定。</p>
<p>本例定义了带有一个限定且名为 “password” 的元素。其值必须精确到 8 个字符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:length</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子也定义了带有一个限定的名为 “password” 的元素。其值最小为 5 个字符，最大为 8 个字符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:minLength</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:maxLength</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型的限定"><a href="#数据类型的限定" class="headerlink" title="数据类型的限定"></a>数据类型的限定</h3><table>
<thead>
<tr>
<th align="left">限定</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">enumeration</td>
<td align="left">定义可接受值的一个列表</td>
</tr>
<tr>
<td align="left">fractionDigits</td>
<td align="left">定义所允许的最大的小数位数。必须大于等于0。</td>
</tr>
<tr>
<td align="left">length</td>
<td align="left">定义所允许的字符或者列表项目的精确数目。必须大于或等于0。</td>
</tr>
<tr>
<td align="left">maxExclusive</td>
<td align="left">定义数值的上限。所允许的值必须小于此值。</td>
</tr>
<tr>
<td align="left">maxInclusive</td>
<td align="left">定义数值的上限。所允许的值必须小于或等于此值。</td>
</tr>
<tr>
<td align="left">maxLength</td>
<td align="left">定义所允许的字符或者列表项目的最大数目。必须大于或等于0。</td>
</tr>
<tr>
<td align="left">minExclusive</td>
<td align="left">定义数值的下限。所允许的值必需大于此值。</td>
</tr>
<tr>
<td align="left">minInclusive</td>
<td align="left">定义数值的下限。所允许的值必需大于或等于此值。</td>
</tr>
<tr>
<td align="left">minLength</td>
<td align="left">定义所允许的字符或者列表项目的最小数目。必须大于或等于0。</td>
</tr>
<tr>
<td align="left">pattern</td>
<td align="left">定义可接受的字符的精确序列。</td>
</tr>
<tr>
<td align="left">totalDigits</td>
<td align="left">定义所允许的阿拉伯数字的精确位数。必须大于0。</td>
</tr>
<tr>
<td align="left">whiteSpace</td>
<td align="left">定义空白字符（换行、回车、空格以及制表符）的处理方式。</td>
</tr>
</tbody></table>
<h1 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h1><h2 id="元素-1"><a href="#元素-1" class="headerlink" title="元素"></a>元素</h2><p>四种类型的复合元素：</p>
<ul>
<li>空元素</li>
<li>包含其他元素的元素</li>
<li>仅包含文本的元素</li>
<li>包含元素和文本的元素</li>
</ul>
<p><strong>注释：</strong>上述元素均可包含属性！</p>
<h3 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">firstname</span>&gt;</span>John<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>的XML Schema可以写成：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"personinfo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以在已有的复合元素之上以某个复合元素为基础，然后添加一些元素，就像这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"fullpersoninfo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"fullpersoninfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"personinfo"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h2><p>一个空的 XML 元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">product</span> <span class="attr">prodid</span>=<span class="string">"1345"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的 “product” 元素根本没有内容。为了定义无内容的类型，我们就必须声明一个在其内容中只能包含元素的类型，但是实际上我们并不会声明任何元素，比如这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:complexContent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"prodid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:complexContent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"prodid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>or：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"product"</span> <span class="attr">type</span>=<span class="string">"prodtype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"prodtype"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"prodid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="仅含元素"><a href="#仅含元素" class="headerlink" title="仅含元素"></a>仅含元素</h2><p>XML 元素，”person”，仅包含其他的元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">firstname</span>&gt;</span>John<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可在 schema 中这样定义 “person” 元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">type</span>=<span class="string">"persontype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"persontype"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="仅含文本"><a href="#仅含文本" class="headerlink" title="仅含文本"></a>仅含文本</h2><p>此类型仅包含简易的内容（文本和属性），因此我们要向此内容添加 simpleContent 元素。当使用简易内容时，我们就必须在 simpleContent 元素内定义扩展或限定，就像这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"某个名称"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"basetype"</span>&gt;</span></span><br><span class="line">        ....</span><br><span class="line">        ....</span><br><span class="line">      <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"某个名称"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"basetype"</span>&gt;</span></span><br><span class="line">        ....</span><br><span class="line">        ....</span><br><span class="line">      <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shoesize</span> <span class="attr">country</span>=<span class="string">"france"</span>&gt;</span>35<span class="tag">&lt;/<span class="name">shoesize</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面这个例子声明了一个复合类型，其内容被定义为整数值，并且 “shoesize” 元素含有名为 “country” 的属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shoesize"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们也可为 complexType 元素设定一个名称，并让 “shoesize” 元素的 type 属性来引用此名称（通过使用此方法，若干元素均可引用相同的复合类型）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shoesize"</span> <span class="attr">type</span>=<span class="string">"shoetype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"shoetype"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:simpleContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="混合内容"><a href="#混合内容" class="headerlink" title="混合内容"></a>混合内容</h2><p>带有混合内容的复合类型<br>XML 元素，”letter”，含有文本以及其他元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">letter</span>&gt;</span></span><br><span class="line">Dear Mr.<span class="tag">&lt;<span class="name">name</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">name</span>&gt;</span>.</span><br><span class="line">Your order <span class="tag">&lt;<span class="name">orderid</span>&gt;</span>1032<span class="tag">&lt;/<span class="name">orderid</span>&gt;</span></span><br><span class="line">will be shipped on <span class="tag">&lt;<span class="name">shipdate</span>&gt;</span>2001-07-13<span class="tag">&lt;/<span class="name">shipdate</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">letter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面这个 schema 声明了这个 “letter” 元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"orderid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shipdate"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注释：</strong>为了使字符数据可以出现在 “letter” 的子元素之间，mixed 属性必须被设置为 “true”。<a href="xs:sequence\" target="_blank" rel="noopener">xs:sequence\</a> 标签 (name、orderid 以及 shipdate ) 意味着被定义的元素必须依次出现在 “letter” 元素内部。</p>
<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span> <span class="attr">type</span>=<span class="string">"lettertype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"lettertype"</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"orderid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shipdate"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="指示器"><a href="#指示器" class="headerlink" title="指示器"></a>指示器</h2><p>七种指示器：</p>
<p>Order 指示器：</p>
<ul>
<li>All</li>
<li>Choice</li>
<li>Sequence</li>
</ul>
<p>Occurrence 指示器：</p>
<ul>
<li>maxOccurs</li>
<li>minOccurs</li>
</ul>
<p>Group 指示器：</p>
<ul>
<li>Group name</li>
<li>attributeGroup name</li>
</ul>
<h3 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h3><p>&lt;all&gt; 指示器规定子元素可以按照任意顺序出现，且每个子元素必须只出现一次.</p>
<p>当使用 &lt;all&gt; 指示器时，你可以把 &lt;minOccurs&gt; 设置为 0 或者 1，而只能把 &lt;maxOccurs&gt; 指示器设置为 1</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:all</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:all</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Choice"><a href="#Choice" class="headerlink" title="Choice"></a>Choice</h3><p>&lt;choice&gt; 指示器规定可出现某个子元素或者可出现另外一个子元素（非此即彼）,如需设置子元素出现任意次数，可将 &lt;maxOccurs&gt; 设置为 unbounded（无限次）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:choice</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"employee"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"member"</span> <span class="attr">type</span>=<span class="string">"member"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:choice</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h3><p>&lt;sequence&gt; 规定子元素必须按照特定的顺序出现：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="maxOccurs"><a href="#maxOccurs" class="headerlink" title="maxOccurs"></a>maxOccurs</h3><p>Occurrence 指示器用于定义某个元素出现的频率。对于所有的 “Order” 和 “Group” 指示器（any、all、choice、sequence、group name 以及 group reference），其中的 maxOccurs 以及 minOccurs 的默认值均为 1。</p>
<p>&lt;maxOccurs&gt;指示器可规定某个元素可出现的最大次数,如需使某个元素的出现次数不受限制，可以使用 maxOccurs=”unbounded” 这个声明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"full_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"child_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">maxOccurs</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="minOccurs"><a href="#minOccurs" class="headerlink" title="minOccurs"></a>minOccurs</h3><p>&lt;minOccurs&gt;指示器可规定某个元素能够出现的最小次数：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"full_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"child_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxOccurs</span>=<span class="string">"10"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Group-name"><a href="#Group-name" class="headerlink" title="Group name"></a>Group name</h3><p>元素组通过 group 声明进行定义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">name</span>=<span class="string">"组名称"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>您必须在 group 声明内部定义一个 all、choice 或者 sequence 元素。下面这个例子定义了名为 “persongroup” 的 group，它定义了必须按照精确的顺序出现的一组元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">name</span>=<span class="string">"persongroup"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在您把 group 定义完毕以后，就可以在另一个定义中引用它了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">name</span>=<span class="string">"persongroup"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">type</span>=<span class="string">"personinfo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">ref</span>=<span class="string">"persongroup"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="attributeGroup-name"><a href="#attributeGroup-name" class="headerlink" title="attributeGroup name"></a>attributeGroup name</h3><p>属性组通过 attributeGroup 声明来进行定义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">name</span>=<span class="string">"组名称"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:attributeGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面这个例子定义了名为 “personattrgroup” 的一个属性组：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">name</span>=<span class="string">"personattrgroup"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:attributeGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在您已定义完毕属性组之后，就可以在另一个定义中引用它了，就像这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">name</span>=<span class="string">"personattrgroup"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:attributeGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">ref</span>=<span class="string">"personattrgroup"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="lt-any-gt"><a href="#lt-any-gt" class="headerlink" title="&lt;any&gt;"></a>&lt;any&gt;</h2><p>&lt;any&gt; 元素使我们有能力通过未被 schema 规定的元素来拓展 XML 文档！<br>下面这个例子是从名为 “family.xsd” 的 XML schema 中引用的片段。它展示了一个针对 “person” 元素的声明。通过使用 &lt;any&gt; 元素，我们可以通过任何元素（在 &lt;lastname&gt; 之后）扩展 “person” 的内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:any</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><ul>
<li>id:可选。规定该元素的唯一的 ID。</li>
<li>namespace:可选。规定包含可以使用的元素的命名空间。如果没有指定命名空间，则 ##any 为默认值。如果指定命名空间，则必须是以下值之一。<ul>
<li>any - 来自任何命名空间的元素都可以出现（默认）。</li>
<li>other - 来自该元素的父元素的目标命名空间之外的任何命名空间的元素都可以出现。</li>
<li>local - 未由命名空间限定的元素可以出现。</li>
<li>targetNamespace - 来自包含该元素的父元素的目标命名空间的元素可以出现。</li>
<li>{URI references of namespaces, ##targetNamespace, ##local} 的列表 - 来自通过空格分隔的命名空间列表的元素可以出现。 该列表可以包含以下内容： 命名空间 ##targetNamespace 和 ##local 的 URI 引用。</li>
</ul>
</li>
<li>processContents:可选。一个指示符，指示应用程序或 XML 处理器应如何根据由该 any 元素指定的元素处理 XML 文档的验证。 如果没有指定 processContents 属性，则默认为 strict。 如果指定了 processContents，必须是以下值之一。<ul>
<li>strict - XML 处理器必须获得所需命名空间的架构，并且必须验证来自这些命名空间的所有元素。（默认）</li>
<li>lax - 与 strict 相同；但是，即使不能获取该架构，也不会发生任何错误。</li>
<li>skip - XML 处理器不尝试验证来自指定命名空间的所有元素。</li>
</ul>
</li>
<li>any attributes:可选。规定带有 non-schema 命名空间的任何其他属性。</li>
</ul>
<h2 id="lt-anyAttribute-gt"><a href="#lt-anyAttribute-gt" class="headerlink" title="&lt;anyAttribute&gt;"></a>&lt;anyAttribute&gt;</h2><p>&lt;anyAttribute&gt; 元素使我们有能力通过未被 schema 规定的属性来扩展 XML 文档！<br>下面的例子是来自名为 “family.xsd” 的 XML schema 的一个片段。它为我们展示了针对 “person” 元素的一个声明。通过使用 &lt;anyAttribute&gt; 元素，我们就可以向 “person” 元素添加任意数量的属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:anyAttribute</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="元素替换"><a href="#元素替换" class="headerlink" title="元素替换"></a>元素替换</h2><p>让我们举例说明：我们的用户来自英国和挪威。我们希望有能力让用户选择在 XML 文档中使用挪威语的元素名称还是英语的元素名称。<br>为了解决这个问题，我们可以在 XML schema 中定义一个 substitutionGroup。首先，我们声明主元素，然后我们会声明次元素，这些次元素可声明它们能够替换主元素。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"navn"</span> <span class="attr">substitutionGroup</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"custinfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">type</span>=<span class="string">"custinfo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"kunde"</span> <span class="attr">substitutionGroup</span>=<span class="string">"customer"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>有效的 XML 文档类似这样（根据上面的 schema）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">customer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">customer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kunde</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navn</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">navn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">kunde</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果需要阻止元素替换，可使用 block 属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">block</span>=<span class="string">"substitution"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>请注意，substitutionGroup 中的所有元素（主元素和可替换元素）必须被声明为全局元素，否则就无法工作！</p>
<p>全局元素指 “schema” 元素的直接子元素！本地元素（Local elements）指嵌套在其他元素中的元素。</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串数据类型（String-Data-Type）"><a href="#字符串数据类型（String-Data-Type）" class="headerlink" title="字符串数据类型（String Data Type）"></a>字符串数据类型（String Data Type）</h3><p>字符串数据类型可包含字符、换行、回车以及制表符。如果您使用字符串数据类型，XML 处理器就不会更改其中的值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="规格化字符串数据类型（NormalizedString-Data-Type）"><a href="#规格化字符串数据类型（NormalizedString-Data-Type）" class="headerlink" title="规格化字符串数据类型（NormalizedString Data Type）"></a>规格化字符串数据类型（NormalizedString Data Type）</h3><p>规格化字符串数据类型同样可包含字符，但是 XML 处理器会移除折行，回车以及制表符。</p>
<p>下面是一个关于在某个 schema 中规格化字符串数据类型的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">type</span>=<span class="string">"xs:normalizedString"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档中的元素看上去应该类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">customer</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">customer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">customer</span>&gt;</span>	John Smith	<span class="tag">&lt;/<span class="name">customer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释：在上面的例子中，XML 处理器会使用空格替换所有的制表符。</p>
<h3 id="Token-数据类型（Token-Data-Type）"><a href="#Token-数据类型（Token-Data-Type）" class="headerlink" title="Token 数据类型（Token Data Type）"></a>Token 数据类型（Token Data Type）</h3><p>Token 数据类型同样可包含字符，但是 XML 处理器会移除换行符、回车、制表符、开头和结尾的空格以及（连续的）空格。</p>
<p>下面是在 schema 中一个有关 token 声明的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">type</span>=<span class="string">"xs:token"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档中的元素看上去应该类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">customer</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">customer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">customer</span>&gt;</span>	John Smith	<span class="tag">&lt;/<span class="name">customer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释：在上面这个例子中，XML 解析器会移除制表符。</p>
<h3 id="字符串数据类型"><a href="#字符串数据类型" class="headerlink" title="字符串数据类型"></a>字符串数据类型</h3><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENTITIES</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ENTITY</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ID</td>
<td align="left">在 XML 中提交 ID 属性的字符串 (仅与 schema 属性一同使用)</td>
</tr>
<tr>
<td align="left">IDREF</td>
<td align="left">在 XML 中提交 IDREF 属性的字符串(仅与 schema 属性一同使用)</td>
</tr>
<tr>
<td align="left">IDREFS language</td>
<td align="left">包含合法的语言 id 的字符串</td>
</tr>
<tr>
<td align="left">Name</td>
<td align="left">包含合法 XML 名称的字符串</td>
</tr>
<tr>
<td align="left">NCName</td>
<td align="left">`NCName    ::=    (Letter</td>
</tr>
<tr>
<td align="left">NMTOKEN</td>
<td align="left">在 XML 中提交 NMTOKEN 属性的字符串 (仅与 schema 属性一同使用)</td>
</tr>
<tr>
<td align="left">NMTOKENS</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">normalizedString</td>
<td align="left">不包含换行符、回车或制表符的字符串</td>
</tr>
<tr>
<td align="left">QName</td>
<td align="left"><code>QName    ::=    (Prefix &#39;:&#39;)? LocalPart</code><br><code>Prefix    ::=    NCName</code><br><code>LocalPart    ::=    NCName</code></td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">字符串</td>
</tr>
<tr>
<td align="left">token</td>
<td align="left">不包含换行符、回车或制表符、开头或结尾空格或者多个连续空格的字符串</td>
</tr>
</tbody></table>
<h3 id="对字符串数据类型的限定（Restriction）"><a href="#对字符串数据类型的限定（Restriction）" class="headerlink" title="对字符串数据类型的限定（Restriction）"></a>对字符串数据类型的限定（Restriction）</h3><p>可与字符串数据类型一同使用的限定：</p>
<ul>
<li>enumeration</li>
<li>length</li>
<li>maxLength</li>
<li>minLength</li>
<li>pattern (NMTOKENS、IDREFS 以及 ENTITIES 无法使用此约束)</li>
<li>whiteSpace</li>
</ul>
<h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><h3 id="日期数据类型（Date-Data-Type）"><a href="#日期数据类型（Date-Data-Type）" class="headerlink" title="日期数据类型（Date Data Type）"></a>日期数据类型（Date Data Type）</h3><p>日期使用此格式进行定义：”YYYY-MM-DD”</p>
<p>下面是一个有关 schema 中日期声明的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"start"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档中的元素看上去应该类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">start</span>&gt;</span>2002-09-24<span class="tag">&lt;/<span class="name">start</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如需规定一个时区，您也可以通过在日期后加一个 “Z” 的方式，使用世界调整时间（UTC time）来输入一个日期 - 比如这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">start</span>&gt;</span>2002-09-24Z<span class="tag">&lt;/<span class="name">start</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者也可以通过在日期后添加一个正的或负时间的方法，来规定以世界调整时间为准的偏移量 - 比如这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">start</span>&gt;</span>2002-09-24-06:00<span class="tag">&lt;/<span class="name">start</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">start</span>&gt;</span>2002-09-24+06:00<span class="tag">&lt;/<span class="name">start</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="时间数据类型（Time-Data-Type）"><a href="#时间数据类型（Time-Data-Type）" class="headerlink" title="时间数据类型（Time Data Type）"></a>时间数据类型（Time Data Type）</h3><p>时间使用下面的格式来定义：”hh:mm:ss”</p>
<p>下面是一个有关 schema 中时间声明的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"start"</span> <span class="attr">type</span>=<span class="string">"xs:time"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>时区同上</p>
<h3 id="日期时间数据类型（DateTime-Data-Type）"><a href="#日期时间数据类型（DateTime-Data-Type）" class="headerlink" title="日期时间数据类型（DateTime Data Type）"></a>日期时间数据类型（DateTime Data Type）</h3><p>日期时间使用下面的格式进行定义：”YYYY-MM-DDThh:mm:ss”</p>
<p>下面是一个有关 schema 中日期时间声明的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"startdate"</span> <span class="attr">type</span>=<span class="string">"xs:dateTime"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">startdate</span>&gt;</span>2002-05-30T09:00:00<span class="tag">&lt;/<span class="name">startdate</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>时区同上</p>
<h3 id="持续时间数据类型（Duration-Data-Type）"><a href="#持续时间数据类型（Duration-Data-Type）" class="headerlink" title="持续时间数据类型（Duration Data Type）"></a>持续时间数据类型（Duration Data Type）</h3><p>时间间隔使用下面的格式来规定：”PnYnMnDTnHnMnS”，其中：</p>
<ul>
<li>P 表示周期(必需)</li>
<li>nY 表示年数</li>
<li>nM 表示月数</li>
<li>nD 表示天数</li>
<li>T 表示时间部分的起始 （如果您打算规定小时、分钟和秒，则此选项为必需）</li>
<li>nH 表示小时数</li>
<li>nM 表示分钟数</li>
<li>nS 表示秒数</li>
</ul>
<p>如需规定一个负的持续时间，请在 P 之前输入减号：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">period</span>&gt;</span>-P10D<span class="tag">&lt;/<span class="name">period</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h3><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">date</td>
<td align="left">定义一个日期值</td>
</tr>
<tr>
<td align="left">dateTime</td>
<td align="left">定义一个日期和时间值</td>
</tr>
<tr>
<td align="left">duration</td>
<td align="left">定义一个时间间隔</td>
</tr>
<tr>
<td align="left">gDay</td>
<td align="left">定义日期的一个部分 - 天 (DD)</td>
</tr>
<tr>
<td align="left">gMonth</td>
<td align="left">定义日期的一个部分 - 月 (MM)</td>
</tr>
<tr>
<td align="left">gMonthDay</td>
<td align="left">定义日期的一个部分 - 月和天 (MM-DD)</td>
</tr>
<tr>
<td align="left">gYear</td>
<td align="left">定义日期的一个部分 - 年 (YYYY)</td>
</tr>
<tr>
<td align="left">gYearMonth</td>
<td align="left">定义日期的一个部分 - 年和月 (YYYY-MM)</td>
</tr>
<tr>
<td align="left">time</td>
<td align="left">定义一个时间值</td>
</tr>
</tbody></table>
<h3 id="对日期数据类型的限定（Restriction）"><a href="#对日期数据类型的限定（Restriction）" class="headerlink" title="对日期数据类型的限定（Restriction）"></a>对日期数据类型的限定（Restriction）</h3><p>可与日期数据类型一同使用的限定：</p>
<ul>
<li>enumeration</li>
<li>maxExclusive</li>
<li>maxInclusive</li>
<li>minExclusive</li>
<li>minInclusive</li>
<li>pattern</li>
<li>whiteSpace</li>
</ul>
<h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><h3 id="十进制数据类型"><a href="#十进制数据类型" class="headerlink" title="十进制数据类型"></a>十进制数据类型</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"prize"</span> <span class="attr">type</span>=<span class="string">"xs:decimal"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>您可规定的十进制数字的最大位数是 18 位。</p>
<h3 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型"></a>整数数据类型</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"prize"</span> <span class="attr">type</span>=<span class="string">"xs:integer"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><table>
<thead>
<tr>
<th align="left">名字</th>
<th align="left">秒数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">byte</td>
<td align="left">有正负的 8 位整数</td>
</tr>
<tr>
<td align="left">decimal</td>
<td align="left">十进制数</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">有正负的 32 位整数</td>
</tr>
<tr>
<td align="left">integer</td>
<td align="left">整数值</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">有正负的 64 位整数</td>
</tr>
<tr>
<td align="left">negativeInteger</td>
<td align="left">仅包含负值的整数 ( .., -2, -1.)</td>
</tr>
<tr>
<td align="left">nonNegativeInteger</td>
<td align="left">仅包含非负值的整数 (0, 1, 2, ..)</td>
</tr>
<tr>
<td align="left">nonPositiveInteger</td>
<td align="left">仅包含非正值的整数 (.., -2, -1, 0)</td>
</tr>
<tr>
<td align="left">positiveInteger</td>
<td align="left">仅包含正值的整数 (1, 2, ..)</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">有正负的 16 位整数</td>
</tr>
<tr>
<td align="left">unsignedLong</td>
<td align="left">无正负的 64 位整数</td>
</tr>
<tr>
<td align="left">unsignedInt</td>
<td align="left">无正负的 32 位整数</td>
</tr>
<tr>
<td align="left">unsignedShort</td>
<td align="left">无正负的 16 位整数</td>
</tr>
<tr>
<td align="left">unsignedByte</td>
<td align="left">无正负的 8 位整数</td>
</tr>
</tbody></table>
<h3 id="对数值数据类型的限定（Restriction）"><a href="#对数值数据类型的限定（Restriction）" class="headerlink" title="对数值数据类型的限定（Restriction）"></a>对数值数据类型的限定（Restriction）</h3><p>可与数值数据类型一同使用的限定：</p>
<ul>
<li>enumeration</li>
<li>fractionDigits</li>
<li>maxExclusive</li>
<li>maxInclusive</li>
<li>minExclusive</li>
<li>minInclusive</li>
<li>pattern</li>
<li>totalDigits</li>
<li>whiteSpace</li>
</ul>
<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p>其他杂项数据类型包括逻辑、base64Binary、十六进制、浮点、双精度、anyURI、anyURI 以及 NOTATION。</p>
<h3 id="逻辑数据类型（Boolean-Data-Type）"><a href="#逻辑数据类型（Boolean-Data-Type）" class="headerlink" title="逻辑数据类型（Boolean Data Type）"></a>逻辑数据类型（Boolean Data Type）</h3><p>逻辑数据性用于规定 true 或 false 值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"disabled"</span> <span class="attr">type</span>=<span class="string">"xs:boolean"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>合法的布尔值是 true、false、1（表示 true） 以及 0（表示 false）。</p>
<h3 id="二进制数据类型（Binary-Data-Types）"><a href="#二进制数据类型（Binary-Data-Types）" class="headerlink" title="二进制数据类型（Binary Data Types）"></a>二进制数据类型（Binary Data Types）</h3><p>二进制数据类型用于表达二进制形式的数据。</p>
<p>我们可使用两种二进制数据类型：</p>
<ul>
<li>base64Binary (Base64 编码的二进制数据)</li>
<li>hexBinary (十六进制编码的二进制数据)</li>
</ul>
<p>下面是一个关于某个 scheme 中 hexBinary 声明的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"blobsrc"</span> <span class="attr">type</span>=<span class="string">"xs:hexBinary"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="AnyURI-数据类型（AnyURI-Data-Type）"><a href="#AnyURI-数据类型（AnyURI-Data-Type）" class="headerlink" title="AnyURI 数据类型（AnyURI Data Type）"></a>AnyURI 数据类型（AnyURI Data Type）</h3><p>anyURI 数据类型用于规定 URI。</p>
<p>下面是一个关于某个 scheme 中 anyURI 声明的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"src"</span> <span class="attr">type</span>=<span class="string">"xs:anyURI"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档中的元素看上去应该类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pic</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/images/smiley.gif"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释：假如某个 URI 含有空格，请用 %20 替换它们。</p>
<h3 id="杂项数据类型（Miscellaneous-Data-Types）"><a href="#杂项数据类型（Miscellaneous-Data-Types）" class="headerlink" title="杂项数据类型（Miscellaneous Data Types）"></a>杂项数据类型（Miscellaneous Data Types）</h3><ul>
<li>anyURI</li>
<li>base64Binary</li>
<li>boolean</li>
<li>double</li>
<li>float</li>
<li>hexBinary</li>
<li>NOTATION</li>
<li>QName</li>
</ul>
<h3 id="对杂项数据类型的限定（Restriction）"><a href="#对杂项数据类型的限定（Restriction）" class="headerlink" title="对杂项数据类型的限定（Restriction）"></a>对杂项数据类型的限定（Restriction）</h3><p>可与杂项数据类型一同使用的限定：</p>
<ul>
<li>enumeration (布尔数据类型无法使用此约束*)</li>
<li>length (布尔数据类型无法使用此约束)</li>
<li>maxLength (布尔数据类型无法使用此约束)</li>
<li>minLength (布尔数据类型无法使用此约束)</li>
<li>pattern</li>
<li>whiteSpace</li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>Schema</tag>
        <tag>XSD</tag>
        <tag>XML Schema</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes] Object detection via a multi-region and sematic segmentation-aware CNN model</title>
    <url>/2016/12/13/%5BReading%20Notes%5D%20Object%20detection%20via%20a%20multi-region%20and%20sematic%20segmentation-aware%20CNN%20model/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>This article propose an object detection system that relies on a multi-region deep convolutional neural network that also encodes sematic segmentation-aware features. The module aims at capturing a diverse set of discriminative appearance factors and exhibits localization sensitivity that is essential for accurate object localization. They exploit the above properties of their recognition module by intergrating it on an iterative localization mechanism that alternates between socring a box proposal and refgining its location with a deep CNN regression model. And consiquently, they detect objects with very high localization accuracy.</p>
<h2 id="I-Introduction"><a href="#I-Introduction" class="headerlink" title="I. Introduction"></a>I. Introduction</h2><p>The definition of object detection:</p>
<blockquote>
<p>Given an image return all the instances of one or more type of objects in form of bounding boxes that tightly enclose them.</p>
</blockquote>
<a id="more"></a>

<p>Overfeat:</p>
<blockquote>
<p>Using two CNN models that apply in a sliding window fashion on multiple scales of an image. The first is used to classify if a window contains an object. The second is to predict the true bounding box location of the object. And use <strong>greedy algorithm</strong> in the end to merge them.</p>
</blockquote>
<p>R-CNN:</p>
<blockquote>
<p>Using <strong>Alex Krizhevsky’s Net</strong>  to extract features from box proposals provided by selective search and then it classifies them with class specific linear SVMs.</p>
</blockquote>
<p>How to further advance the state-of-the-art on object detection?</p>
<blockquote>
<p>Focusing on object representation and object localization. </p>
</blockquote>
<p>Object representation:</p>
<blockquote>
<p>Indeed features matter a lot on object detection. Instead of proposing only a network architecture that is deeper, here they also opt for an architecture of greater width. And that was accomplished at two levels:</p>
</blockquote>
<blockquote>
<ol>
<li>They want their object representation to capture several different aspects of an object. To achieve this, they propose a multi-component CNN model (multi-region CNN). Each component of it is steered to focus on a different region.</li>
<li>They wish to enrich the above representation so that it also captures semantic segmentation information</li>
</ol>
</blockquote>
<p>Object localization:</p>
<blockquote>
<p>They attempt to built a more powerful localization system that combines their multi-region CNN model with a CNN-model for bounding box regression, which are used within an iterative scheme that alternates between scoring candidate boxes and reﬁning their coordinates.</p>
</blockquote>
<p>Their Contributions:</p>
<blockquote>
<ol>
<li>They develop a multi-region CNN recognition model that yields an enriched object representation capable of capturing a diversity of discriminative appearance factors and of exhibiting localization sensitivity that is desired for the task of accurate object localization.</li>
<li>They furthermore extend the above model by proposing a uniﬁed neural network architecture that also learns semantic segmentation-aware CNN features for the task of object detection.</li>
<li>They show how to significantly improve the localization capability by coupling the aforementioned CNN recognition model with a CNN model for bounding box regression.</li>
<li>Their detection system achieves <strong>mAP</strong> of 78.2% and 73.9% on <strong>VOC2007 and VOC2012</strong> detection challenges respectively.</li>
</ol>
</blockquote>
<h2 id="II-Multi-Region-CNN-Model"><a href="#II-Multi-Region-CNN-Model" class="headerlink" title="II. Multi-Region CNN Model"></a>II. Multi-Region CNN Model</h2><ol>
<li>Activation maps module<ul>
<li>This part of the network gets as input the entire image and outputs activation maps (feature maps) by forwarding it through a sequence of convolutional layers.</li>
</ul>
</li>
<li>Region adaptation module<ul>
<li>Given a region R on the image and the activation maps of the image, this module projects R on the activation maps, crops the activations that lay inside it, pools them with a spatially adaptive (max-)pooling layer, and then forwards them through a multi-layer network.</li>
</ul>
</li>
</ol>
<p>This is the architecture of the Multi-Region CNN model:</p>
<p><img src="http://ohykn376o.bkt.clouddn.com/OBDE2.png" alt="Figure2"></p>
<p>There are two aims of that:</p>
<blockquote>
<ol>
<li>to force the network to capture various complementary aspects of the objects appearance, thus leading to a much richer and more robust object representation</li>
<li>to also make the resulting representation more sensitive to inaccurate localization, which is also crucial for object detection</li>
</ol>
</blockquote>
<p><strong><em>The regions they deploy:</em></strong></p>
<blockquote>
<ol>
<li>Original candidate box</li>
<li>Half boxes</li>
<li>Central Regions</li>
<li>Border Regions</li>
<li>Contextual Region</li>
</ol>
</blockquote>
<p><strong><em>Why these regions helps?</em></strong></p>
<blockquote>
<ol>
<li>Discriminative feature diversification</li>
<li>Localization-aware representation</li>
</ol>
</blockquote>
<h2 id="III-Semantic-Segmentation-Aware-CNN-Model"><a href="#III-Semantic-Segmentation-Aware-CNN-Model" class="headerlink" title="III. Semantic Segmentation-Aware CNN Model"></a>III. Semantic Segmentation-Aware CNN Model</h2><p><img src="http://ohykn376o.bkt.clouddn.com/OBDE1.png" alt="figure4"></p>
<ul>
<li>Activation maps module for semantic segmentation aware features<ul>
<li><strong><em>Weakly supervised training</em></strong>(see Figure 4)</li>
<li>Activation maps</li>
</ul>
</li>
<li>Region adaptation module for semantic segmentation aware features</li>
</ul>
<p>They combine the Multi-Region CNN features and the semantic segmentation aware CNN features by concatenating them. The resulting network thus jointly learns deep features of both types during training.</p>
<h2 id="IV-Object-Localization"><a href="#IV-Object-Localization" class="headerlink" title="IV. Object Localization"></a>IV. Object Localization</h2><p>There are three main components in this section:</p>
<ol>
<li><p>CNN region adaptation module for bounding box regression</p>
<ul>
<li>It is applied on top of the activation maps produced from the Multi-Region CNN model and, instead of a typical one-layer ridge regression model, consists of two hidden fully connected layers and one prediction layer that outputs 4 values per category. In order to allow it to predict the location of object instances that are not in the close proximity of any of the initial candidate boxes, we Use as region a box obtained by enlarging the candidate box by a factor of 1.3. This combination offers a significant boost on the detection performance of out system by allowing it to make more accurate predictions and for more distant objects.</li>
</ul>
</li>
<li><p>Iterative Localization</p>
<ul>
<li>Their localization scheme starts from the selective search proposals and works by iteratively scoring them and refining their coordinates.</li>
</ul>
</li>
<li><p>Bounding box voting</p>
<ul>
<li>Because of the multiple regression steps, the generated boxes will be highly concentrated around the actual objects of interest. They exploit this “by-product” of the iterative localization scheme by adding a step of bounding box voting.</li>
</ul>
</li>
</ol>
<h2 id="V-Implementation-Details"><a href="#V-Implementation-Details" class="headerlink" title="V. Implementation Details"></a>V. Implementation Details</h2><blockquote>
<p>For all the CNN models involved in their proposed system, we used the publicly available <strong>16-layers VGG model</strong> pre-trained on ImageNet for the task of image classification.</p>
</blockquote>
<p>Multi-Region CNN model</p>
<blockquote>
<p>Its activation maps module consistes of the convolustional part of the 16-layers VGG-Net that outputs 512 feature channels. The max-pooling layer right after the last convolutional layer is omitted on this module. Each region adaptation module inherits the fully connected layers of the 16-layers VGG-Net and is fine-tuned separately from the others.</p>
</blockquote>
<p>Semantic segmentation-aware CNN model</p>
<blockquote>
<p>The activation maps module architecture consists of the 16-layers VGG-Net without the last classification layer and transformed to a Fully Convolutional Network.</p>
</blockquote>
<p>Classification SVMs</p>
<blockquote>
<p>The ground truth bounding boxes are used as positive samples and the selective search proposals that overlap with the ground truth boxes by less than 0.3, are used as negative samples.</p>
</blockquote>
<p>CNN region adaptation module for bounding box regression</p>
<blockquote>
<p>The region adaptation module for bounding box regression inherits the fully connected hidden layers of the 16-layers VGG-Net. As a loss function they use the euclidean distance between the target values and the network predictions.</p>
</blockquote>
<h2 id="VI-Experimental-Evaluation"><a href="#VI-Experimental-Evaluation" class="headerlink" title="VI. Experimental Evaluation"></a>VI. Experimental Evaluation</h2><ol>
<li>Results on PASCAL VOC2007</li>
<li>Detection error analysis</li>
<li>Results on PASCAL VOC2012</li>
</ol>
<h2 id="VII-Conclusion"><a href="#VII-Conclusion" class="headerlink" title="VII. Conclusion"></a>VII. Conclusion</h2><p>Two key factors:</p>
<ol>
<li>the diversification of the discriminative appearance factors that it captures by steering its focus on different regions of the object</li>
<li>the encoding of semantic segmentation-aware features. By using it in the context of a CNN-based localization refinement scheme, they showed that it achieves excellent results that surpass the state-of-the-are by a significant margin</li>
</ol>
]]></content>
      <tags>
        <tag>Reading Notes</tag>
        <tag>Object Detection</tag>
        <tag>CNN</tag>
        <tag>multi-region</tag>
        <tag>Sematic segmentation-aware</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes]Privacy-CNH: A Framework to Detect Photo Privacy with Convolutional Neural Network using Hierarchical Features</title>
    <url>/2016/12/10/%5BReading%20Notes%5D%20Privacy-CNH-%20A%20Framework%20to%20Detect%20Photo%20Privacy%20with%20Convolutional%20Neural%20Network%20using%20Hierarchical%20Features/</url>
    <content><![CDATA[<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Mobile devices have revolutionized how people share photos with each other on social networks with a single click of a button.</p>
<p>The content of the photos people shared to the internet are rarely analyzed by the websites before the photos are made available to view. After the photos are posted on the social network to the public to view, it is close to impossible to permanently delete the uploaded photos.</p>
<p>Photo leakage, regretion after posting and malicious posting happens from time to time.</p>
<a id="more"></a>
<h2 id="Related-Works"><a href="#Related-Works" class="headerlink" title="Related Works"></a>Related Works</h2><p>Existing works on photo privacy detection, which rely on low-level vision features, are non-informative to the users regarding what privacy information is leaked from their photos.</p>
<h2 id="Detailed-Design"><a href="#Detailed-Design" class="headerlink" title="Detailed Design"></a>Detailed Design</h2><p><img src="http://ohykn376o.bkt.clouddn.com/20161210PCNH1.jpg" alt="framework"></p>
<p>PCNH is a combination of PCNN and PONN. Given the image features in the input layer, the object features learning pipeline processes the features using hi(x) as the activation functions and the param eters of network structure is encoded as Vi, finally obtaining the photo privacy detection result in the output layer. The convolutional features learning pipeline processes the features using j(x) as the activation function and the parameters of network structure is encoded as Ws, finally obtaining the photo privacy detection result in the output layer. hi(x), j(x) are activation functions, which map from a vector to a scalar.</p>
<h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p><img src="http://ohykn376o.bkt.clouddn.com/20161210PCNH2.jpg" alt="Evaluation Chart"></p>
]]></content>
      <tags>
        <tag>Reading Notes</tag>
        <tag>CNN</tag>
        <tag>PCNH</tag>
        <tag>Privacy Detect</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Notes] UniCrawl: A Practical Geographically Distributed Web Crawler</title>
    <url>/2016/12/11/%5BReading%20Notes%5D%20UniCrawl-%20A%20Practical%20Geographically%20Distributed%20Web%20Crawler/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Cause the wealth of information available on the web keeps growing, we want to use web crawler to get them. But the traditional method has a fatal limit of its large infrastructure cost. To reduce it, we developed this method, unicrawl, which can show a performance improvement of 93.6% in terms of network bandwidth consumption, and a speedup factor of 1.75.</p>
<h2 id="I-introduction"><a href="#I-introduction" class="headerlink" title="I. introduction"></a>I. introduction</h2><p>Nowadays, it’s common that to use parallel process on a large number of machines to achieve a reasonable collection time. While this method requires large computing infrastructures. Like Google and Bing, who rely on big data centers. </p>
<a id="more"></a>
<p>As for the public crawl repositories, they require externalizing computation and data hosting to a commercial cloud provider. Which may pose the problem of data availability in the mid-long term. And cause there are large amounts of data unnecessary, postprocessing is needed.</p>
<p>A solution to those problems is to distribute the crawling effort over several geographically distributed locations. For instance, by allowing several small companies to mutualize their crawling infrastructures. In addition, such an approach leverages data locality as sites can crawl web servers that are geographically nearby. But in this way, the synchronization between the crawler at the different sites is a new problem. Our goal is to reduce such communication costs.</p>
<p>UniCrawl is an efficient geo-distributed crawler that aims at minimizing inter-site communication costs. Our design is both practical and scalable. We assess this claim with a detailed evaluation of UniCrawl in a controlled environment using the ClueWeb12 dataset, as well as in geo-distributed setting using 3 distinct sites located in Germany.</p>
<h3 id="outline"><a href="#outline" class="headerlink" title="outline:"></a>outline:</h3><p>Section II is related work. Section III introduces the crawler architecture, refining it from existing well-founded central disigns. Section IV is the details about the internal implementaion. Section V presents the experimental results, both in-vitro, and in-vivo over multiple geographical locations in Germany. We discuss out results and future work in Section V. We conclude the paper inSection VII.</p>
<h2 id="II-Related-work"><a href="#II-Related-work" class="headerlink" title="II. Related work"></a>II. Related work</h2><p>There are several problems for every crawler to solve:</p>
<ol>
<li>since the amount of information to parse is huge, a crawler must scale</li>
<li>a crawler should select which information to download first, and which information to refresh over time</li>
<li>a crawler should not be a burden for the web sites that host the content</li>
<li>adversaries, e.g., spider traps, need to be avoided with care</li>
</ol>
<p>Mercator/Polybot/IBM WebFountain/Ubicrawl and etc..</p>
<h2 id="III-Distributed-crawler-architecture"><a href="#III-Distributed-crawler-architecture" class="headerlink" title="III. Distributed crawler architecture"></a>III. Distributed crawler architecture</h2><h3 id="A-Single-site-Design"><a href="#A-Single-site-Design" class="headerlink" title="A. Single site Design"></a>A. Single site Design</h3><ol>
<li>Map-reduce:<ul>
<li>spill</li>
<li>shuffle</li>
<li>reduce</li>
</ul>
</li>
<li>site storage<ul>
<li>In UniCrawl, the crawl database of a site is implemented as a single distributed map structure. This map contains for each page its URL, content, and outlinks.</li>
<li>INFINISPAN, a distributed key-value store stat supports the following features: <ul>
<li>Routing: Notes are organized in a ring</li>
<li>Elasticity</li>
<li>Storage</li>
<li>Reliability</li>
<li>Interface</li>
<li>Consistency</li>
<li>Querying</li>
</ul>
</li>
</ul>
</li>
<li>Detail of Phases<ul>
<li>Generate: The goal of the generate phase is to select a set of pages to process during the round.</li>
<li>Fetch: During the fetch phase, the map step first groups by host the pages that were generated in the previous phase.</li>
<li>Parse: Once the pages are fetched, they are analyzed during the parse phase.</li>
<li>Update: The goal of the update phase is to refresh the scores of pages that belong to the frontier in order to prioritize them.</li>
</ul>
</li>
</ol>
<h3 id="B-Multi-site-Operations"><a href="#B-Multi-site-Operations" class="headerlink" title="B. Multi-site Operations"></a>B. Multi-site Operations</h3><p>Several key ideas allow UniCrawl to be practical in this setting:</p>
<ol>
<li><p>Each site is independent and crawls the web autonomously</p>
</li>
<li><p>We unite all the site data stores</p>
</li>
<li><p>Sites exchanges dynamically the URLs they discover over the course of the crawl</p>
</li>
<li><p>Federating the storage: One of the key design concerns of UniCrawl is to bring small monifications to the site code base in order be usable over multiple geographical locations.</p>
</li>
<li><p>collaboration between sites: Following the approach advocated by Cho and Garcia-Molina. UniCrawl exchanges newly discovered URLs over time. This exchange occurs at the end of the update phase.</p>
<ul>
<li>We implement the crawl database as a distributed ensemble map that span all the sites. This map operates in frontier mode with a replication factor of one.</li>
</ul>
</li>
<li><p>Crawl quality and cost: The quality of the crawling operation is not only measured by means of pure web-graph exploration but also by the rounds it takes to discover the most interesting pages.</p>
</li>
</ol>
<h2 id="IV-Implementation"><a href="#IV-Implementation" class="headerlink" title="IV. Implementation"></a>IV. Implementation</h2><p>We implemented UniCrawl inJava, starting from the code base of Nutch version 2.5.3.</p>
<p>Nutch makes use of Apache Gora, an open-source framework that provides an in-memory and persistent data model for big data.</p>
<p>Intotal, our contribution accounts for about a dozen thousands lines of code (LOC) split as follows: 9.4 kLOC for Ensemble, 1.1 kLOC for Gora and 2.3 kLOC patch for Nutch</p>
<h3 id="A-Merging-phases"><a href="#A-Merging-phases" class="headerlink" title="A. Merging phases"></a>A. Merging phases</h3><p>Cause each new map-reduce job creation is expensive as it requires to start a dedicated Java virtual machine, and deploy the appropriate jars. To lower this cost, we merge the fetch and parse phases in out UniCrawl implementation. This means that whenever a reducer fetches a new page, it parses its content and extract the out-links. These links are then directly inserted in the crawl database together with the fetched page.</p>
<h3 id="B-Caching"><a href="#B-Caching" class="headerlink" title="B. Caching"></a>B. Caching</h3><p>To avoid sending out an URL multiple times across sites, we use a distributed solution. In more details, this cache is a bounded ENSENMBLE map C local to each site and replicated at all nodes in a site. During the update phase, when a reducer selects a URL in the frontier that is associated to a remote site, it first check locally with C is this URL woa previously sent. If this is the case , the reducer simply skips the call to putIfAbsent. Since C is replicated at all nodes, every map-reduce node is co-located with an INFINISPAN node, and C is in memory, this inclusion test costs less than a millisecond.</p>
<h2 id="V-Evaluation"><a href="#V-Evaluation" class="headerlink" title="V. Evaluation"></a>V. Evaluation</h2><p>Evaluate UniCrawl through several key metrics such as the page processing rate, the memory usage and the network traffic across sites.</p>
<p>Two parts:</p>
<ol>
<li>Evaluate our approach in-vitro, by running UniCrawl against the ClueWeb12 benchmark in an emulated multi-site architecture and crawling from a local repository.</li>
<li>Report several experimental results where we deploy UniCrawl at multiple localtions in Germany and access actual web sites.</li>
</ol>
<h3 id="A-In-vitro-validation"><a href="#A-In-vitro-validation" class="headerlink" title="A. In-vitro validation"></a>A. In-vitro validation</h3><ol>
<li>Single site performance</li>
<li>Emulating multiple sites</li>
</ol>
<h3 id="B-UniCrawl-in-the-wild"><a href="#B-UniCrawl-in-the-wild" class="headerlink" title="B. UniCrawl in the wild"></a>B. UniCrawl in the wild</h3><ol>
<li>URL Exchange</li>
<li>Comparison with Nutch</li>
<li>Scalability</li>
</ol>
]]></content>
      <tags>
        <tag>Web Crawler</tag>
        <tag>Unicrawl</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook 配置远程访问</title>
    <url>/2018/09/19/jupyter%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h1><blockquote>
<p>pip install ipython<br>pip install jupyter</p>
</blockquote>
<h1 id="生成jupyter配置文件"><a href="#生成jupyter配置文件" class="headerlink" title="生成jupyter配置文件"></a>生成jupyter配置文件</h1><blockquote>
<p>jupyter notebook –generate-config</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#: jupyter notebook --generate-config</span></span><br><span class="line">Writing default config to: /home/xm/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>

<h1 id="自动生成密码"><a href="#自动生成密码" class="headerlink" title="自动生成密码"></a>自动生成密码</h1><blockquote>
<p>jupyter notebook password</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#: jupyter notebook password</span></span><br><span class="line">Enter password: <span class="comment"># 这里输入密码不会显示字符的</span></span><br><span class="line">Verify password: </span><br><span class="line">[NotebookPasswordApp] Wrote hashed password to /home/xm/.jupyter/jupyter_notebook_config.json</span><br><span class="line"><span class="comment"># 密码已经被加密记录到这个文件中了</span></span><br></pre></td></tr></table></figure>

<h1 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h1><blockquote>
<p>cat /home/xm/.jupyter/jupyter_notebook_config.json</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#: cat /home/xm/.jupyter/jupyter_notebook_config.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"NotebookApp"</span>: &#123;</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"这是你的密码，一整段都复制 下来"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><blockquote>
<p>vim /home/xm/.jupyter/jupyter_notebook_config.py</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#懒得找对应配置项的朋友，直接把这四项配置写到文件开头就可以了</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'*'</span></span><br><span class="line">c.NotebookApp.password = <span class="string">'sha:ce...刚才复制的那个密文'</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.port = 8888 <span class="comment">#可自行指定一个端口，访问时使用该端口</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Jupyter Notebook</tag>
        <tag>远程访问</tag>
        <tag>ipython</tag>
      </tags>
  </entry>
  <entry>
    <title>latex:使用longtable实现表格跨页</title>
    <url>/2018/12/27/latex-%E4%BD%BF%E7%94%A8longtable%E5%AE%9E%E7%8E%B0%E8%A1%A8%E6%A0%BC%E8%B7%A8%E9%A1%B5/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>使用包<code>\usepackage{longtable}</code>，然后使用<code>\begin{longtable}...\end{longtable}</code>代替tabular即可</p>
<p>注意**<em>不能在一个表格上同时使用table和longtable**</em>，比如<code>\begin{table}\begin{longtable}...\end{longtable}\end{table}</code>，这会使longtable无法分页。</p>
<h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;center&#125;</span></span></span><br><span class="line">	<span class="tag">\<span class="name">begin</span><span class="string">&#123;longtable&#125;</span><span class="string">&#123;p&#123;2.4cm&#125;</span></span>p&#123;5.4cm&#125;p&#123;3.6cm&#125;&#125;</span><br><span class="line">		<span class="tag">\<span class="name">caption</span><span class="string">&#123;服务模式的语义解释和案例&#125;</span></span><span class="tag">\<span class="name">\</span></span></span><br><span class="line">		<span class="tag">\<span class="name">label</span><span class="string">&#123;revenuepatternexplain&#125;</span></span><span class="tag">\<span class="name">\</span></span></span><br><span class="line">		<span class="tag">\<span class="name">hline</span></span><span class="tag">\<span class="name">noalign</span><span class="string">&#123;\smallskip&#125;</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		<span class="tag">\<span class="name">hline</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		名称 &amp; 语义解释 &amp; 案例说明 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">		<span class="tag">\<span class="name">hline</span></span></span><br><span class="line">	<span class="tag">\<span class="name">end</span><span class="string">&#123;longtable&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;center&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Latex</tag>
        <tag>Long Table</tag>
        <tag>表格跨页</tag>
      </tags>
  </entry>
  <entry>
    <title>latex:修改bst使bib引文按照引用顺序排序</title>
    <url>/2018/12/27/latex-%E4%BF%AE%E6%94%B9bst%E4%BD%BFbib%E5%BC%95%E6%96%87%E6%8C%89%E7%85%A7%E5%BC%95%E7%94%A8%E9%A1%BA%E5%BA%8F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用spring的spbasic.bst模板，结果引文是按照作者名字的字母顺序排序的。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol>
<li><p>使用任意一款文本编辑器打开spbasic.bst文件</p>
</li>
<li><p>找到其中所有的<code>SORT</code>行</p>
</li>
<li><p>修改为<code>%SORT</code>即可</p>
<p>注意大小写，spbasic.bst中应有两处</p>
</li>
</ol>
<p>如果未生效，可能是bst编译的文件没有更新，试着把bbl文件删除，然后重新编译一下</p>
<h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><ol>
<li>bst文件什么也不写的话默认是按照引用顺序来排序的</li>
<li>很多模板中有一部分关于排序的函数，使其按照作者名字字母顺序排序</li>
<li><code>SORT</code>行的作用就是调用这些方法，注释掉之后就变成了默认排序方法</li>
</ol>
]]></content>
      <tags>
        <tag>Latex</tag>
        <tag>Latex Bib</tag>
        <tag>Latex Bst</tag>
      </tags>
  </entry>
  <entry>
    <title>latex:统一图表caption格式</title>
    <url>/2018/12/27/latex-%E7%BB%9F%E4%B8%80caption%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>通过caption包中的captionsetup来进行格式的统一设定</p>
<h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;caption&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">captionsetup</span><span class="string">&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">   labelsep = quad,</span></span></span><br><span class="line"><span class="tag"><span class="string">   justification = raggedright,</span></span></span><br><span class="line"><span class="tag"><span class="string">   font = &#123;singlespacing,sf&#125;</span></span>,</span><br><span class="line">   singlelinecheck=off,</span><br><span class="line">   skip=4pt,</span><br><span class="line">   position=top&#125;</span><br></pre></td></tr></table></figure>

<p>Captionsetup中具体字段含义及修改方法见：<a href="https://blog.csdn.net/stereohomology/article/details/37741591" target="_blank" rel="noopener">https://blog.csdn.net/stereohomology/article/details/37741591</a></p>
]]></content>
      <tags>
        <tag>Latex</tag>
        <tag>Caption</tag>
      </tags>
  </entry>
  <entry>
    <title>latex数学符号表</title>
    <url>/2019/04/02/latex%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8/</url>
    <content><![CDATA[<p>reference:<a href="http://www.mohu.org/info/lshort-cn.pdf" target="_blank" rel="noopener">一份不太简短的 LATEX 2ε 介绍</a></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402205303.png"><br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402205327.png"><br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402205344.png"><br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402205358.png"><br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402205411.png"><br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402205429.png"><br><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190402205441.png"></p>
]]></content>
      <tags>
        <tag>latex</tag>
        <tag>数学符号</tag>
      </tags>
  </entry>
  <entry>
    <title>linux如何查看磁盘可用空间</title>
    <url>/2018/09/19/linux%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E7%A3%81%E7%9B%98%E5%8F%AF%E7%94%A8%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><blockquote>
<p>df -h</p>
</blockquote>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER_MANE@PC_NAME:~$ df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev             16G     0   16G   0% /dev</span><br><span class="line">tmpfs           3.2G   26M  3.2G   1% /run</span><br><span class="line">/dev/sda1       198G  151G   38G  81% /</span><br><span class="line">tmpfs            16G  4.0K   16G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs            16G     0   16G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sdb1       917G  290G  581G  34% /SATA</span><br><span class="line">tmpfs           3.2G  8.0K  3.2G   1% /run/user/1004</span><br><span class="line">tmpfs           3.2G     0  3.2G   0% /run/user/1010</span><br><span class="line">tmpfs           3.2G     0  3.2G   0% /run/user/1003</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>磁盘</tag>
        <tag>空间</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-python安装错误：EnvironmentError:mysql_config not found</title>
    <url>/2017/04/24/mysql-python%E5%AE%89%E8%A3%85%E9%94%99%E8%AF%AF%EF%BC%9AEnvironmentError-%20mysql_config%20not%20found/</url>
    <content><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>安装mysql-python时报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Collecting mysql-python</span><br><span class="line">  Using cached MySQL-python-1.2.5.zip</span><br><span class="line">    Complete output from <span class="built_in">command</span> python setup.py egg_info:</span><br><span class="line">    sh: 1: mysql_config: not found</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      File <span class="string">"/tmp/pip-build-_itbcX/mysql-python/setup.py"</span>, line 17, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        metadata, options = get_config()</span><br><span class="line">      File <span class="string">"setup_posix.py"</span>, line 43, <span class="keyword">in</span> get_config</span><br><span class="line">        libs = mysql_config(<span class="string">"libs_r"</span>)</span><br><span class="line">      File <span class="string">"setup_posix.py"</span>, line 25, <span class="keyword">in</span> mysql_config</span><br><span class="line">        raise EnvironmentError(<span class="string">"%s not found"</span> % (mysql_config.path,))</span><br><span class="line">    EnvironmentError: mysql_config not found</span><br><span class="line"></span><br><span class="line">    ----------------------------------------</span><br><span class="line">Command <span class="string">"python setup.py egg_info"</span> failed with error code 1 <span class="keyword">in</span> /tmp/pip-build-_itbcX/mysql-python/</span><br></pre></td></tr></table></figure>

<h2 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h2><p>没有安装libmysqlclient-dev。</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>执行：</p>
<p><code>sudo apt-get install libmysqlclient-dev</code></p>
<p>安装成功后，再运行<code>pip install mysql-python</code>即可。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Trick</tag>
        <tag>Mysql</tag>
        <tag>mysql-python安装错误</tag>
      </tags>
  </entry>
  <entry>
    <title>OWL本体语言学习笔记</title>
    <url>/2019/03/18/owl%E6%9C%AC%E4%BD%93%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="OWL简介"><a href="#OWL简介" class="headerlink" title="OWL简介"></a>OWL简介</h1><p>OWL(Web Ontology Language)是W3C开发的一种网络本体语言，用于对本体进行语义描述。OWL是针对各方面的需求在DAML+OIL的基础上进行改进而开发的，它一方面保持了对DAML+oIL／RDFs的兼容性，另一方面又保证了更加强大的语义表达能力，同时还要保证描述逻辑(DL，Description Logic)的可判定推理。W3C的设计人员针对各类特征的需求制定了三种相应的OWL的子语言，即OWL Lite、OWL DL和OWL Full，三种子语言的表达能力递增。</p>
<ol>
<li>OWL Lite是表达能力最弱的子语言。它是傩乙DL的一个子集，但是通过降低OWL DL中的公理约束，保证了迅速高效的推理。它支持基数约束，但基数值只能为O或l。因为0WL Lite表达能力较弱，为其开发支持工具要比其他两个子语言容易一些。OWL Lite用于提供给那些仅需要一个分类层次和简单约束的用户。</li>
<li>OWL DL(Description Logic，描述逻辑)将可判定推理能力和较强表达能力作为首要目标，而忽略了对RDFS的兼容性。0WL DL包括了OWL语言的所有语言成分，但使用时必须符合一定的约束，受到一定的限制。OWL DL提供了描述逻辑的推理功能，描述逻辑是OWL的形式化基础。</li>
<li>OWL Full包含OWL的全部语言成分并取消了OWL DL中的限制，它将RDFS扩展为一个完备的本体语言，支持那些不需要可计算性保证(no computational guarantees)但需要最强表达能力和完全自由的RDFS用户。在OWL Full中，一个类可以看成是个体的集合，也可以看成是一个个体。由于OWL Full取消了基数限制中对可传递性质的约束，因此不能保证可判定推理。</li>
</ol>
<h1 id="OWL本体的组成"><a href="#OWL本体的组成" class="headerlink" title="OWL本体的组成"></a>OWL本体的组成</h1><h2 id="个体（individual）"><a href="#个体（individual）" class="headerlink" title="个体（individual）"></a>个体（individual）</h2><p>个体代表领域中我们感兴趣的对象，OWL不使用唯一命名假设，即两个不同的名称可以对应一个个体（例如：“伊丽莎白女王”和“伊丽莎白温莎”是指同一个人）。在OWL中，必须明确表示个体之间是否相同，否则它们的关系是不明确的。</p>
<p>个体（individual）有时也被称作实例（Instance）。</p>
<h2 id="属性（Property）"><a href="#属性（Property）" class="headerlink" title="属性（Property）"></a>属性（Property）</h2><p>属性是个体之间的二元关系。在描述逻辑中，它们就是角色（Role）的概念。</p>
<p>按照属性的表意及性质可以分为以下四类属性：</p>
<ul>
<li>函数属性(Functional Property)——通过这个属性只能连接一个个体，如hasBirthMother</li>
<li>反函数属性(Inverse Functional Property)——即这个属性的反属性是函数属性，也就是对于一个给定的个体，只有最多一个个体能通过该属性连接那个个体，如isBirthMotherOf</li>
<li>传递属性(Transitive Property)——这个属性是可以传递的，如你的祖先的祖先也是你的祖先，hasAncestor</li>
<li>对称属性(Symmetric Property)——即这个属性是对称的，一个属性是对称的那么它就不能是函数属性。如你是你的兄弟的兄弟，hasSibling</li>
</ul>
<p>按照属性的链接对象不同可以分为以下三类：</p>
<ul>
<li>对象属性(Object Property)——连接两个个体。</li>
<li>数据类型属性(Datatype Property)——连接个体和XML Schema数据类型值或rdf literal,该属性不能为传递的，对称的，反函数的。</li>
<li>标注属性 (Annotation Property)——用来对类，属性，个体和本体添加信息(元数据)。OWL-DL对标注属性作出了如下限制：(1)标注属性的filler只能为,literal或URI或个体。(2)标注属性没有子属性，也不能为其它属性的子属性，而且不能使用domain和range。</li>
</ul>
<h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><p>表示一些个体的集合，它使用数学的方法描述出该类中成员必须具有的条件。概念（concept）这个词有时被用来代替类，实际上，类是概念的一个具体表现。</p>
<h1 id="OWL中本体的结构"><a href="#OWL中本体的结构" class="headerlink" title="OWL中本体的结构"></a>OWL中本体的结构</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>在使用一组术语之前，需要精确地指出哪些具体的词汇表将会用到。一个典型的OWL本体以命名空间声明开始，这些命名空间写到<a href="rdf:RDF\" target="_blank" rel="noopener">rdf:RDF\</a>标签中。</p>
<p>属性值是不具有命名空间的，在OWL里可以写出它们的完整URI。完整的URI中可以利用实体定义来简略。<br>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE rdf:RDF [</span></span><br><span class="line"><span class="meta">     &lt;!ENTITY vin  "http://www.w3.org/TR/2004/REC-owl-guide-20040210/wine#" &gt;</span></span><br><span class="line"><span class="meta">     &lt;!ENTITY food "http://www.w3.org/TR/2004/REC-owl-guide-20040210/food#" &gt; ]&gt;</span></span><br></pre></td></tr></table></figure>

<p>在声明这些实体后，我们可以将“&vin;merlot”作为<code>http://www.w3.org/TR/2004/REC -owl-guide-20040210/wine#merlot</code>的简写。</p>
<h2 id="本体头部"><a href="#本体头部" class="headerlink" title="本体头部"></a>本体头部</h2><p>在owl：Ontology标签中给出本体的声明。这些标签支持一些重要的常务工作比如注释、版本控制以及其他本体的嵌入等。</p>
<p>owl:Ontology元素是用来收集关于当前文档的OWL元数据的。</p>
<p>rdf:about属性为本体提供一个名称或引用。</p>
<p>rdfs:comment提供了显然必须的为本体添加注解的能力。</p>
<p>owl:priorVersion是一个为用于本体的版本控制系统提供相关信息（hook）的标准标签。本体的版本控制将在后面作进一步讨论。</p>
<p>owl:imports提供了一种嵌入机制。owl:imports接受一个用rdf:resource属性标识的参数。</p>
<h2 id="数据集成与隐私"><a href="#数据集成与隐私" class="headerlink" title="数据集成与隐私"></a>数据集成与隐私</h2><p>不同的个体成员可能表示同一个体，owl：sameAs表达等价的能力。</p>
<h1 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h1><h2 id="简单的个体和类"><a href="#简单的个体和类" class="headerlink" title="简单的个体和类"></a>简单的个体和类</h2><p>外延：我们称由属于某个类的个体所构成的集合为该类的外延（extension）。</p>
<p>本体：为了进行相关个体的推理。</p>
<h3 id="简单的具名类"><a href="#简单的具名类" class="headerlink" title="简单的具名类"></a>简单的具名类</h3><p>一个领域中最基本的概念对应各个分类层次树的根。</p>
<p>。。。。国际化资源标识符（IRI）。。。。。统一资源标识符（URI）。。。。</p>
<p>rdf:ID=”Region” 被用于引入一个名称（作为定义的一部分）<br>在这一文档中，我们现在可以用#Region来引用Region类，例如 rdf:resource=”#Region”</p>
<p>rdfs:subClassOf是用于类的基本分类构造符，次关系是可传递的<br>一个类的定义由两部分组成：引入或引用一个名称，以及一个限制表。</p>
<h3 id="个体"><a href="#个体" class="headerlink" title="个体"></a>个体</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">owl:Thing</span> <span class="attr">rdf:ID</span>=<span class="string">"CentralCoastRegion"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">owl:Thing</span> <span class="attr">rdf:about</span>=<span class="string">"#CentralCoastRegion"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">rdf:type</span> <span class="attr">rdf:resource</span>=<span class="string">"#Region"</span>/&gt;</span> </span><br><span class="line">/*表示个体，type是一个rdf属性，用于关联一个个体和它所属的类*/</span><br><span class="line">  	</span><br><span class="line"><span class="tag">&lt;/<span class="name">owl:Thing</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者使用<code>&lt;Region rdf:ID=&quot;CentralCoastRegion&quot; /&gt;</code> 语句来表示个体</p>
<p>Web本体被设计成为分布式的，我们可以通过导入和补充已有的本体来创建衍生的本体。</p>
<h3 id="使用方面的考虑"><a href="#使用方面的考虑" class="headerlink" title="使用方面的考虑"></a>使用方面的考虑</h3><p>一个类仅是一个名称和一些描述某集合内个体的属性；而个体是该集合的成员。因此，类应自然地对应于与某论域中的事物的出现集合，而个体应对应于可被归入这些类的实际的实体。</p>
<p>子类：类的子集合</p>
<p>实例：表示一个单一的个体</p>
<p>一个本体的开发应坚定地由它的预定用途所驱动。这些问题也存在于OWL Full和OWL DL之间的一个重要区别。OWL Full允许将类（class）用作实例（instance），而OWL DL不允许。</p>
<h2 id="简单属性"><a href="#简单属性" class="headerlink" title="简单属性"></a>简单属性</h2><p>一个属性是一个二元关系，有两种类型的属性：</p>
<p>数据类型属性（datatype properties）：类实例与RDF文字或XML Schema数据类型间的关系。</p>
<p>对象属性（object properties）：两个类的实例间的关系。</p>
<h3 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">owl:ObjectProperty</span> <span class="attr">rdf:ID</span>=<span class="string">"madeFromGrape"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">rdfs:domain</span> <span class="attr">rdf:resource</span>=<span class="string">"#Wine"</span>/&gt;</span> /*表示定义域*/</span><br><span class="line">    <span class="tag">&lt;<span class="name">rdfs:range</span> <span class="attr">rdf:resource</span>=<span class="string">"#WineGrape"</span>/&gt;</span> /*表示值域*/</span><br><span class="line"><span class="tag">&lt;/<span class="name">owl:ObjectProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在OWL中，一个值域可被用来推断一个类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">owl:Thing</span> <span class="attr">rdf:ID</span>=<span class="string">"LindemansBin65Chardonnay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">madeFromGrape</span> <span class="attr">rdf:resource</span>=<span class="string">"#ChardonnayGrape"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">owl:Thing</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以推断出，LindemansBin65Chardonnay为一种葡萄酒，因为其定义域为wine</p>
<p>可以定义子属性，属性是传递的，例如X为Y的子属性，如果具有属性X，则必然同时具有属性Y。</p>
<h3 id="属性和数据类型"><a href="#属性和数据类型" class="headerlink" title="属性和数据类型"></a>属性和数据类型</h3><p>数据类型属性：将个体关联到数据（值域为：RDF文字或XML Schema数据类型）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">owl:Class</span> <span class="attr">rdf:ID</span>=<span class="string">"VintageYear"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">owl:DatatypeProperty</span> <span class="attr">rdf:ID</span>=<span class="string">"yearValue"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rdfs:domain</span> <span class="attr">rdf:resource</span>=<span class="string">"#VintageYear"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rdfs:range</span>  <span class="attr">rdf:resource</span>=<span class="string">"&amp;xsd;positiveInteger"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">owl:DatatypeProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yearValue属性将VintageYears与一个整数值相关联。</p>
<h3 id="个体的属性"><a href="#个体的属性" class="headerlink" title="个体的属性"></a>个体的属性</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Region</span> <span class="attr">rdf:ID</span>=<span class="string">"SantaCruzMountainsRegion"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">locatedIn</span> <span class="attr">rdf:resource</span>=<span class="string">"#CaliforniaRegion"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Region</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Winery</span> <span class="attr">rdf:ID</span>=<span class="string">"SantaCruzMountainVineyard"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CabernetSauvignon</span>   <span class="attr">rdf:ID</span>=<span class="string">"SantaCruzMountainVineyardCabernetSauvignon"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">locatedIn</span>   <span class="attr">rdf:resource</span>=<span class="string">"#SantaCruzMountainsRegion"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">hasMaker</span>    <span class="attr">rdf:resource</span>=<span class="string">"#SantaCruzMountainVineyard"</span> /&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">CabernetSauvignon</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性的特性"><a href="#属性的特性" class="headerlink" title="属性的特性"></a>属性的特性</h2><ul>
<li>传递属性： P(x，y)，P(y，z)  P(x，z)</li>
<li>对称属性： p(x，y)当且仅当P(y, x)【注意是同一个关系】</li>
<li>函数属性： P(x,y) 与P(x,z) 蕴含 y = z，即对应值的唯一性</li>
<li>逆属性 （inverseOf）：P1(x,y) 当且仅当P2(y,x)【注意是不同关系】</li>
<li>反函数属性 （InverseFunctional）：P(y,x) 与 P(z,x) 蕴含 y = z；</li>
</ul>
<p>InverseFunctional意味着属性的值域中的元素为定义域中的每个元素提供了一个唯一的标识。</p>
<h2 id="属性限制"><a href="#属性限制" class="headerlink" title="属性限制"></a>属性限制</h2><h3 id="两个属性限制机制"><a href="#两个属性限制机制" class="headerlink" title="两个属性限制机制"></a>两个属性限制机制</h3><ul>
<li>allValuesFrom</li>
<li>someValuesFrom</li>
</ul>
<p>它们都是是局部的（local），仅仅在包含它们的类的定义中起作用。</p>
<p>owl:allValuesFrom属性限制要求：对于每一个有指定属性实例的类实例，该属性的值必须是由owl:allValuesFrom从句指定的类的成员。</p>
<p>owl:someValuesFrom限制与之相似。</p>
<p><strong>例子：</strong>Wine的制造商必须是Winery。allValuesFrom限制仅仅应用在Wine的hasMaker 属性上。Cheese的制造商并不受这一局部限制的约束。（代码如下）</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318202408.png"></p>
<table>
<thead>
<tr>
<th align="left">关系</th>
<th align="left">含意</th>
</tr>
</thead>
<tbody><tr>
<td align="left">allValuesFrom</td>
<td align="left">对于所有的葡萄酒，如果它们有制造商，那么所有的制造商都是酿酒厂</td>
</tr>
<tr>
<td align="left">someValuesFrom</td>
<td align="left">对于所有的葡萄酒，它们中至少有一个的制造商是酿酒厂</td>
</tr>
</tbody></table>
<h3 id="基数限制"><a href="#基数限制" class="headerlink" title="基数限制"></a>基数限制</h3><p>owl:cardinality：这一约束允许对一个关系中的元素数目作出精确的限制。</p>
<p>例如，我们可以将Vintage标识为恰好含有一个VintageYear的类。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318202608.png"></p>
<p>值域限制在0和1的基数表达式(Cardinality expressions)是OWL Lite的一部分。这使得用户能够表示“至少一个”，“不超过一个”，和“恰好一个”这几种意思。OWL DL中还允许使用除0与1以外的正整数值。owl:maxCardinality能够用来指定一个上界。owl:minCardinality能够用来指定一个下界。使用二者的组合就能够将一个属性的基数限制为一个数值区间。</p>
<h3 id="hasValue"><a href="#hasValue" class="headerlink" title="hasValue"></a>hasValue</h3><p>hasValue 使得我们能够根据“特定的”属性值的存在来标识类。因此，一个个体只要至少有“一个”属性值等于hasValue的资源，这一个体就是该类的成员。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318202659.png"></p>
<p>如果是Burgundy酒，那就都是干(dry)的酒。也即，它们的hasSugar属性必须至少有一个是值等于Dry（干的）。<br>【我的理解是，每个Burgundy都要有一个干的（Dry）属性，以此来标识该酒是干酒】</p>
<h1 id="本体映射"><a href="#本体映射" class="headerlink" title="本体映射"></a>本体映射</h1><p>用于实现本体的共享。</p>
<h2 id="类和属性之间的等价关系（equivalentClass，equivalentProperty）"><a href="#类和属性之间的等价关系（equivalentClass，equivalentProperty）" class="headerlink" title="类和属性之间的等价关系（equivalentClass，equivalentProperty）"></a>类和属性之间的等价关系（equivalentClass，equivalentProperty）</h2><p>属性owl:equivalentClass被用来表示两个类有着完全相同的实例。但我们要注意，在OWL DL中，类仅仅代表着个体的集合而不是个体本身。然而在OWL FULL中，我们能够使用owl:sameAs来表示两个类在各方面均完全一致。</p>
<p>类似的，我们可以通过使用owl:equivalentProperty属性声明表达属性的等同。</p>
<h2 id="个体间的同一性"><a href="#个体间的同一性" class="headerlink" title="个体间的同一性"></a>个体间的同一性</h2><p>SameAs：描述个体之间相同的机制与描述类之间的相同机制类似，仅仅只要两个个体的声明形成一致的就可以了。</p>
<p>假如hasMaker是一个函数型属性，那么下面的例子就不一定会产生冲突。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">owl:Thing</span> <span class="attr">rdf:about</span>=<span class="string">"#BancroftChardonnay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hasMaker</span> <span class="attr">rdf:resource</span>=<span class="string">"#Bancroft"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hasMaker</span> <span class="attr">rdf:resource</span>=<span class="string">"#Beringer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">owl:Thing</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除非和我们本体中的其他信息发生冲突，不然的话这样的描述是没有冲突的，他说明Bancroft和Beringer是相同的个体。</p>
<p>要清楚，修饰（或引用）两个类用sameAs还是用equivalentClass效果是不同的。用sameAs的时候，把一个类解释为一个个体，就像在OWL Full中一样，这有利于对本体进行分类。在OWL Full中，sameAs可以用来引用两个东西，如一个类和一个个体、一个类和一个属性等等，无论什么情况，都将被解释为个体。</p>
<h2 id="不同的个体"><a href="#不同的个体" class="headerlink" title="不同的个体"></a>不同的个体</h2><p>这一机制提供了与sameAs相反的效果。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318203431.png"></p>
<p>说明了三个值互不相同。如果我们没有用 differentFrom元素来申明既干又甜的葡萄酒，这意味着“干葡萄酒”和“甜葡萄酒”是相同的。但是我们从上面申明的元素来推断，这又是矛盾的。还有一种更便利的定义相互不同个体的机制，如下</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318203844.png"></p>
<p>要注意，owl:distinctMembers属性声明只能和owl:AllDifferent属性声明一起结合使用。</p>
<h1 id="复杂类"><a href="#复杂类" class="headerlink" title="复杂类"></a>复杂类</h1><p>用于创建类的表达式。OWL支持基本的集合操作，即并，交和补运算。它们分别被命名为owl:unionOf,owl:intersectionOf,和owl:complementOf.此外，类还可以是枚举的。类的外延可以使用oneOf构造子来显示的声明。同时，我们也可以声明类的外延必须是互不相交的。</p>
<p>注意：OWL类外延是由个体组成的集合，二这些个体都是类的成员。</p>
<h2 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h2><h3 id="交运算"><a href="#交运算" class="headerlink" title="交运算"></a>交运算</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">owl:Class</span> <span class="attr">rdf:ID</span>=<span class="string">"WhiteWine"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">owl:intersectionOf</span> <span class="attr">rdf:parseType</span>=<span class="string">"Collection"</span>&gt;</span> /*这是必须的，因为必须对集合操作*/</span><br><span class="line">     <span class="tag">&lt;<span class="name">owl:Class</span> <span class="attr">rdf:about</span>=<span class="string">"#Wine"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">owl:Restriction</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">owl:onProperty</span> <span class="attr">rdf:resource</span>=<span class="string">"#hasColor"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">owl:hasValue</span> <span class="attr">rdf:resource</span>=<span class="string">"#White"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">owl:Restriction</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">owl:intersectionOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">owl:Class</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子表示，白葡萄酒就是葡萄酒和白色物体的相交的集合。如果不这么表示，计算机只知道，白葡萄酒有白色的属性；却不知道，所有白色的葡萄酒是白葡萄酒</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318203750.png"></p>
<p>WhiteBurgundy类恰好是白葡萄酒和Burgundies的交集。依次，Burgundies生产在法国一个叫做Bourgogne的地方并且它是干葡萄酒（dry wine）。因此，所有满足这些标准的葡萄酒个体都是WhiteBurgundy类的外延的一部分。</p>
<h3 id="并运算"><a href="#并运算" class="headerlink" title="并运算"></a>并运算</h3><p>表示两个集合的∪。使用方法同上，将intersectionOf改成unionOf。</p>
<h3 id="补运算"><a href="#补运算" class="headerlink" title="补运算"></a>补运算</h3><p>就是表示差集，complementOf典型的用法是与其它集合运算符联合使用，如下</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318204251.png"></p>
<p>上面的例子定义了一个NonFrenchWine类，它是Wine类与所有不位于法国的事物的集合的交集。</p>
<h2 id="枚举类（one-of）"><a href="#枚举类（one-of）" class="headerlink" title="枚举类（one of）"></a>枚举类（one of）</h2><p>以直接枚举的方式描述类的成员。特别的，这个定义完整的描述了类的外延（类的范围？），因此任何其他个体都不能声明为属于这个类。如下：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318204336.png"></p>
<p>这段代码说明，WineColor只包含三种，white rose和red，任何其他的颜色都不是winecolor类的实例</p>
<p>oneOf结构的每一个元素都必须是一个有效声明的个体。一个个体必须属于某个类。在上面的例子中，每一个个体都是通过名字来引用的。我们使用owl:Thing简单地进行引用，尽管这有点多余（因为每个个体都属于owl:Thing）。另外，我们也可以根据具体类型WineColor来引用集合中的元素：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318204408.png"></p>
<p>另外，较复杂的个体描述同样也可以是oneOf结构的有效元素，例如:</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318204538.png"></p>
<h2 id="不相交类（disjointWith）"><a href="#不相交类（disjointWith）" class="headerlink" title="不相交类（disjointWith）"></a>不相交类（disjointWith）</h2><p>使用owl:disjointWith构造子可以表达一组类是不相交的。它保证了属于某一个类的个体不能同时又是另一个指定类的实例。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318204613.png"></p>
<p>Pasta例子声明了多个不相交类。注意它只声明了Pasta与其它所有类是不相交的。例如，它并没有保证Meat和Fruit是不相交的。为了声明一组类是互不相交的，我们必须对每两个类都使用owl:disjointWith来声明。</p>
<p>在下面的例子中，我们定义了Fruit是SweetFruit和NonSweetFruit的并集。而且我们知道这些子类恰好将Fruit划分成了连个截然不同的子类，因为它们是互不相交的。随着互不相交的类的增加，不相交的声明的数目也会相应的增加到n的2次方。然而，在我们已知的用例中，n通常比较小。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190318204656.png"></p>
<h1 id="本体版本控制"><a href="#本体版本控制" class="headerlink" title="本体版本控制"></a>本体版本控制</h1><p>本体和软件一样需要维护，因此它们将随着时间的推移而改变。在一个owl:Ontology元素（如上面讨论的<code>http://www.w3.org/TR/2004/REC-owl-guide-20040210/#OntologyHeaders</code>） 内，链接到一个以前定义的本体版本是可能的。属性owl:priorVersion被用来提供这种链接，并能用它跟踪一个本体的版本历史。</p>
<p>本体版本可能彼此互不兼容，例如，一个本体以前的版本可能包含与现在版本中的陈述相矛盾的陈述。在一个owl:Ontology元素中，我们使用owl:backwardCompatibleWith和owl:incompatibleWith这些属性来指出本体版本是兼容还是不兼容以前的版本。如果没有进行owl:backwardCompatibleWith声明，那么我们假定就不存在兼容性。除了上面讲到的两个属性，还有一个属性owl:versionInfo适用与版本控制系统，它提供了一些相关信息（hook）。和前面三个属性相反的是，owl:versionInfo的客体是一个文字值（literal），这一属性除了可以用来注释本体之外还可以用来注释类和属性。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://blog.csdn.net/qq_38842357/article/details/80706872" target="_blank" rel="noopener">OWL本体语言中OWL Lite、OWL DL、OWL Full理解</a></li>
<li><a href="https://sophieling.iteye.com/blog/836545" target="_blank" rel="noopener">owl本体语言学习笔记（一）</a></li>
<li><a href="https://sophieling.iteye.com/blog/836548" target="_blank" rel="noopener">owl本体语言学习笔记（二）</a></li>
</ol>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>OWL</tag>
        <tag>本体</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python]获取某文件夹下所有文件名</title>
    <url>/2018/08/06/python-%E8%8E%B7%E5%8F%96%E6%9F%90%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    <content><![CDATA[<h1 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h1><blockquote>
<p>import os</p>
</blockquote>
<h1 id="读取目录下文件"><a href="#读取目录下文件" class="headerlink" title="读取目录下文件"></a>读取目录下文件</h1><blockquote>
<p>os.listdir() #读取当前工作目录下文件名，返回列表<br>os.listdir(‘/username/folder_name/‘) #读取路径下所有文件名，返回列表</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20180806154423.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python入门</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>mac显示隐藏文件/文件夹快捷键</title>
    <url>/2019/01/13/mac%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6-%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Finder（访达）在最前端的时候，三个键一起按下即可</p>
<blockquote>
<p>Shift + Command + .</p>
</blockquote>
<p><strong>注意：</strong>最后一个是点不是逗号</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>《海贼王》与日本社会的映射关系及相关思考</title>
    <url>/2019/06/20/%E3%80%8A%E6%B5%B7%E8%B4%BC%E7%8E%8B%E3%80%8B%E4%B8%8E%E6%97%A5%E6%9C%AC%E7%A4%BE%E4%BC%9A%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190620215624.png"></p>
<p>为什么要讨论这个问题？漫画作为一种文化载体，和书籍、影视作品一样，是能够对人的思想、情感造成影响的。况且《海贼王》是一部影响重大的现象级作品，不仅在日本国内的影响巨大，更是日本文化输出的一个重要载体。面对这样一部影响力、阅读人数已经远超许多“教科书”的作品，如果不对其表达的思想进行研究、对其政治倾向进行探讨，才会显得奇怪。</p>
<h1 id="日本社会、文化背景"><a href="#日本社会、文化背景" class="headerlink" title="日本社会、文化背景"></a>日本社会、文化背景</h1><p>要理解海贼王，首先要理解日本当前的一个社会文化背景：</p>
<ul>
<li>日本放弃战争权，但是没有对民众讲清楚</li>
<li>日本文化中，暴力是不好的</li>
<li>日本社会极度秩序井然</li>
<li>而文化作品（如周刊jump）却强调正当使用暴力</li>
<li>何时可以使用暴力、暴力和秩序之间的关系，一直被思考</li>
</ul>
<p>漫画成为了发泄现实中无法使用的暴力的一个重要载体。</p>
<h1 id="那么海贼王中如何“正当的使用暴力”呢？"><a href="#那么海贼王中如何“正当的使用暴力”呢？" class="headerlink" title="那么海贼王中如何“正当的使用暴力”呢？"></a>那么海贼王中如何“正当的使用暴力”呢？</h1><p>漫画中为了使用暴力常用的世界观背景：</p>
<ol>
<li>有政府和秩序系统<ul>
<li>秩序系统无法解决问题（龙珠）</li>
<li>在秩序内搏斗（运动、美食系漫画）</li>
<li>在边缘试探（猫眼三姐妹）</li>
</ul>
</li>
<li>没有政府和秩序系统<ul>
<li>废土、架空世界（北斗神拳）</li>
<li>历史上的“无秩序”时代（浪客剑心）</li>
</ul>
</li>
</ol>
<p>海贼王显然属于有政府但不解决问题的那一种。那么海贼王中使用暴力主要对抗什么呢？</p>
<p>不同于龙珠，暴力的使用并非来自生存的压力（地球毁灭之类的），海贼王中的暴力使用主要用于<strong>对抗秩序系统的不合理性</strong>。</p>
<h1 id="海贼王中的势力划分及现实对应关系"><a href="#海贼王中的势力划分及现实对应关系" class="headerlink" title="海贼王中的势力划分及现实对应关系"></a>海贼王中的势力划分及现实对应关系</h1><p>海贼王中的团体类别粗略的划分，主要有三个：</p>
<ol>
<li>世界政府<ul>
<li>天龙人</li>
<li>海军</li>
<li>各个国家</li>
<li>七武海*</li>
</ul>
</li>
<li>海贼<ul>
<li>七武海*</li>
<li>四皇</li>
<li>小海贼</li>
</ul>
</li>
<li>革命军</li>
</ol>
<p>可以看到不论是哪一个类别的势力，都有“好”有“坏”。既有好的海军，也有坏的海军；既有好的海贼，也有坏的海贼。革命军出场较少，暂且不谈。</p>
<p>其实这里我们可以做一个对应，我更倾向于将一个个海贼团体看作现实社会中的非执政党，将世界政府看作执政党和政府，革命军是放弃了合法上位的、以革命为第一上位手段的政治团体（或者说是恐怖分子）。如果再把前半段看作海内，新世界看作海外，这里我们就可以把海贼王的世界观和日本现状做一个进一步的对应：</p>
<ol>
<li>世界政府(执政党/政府)<ul>
<li>天龙人：天皇</li>
<li>海军：执法机关/自卫队</li>
<li>各个国家：各个州县</li>
<li>七武海*：与执政党合作的在野党</li>
</ul>
</li>
<li>海贼<ul>
<li>七武海*：官职与合法性由执政党赋予，本质上还是在野党</li>
<li>四皇：影响力较大的海外势力/党派</li>
<li>小海贼：小的在野党派</li>
</ul>
</li>
<li>革命军：想要推翻政府的恐怖势力</li>
</ol>
<h1 id="海贼王架构与现实架构对应"><a href="#海贼王架构与现实架构对应" class="headerlink" title="海贼王架构与现实架构对应"></a>海贼王架构与现实架构对应</h1><p>这里我们就可以把海贼王用现实的视角重新梳理一遍了：</p>
<p>天皇（天龙人）主要是由血缘维持的世袭制无所事事轻松自在，而普通民众生存压力大且困难，为了迎合民众的不满、尾田对其进行了丑化；自卫队（海军）虽然帮助维护秩序，但是内部贪污腐败、良莠不齐；各个州县（海贼王中各个国家）的领导人，虽然名义上是选举，但是日本近年来阶层固化，政治家的儿子还是政治家，实际上接近世袭。</p>
<p>执政党（世界政府）无论如何都是想清除掉在野党的（海贼），这可以稳固自己的统治和政治；如果有较为强大的在野势力（七武海），就收为己用；对于海外的大型势力（四皇），则保持一种默契，井水不犯河水。这种大型海外势力（四皇），可以是家族（白胡子），可以是中立势力（红发），可以是国家（凯多），可以是邪教（大妈），可以是犯罪团体（黑胡子），是一种团体或者势力的高度抽象。</p>
<p>基于以上对应关系，我们可以提出一些猜测：消失的一百年历史极有可能对应二战日本侵略的历史，政府想要掩盖，新一代已经被选择了忘记，在海贼王中的表现应该和屠杀相关；而历史文本对应的就是在日本国外的客观公正第三方的史册；而历史文本指向的One Piece可能就是世界的真理与真相、绝对的公平正义之类的。</p>
<h1 id="路飞及D之一族的现实意义与内涵"><a href="#路飞及D之一族的现实意义与内涵" class="headerlink" title="路飞及D之一族的现实意义与内涵"></a>路飞及D之一族的现实意义与内涵</h1><p>路飞在作品中，其实是大多数日本民众脑中的主观正义的化身。之所以说是主观正义，是因为这种正义是不依赖于当前政府及其秩序系统的、不关心程序正确、只关心结果正确的一种“天降正义”。尾田清楚，这种正义，不可能由任何一方产生，因此将路飞设定成海军的孙子、革命军的儿子、海贼意志的继承者的复杂身世，代表了一种混沌的中立和绝对平衡的正义状态。</p>
<p>海贼王的大热，也是得益于路飞及其海贼团有关的剧情设置满足了大众的一些心理诉求。</p>
<h2 id="比如船员配置："><a href="#比如船员配置：" class="headerlink" title="比如船员配置："></a>比如船员配置：</h2><ul>
<li>这种正义（路飞）会从腐败政府机构下保护民众（索隆），从黑恶势力下保护民众（娜美）</li>
<li>接纳社会中的各种边缘人（骷髅、驯鹿、弗兰奇）</li>
<li>保护民众认为无罪的政治犯（罗宾）</li>
<li>能够帮助能力不足的人实现梦想（乌索普、山治）</li>
</ul>
<h2 id="比如暴力使用："><a href="#比如暴力使用：" class="headerlink" title="比如暴力使用："></a>比如暴力使用：</h2><p>这种正义（路飞），可以</p>
<ul>
<li>对抗腐败势力（打瓦波尔）</li>
<li>恢复地区秩序（打老沙）</li>
<li>制约天皇（天龙人）特权（打多弗朗明哥）</li>
<li>无视政府，保护自身及一般民众合法权益（打海军救罗宾、救艾斯、自救）</li>
</ul>
<h2 id="比如打四皇"><a href="#比如打四皇" class="headerlink" title="比如打四皇"></a>比如打四皇</h2><p>那为什么要打四皇呢？前文我们也说了，伟大航线前半段是海内，新世界是海外，因此红土大陆其实代表的是海关，过人鱼岛为什么那么难？偷渡当然难了！回到四皇上来，路飞打四皇，是对于该形象的一种升华，路飞不仅仅局限于日本（前半段），而是成为一种世界性的、全人类的正义和良知的标杆。</p>
<p>先说大妈，大妈海贼团代表了一种邪教，通过吸食下级信徒的资源（食材、灵魂）来满足上级暴力统治者（大妈）的欲望（甜品、永生），并通过这些资源（灵魂）来巩固自己的统治地位（玩具兵）。因此，打击邪教，义不容辞。</p>
<p>再说凯多，凯多代表了海外的暴政，因此我们的正义（路飞），也要将畸形的国家矫正到一个正确的政治形态。</p>
<p>最后黑胡子，黑胡子团体代表了逃亡海外的犯人们，政府无法拿他们怎么样，因此需要我们的正义化身（路飞）出手。</p>
<p>而至于白胡子和红发，一个说明了家族势力不能对抗政府机关（顶上之战），而另一个的境遇则和现实中的中立势力的地位及其相似：大家都要给一个面子。</p>
<h2 id="关于D之一族"><a href="#关于D之一族" class="headerlink" title="关于D之一族"></a>关于D之一族</h2><p>现在就清楚为什么有人要求路飞当他们的领导，路飞不会留下来了。因为路飞代表的是一种普世的、绝对的、超脱于法律之外的“绝对正义”，一旦在某个地方成为头头，就会降格为地区性普通执法机关，后边就难画了，关键是丢份儿。</p>
<p>现在D之一族的定位的比较清楚了：如果路飞是民众的“绝对正义”，那么多拉格代表变革者心中的“绝对正义”，卡普代表当权者心中的“绝对正义”，黑胡子代表恶徒心中的“绝对正义”。D之一族在作品中的地位几乎皆是如此，只是代表的阶级和群体不同。</p>
<h1 id="那么海贼王这个身份代表什么呢？"><a href="#那么海贼王这个身份代表什么呢？" class="headerlink" title="那么海贼王这个身份代表什么呢？"></a>那么海贼王这个身份代表什么呢？</h1><p>海贼王及其船队这一势力已经脱离的普通的政治团体，成为了一种宗教。这种宗教叫自由。海贼王这一身份则代表教皇这一职位，也代表了绝对的自由。</p>
<p>那么罗杰的下场也能够得以解释：没有限制的自由（海贼王），最终会走向末路（不治之症）。而如果想要寻求秩序（罗杰自首），则自由会被摧毁（罗杰被斩首）。</p>
<p>这里罗杰向卡普托孤，是希望执政党中的良知，可以在已有秩序之下，保护自由的火苗（艾斯）；罗杰爆料One Piece的存在，是希望民众不要在统治中变得麻木，为了激励人们追寻真正的自由。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>One Piece真的存在么？</p>
<p>也许One Piece是一大笔财富；也许One Piece是一本自由主义的“圣经”；也许罗杰只是为了激起麻木的人们对自由向往；也许白胡子就是理解了罗杰的意图，才故意说出“One Piece是真实存在的这种话”……没有人说过One Piece一定是实体的物品，也许在追寻One Piece过程中，收获的伙伴、了解到的历史的真相、获得成长的自己以及自己的思想，才是真正的One Piece吧</p>
<h1 id="写在最最后"><a href="#写在最最后" class="headerlink" title="写在最最后"></a>写在最最后</h1><p>纯属脑洞，海贼王这么长，肯定还有很多东西没讲到，就算尾田想对应，也不一定做的很严谨，大家看了就当一乐吧</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>One Piece</tag>
        <tag>海贼王</tag>
      </tags>
  </entry>
  <entry>
    <title>一个案例讲清楚所有服务盈利模式</title>
    <url>/2019/08/28/%E4%B8%80%E4%B8%AA%E6%A1%88%E4%BE%8B%E8%AE%B2%E6%B8%85%E6%A5%9A%E6%89%80%E6%9C%89%E6%9C%8D%E5%8A%A1%E7%9B%88%E5%88%A9%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>互联网发展到今天，各种各样的互联网公司、互联网服务层出不穷，盈利方式更是”千奇百怪“，免费服务更是数不胜数，已然成为一种常态。</p>
<p>然而众所周知，无利不起早，是人就要吃饭。虽然我们享受着众多”免费“服务、点着各种满减外卖，但是这些提供服务的公司和平台却都活的好好的。他们的服务盈利模式都有哪些呢？</p>
<h1 id="服务盈利模式"><a href="#服务盈利模式" class="headerlink" title="服务盈利模式"></a>服务盈利模式</h1><p>服务盈利模式总的来说分为两大类：内向盈利模式和外向盈利模式。</p>
<ul>
<li>内向盈利模式：利润来自于服务提供者或消费者，依赖于在服务过程中产生或剩余的价值的盈利模式。</li>
<li>外向盈利模式：利润来自于无关自三方，依赖于服务存在的盈利模式。</li>
</ul>
<p>根据变现对象的不同，内向盈利模式和外向盈利模式又可以分为以下几种子模式：</p>
<ul>
<li>内向盈利模式<ul>
<li>资产盈利模式：通过资产换取价值的盈利模式，如资产销售</li>
<li>服务盈利模式：依赖资产，通过提供服务换取价值的盈利模式，如收费服务、增值服务</li>
<li>平台盈利模式（内向型）：通过平台换取价值的盈利模式，如押金池、管理费</li>
<li>过程盈利模式（内向型）：依赖平台，通过服务过程产生额外价值的盈利模式，如佣金抽成</li>
</ul>
</li>
<li>外向盈利模式<ul>
<li>平台盈利模式（外向型）：依赖平台，从无关第三方获取价值的盈利方式，如金融运作</li>
<li>过程盈利模式（外向型）：依赖过程，从无关第三方获取价值的盈利方式，如广告</li>
<li>其他盈利模式：通过吸引投资、上市募集资金等手段获取价值的盈利方式，如外部投资</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190827225719.png"></p>
<h1 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h1><p>我们现在虚构一个案例来讲解一下这几种盈利模式：</p>
<p>假设现在是2000年，有一家公司叫阿里后妈，他们是一个传统的服饰售卖公司。</p>
<p>由于互联网兴起，他们为了能够在线上销售自己的衣服，搭建了一个线上购物网站，通过销售一些货品获得盈利，此时他们的盈利模式是<strong>资产盈利模式</strong>。</p>
<p>为了增加客户黏度，他们提出了会员制度，通过办理线上会员，客户可以享受优先发货、免费退换等增值服务。此举一出，客户疯狂办理会员，后妈发现，衣服可以不赚钱，就交个朋友，会员费就够自己发工资了，此时他们的盈利模式是<strong>服务盈利模式</strong>。</p>
<p>阿里后妈的平台上人越来越多，这使得一些友商蠢蠢欲动。他们纷纷找阿里后妈商谈业务，希望能把自己的商品也上架到阿里后妈的网站上，他们愿意按期交一些管理费。后妈发现，自己连衣服都不用卖了，收管理费就足够恰饭了。此时盈利模式是<strong>平台盈利模式（内向型）</strong>。</p>
<p>但是一段时间过后，因为交易量大涨，导致平台运营成本增加，后妈发现每个月收的那点管理费有点不够用了。而且不管卖的多卖的少，商家交的管理费都一样，这是不公平的。于是后妈开始在管理费之外，每一单交易都收取30%的抽成。于是又增加了一种盈利模式<strong>过程盈利模式（内向型）</strong>。</p>
<p>员工越来越多、工资越来越高，交易量增速却开始下降，后妈发现这样下去可能要恰不起饭了。但是目前30%的抽成已经够高了，管理费用签过合同短期内不能变，怎么增加收入呢？后妈想到平台上有很多的押金，以及大量交易时的中转滞留滞留的资金，从中拿一部分出来，在不影响平台正常运作的情况下，做一些收益稳定的投资。盈利模式增加了<strong>平台盈利模式（外向型）</strong>。</p>
<p>过了一段时间，某离职员工把公司私用用户资金的问题爆料了出来，金融运作的路子走不通了。后妈又想到，可以在用户交易的过程中增加广告，比如交易页面上增加一个广告条，按照广告的播放次数收费，不需要增加买家或者卖家的成本，可以直接从第三方获取收益，岂不美哉。盈利模式增加了一种<strong>过程盈利模式（外向型）</strong>。</p>
<p>公司越办越大，最终上市，大量资金涌入，各个机构的投资纷至沓来，这些钱和服务并没有关系，这部分盈利属于<strong>其他盈利模式</strong>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一家互联网公司同一时期并非只能存在一种盈利模式，通常情况下，是多种盈利模式共存的。</p>
<p>本问提出的划分方法，第一层是通过盈利来源来分（内部、外部），第二层是通过利润的产生对象来分（资产、服务、平台、过程），对于服务盈利模式进行了较好的抽象，对目前常见的盈利模式由较好的覆盖。</p>
]]></content>
      <tags>
        <tag>服务模式</tag>
        <tag>服务盈利模式</tag>
        <tag>服务计算</tag>
      </tags>
  </entry>
  <entry>
    <title>《金字塔原理》读书笔记</title>
    <url>/2020/09/20/%E3%80%8A%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="金字塔原理："><a href="#金字塔原理：" class="headerlink" title="金字塔原理："></a>金字塔原理：</h1><p>自下而上的思考，自上而下的表达。</p>
<ol>
<li>文章结构中任一层次上的思想必须是其下一层次思想的概括</li>
<li>每一层次的思想要归属于同一范畴</li>
<li>每一层次的思想要按逻辑顺序组织</li>
</ol>
<h1 id="表达的逻辑"><a href="#表达的逻辑" class="headerlink" title="表达的逻辑"></a>表达的逻辑</h1><h2 id="框架的构架"><a href="#框架的构架" class="headerlink" title="框架的构架"></a>框架的构架</h2><p>在较高层次的主题之间尽量用归纳法进行论述，在低层次用演绎方式论述。 </p>
<ul>
<li>演绎推理：背景(情境)—冲突—问题—解决方案</li>
<li>归纳推理：找到一组具体共同思想的名词，识别并剔除该组思想中与其他思想不相称的观点</li>
</ul>
<h2 id="深入的过程"><a href="#深入的过程" class="headerlink" title="深入的过程"></a>深入的过程</h2><p>通过纵向的思想引出主题和子主题之前的纵向关系。</p>
<p>“思想”定义：向读者发出新信息并引发读者疑问的语句。</p>
<p>纵向的思想实质是“疑问/回答”形式，这样更能吸引读者注意力。</p>
<h2 id="序言的结构"><a href="#序言的结构" class="headerlink" title="序言的结构"></a>序言的结构</h2><p>以“情境、冲突、疑问、回答”方式来开篇，情境和冲突是读者熟知的事实。通过明确读者最初关心的问题，让后续的内容能吸引读者注意力。</p>
<ul>
<li>标准式： 情境—冲突—解决方案</li>
<li>开门见山： 解决方案—情境—冲突</li>
<li>突出忧虑： 冲突—情境—解决方案</li>
<li>突出信心： 疑问—情境—冲突—解决方案</li>
</ul>
<h1 id="思考的逻辑（内容的填充）"><a href="#思考的逻辑（内容的填充）" class="headerlink" title="思考的逻辑（内容的填充）"></a>思考的逻辑（内容的填充）</h1><ol>
<li>应用时间顺序、结构顺序、重要程度顺序来构建思考逻辑树</li>
<li>总结句避免使用“缺乏思想”的句子，要说明行动产生的结果或目标</li>
<li>找出各结论之间的共性，得出金字塔尖的结论</li>
</ol>
<p>四种主要的逻辑顺序：</p>
<ul>
<li>演绎顺序：大前提、小前提、结论—按照演绎推理组织的思想</li>
<li>时间顺序：第一、第二、第三—按因果关系组织的思想</li>
<li>结构顺序：将整体分割为部分进行评论，划分后的各部分需要符合以下要求：MECE<ul>
<li>各部分之间相互独立（mutually exclusive）</li>
<li>所有部分完全穷尽（collectively exhaustive）</li>
</ul>
</li>
<li>重要性顺序：最重要、次重要，等等—按类别组织思想</li>
</ul>
<h1 id="解决问题的逻辑"><a href="#解决问题的逻辑" class="headerlink" title="解决问题的逻辑"></a>解决问题的逻辑</h1><p>界定问题：</p>
<ul>
<li>界定问题的框架</li>
<li>展开问题的各要素</li>
<li>发掘读者的疑问</li>
<li>回答疑问</li>
</ul>
<p>结构化分析问题：</p>
<ul>
<li>设计诊断框架</li>
<li>收集信息</li>
<li>建立逻辑树（回答是否问题）</li>
<li>寻找解决方案</li>
</ul>
<p>经典:建立诊断框架和逻辑树的指导来分析和引导思维，不仅能提高解决问题的效率，而且还简化了把结果构建成金字塔的工作。无目的的收集资料，会造成60%的无用功！！！</p>
<p>设计诊断框架的方法：其本身呈现有行结构/根据因果关系分解构建/归类分组</p>
<blockquote>
<p>Reference:<br><a href="https://www.jianshu.com/p/bdbf71572911" target="_blank" rel="noopener">https://www.jianshu.com/p/bdbf71572911</a><br><a href="https://book.douban.com/review/7121761/" target="_blank" rel="noopener">https://book.douban.com/review/7121761/</a><br><a href="https://zhuanlan.zhihu.com/p/78548168" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/78548168</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Reading Notes</category>
      </categories>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网医疗服务：昨天、今天、明天</title>
    <url>/2019/06/08/%E4%BA%92%E8%81%94%E7%BD%91%E5%8C%BB%E7%96%97%E6%9C%8D%E5%8A%A1%EF%BC%9A%E6%98%A8%E5%A4%A9%E3%80%81%E4%BB%8A%E5%A4%A9%E3%80%81%E6%98%8E%E5%A4%A9/</url>
    <content><![CDATA[<pre><code>自党的十八届五中全会明确将“互联网+”行动计划作为未来发展战略，“互联网+健康医疗”便逐渐成为我国医疗行业发展的新方向。2016年6月24日“首届国际互联网医疗大会暨中国互联网医疗健康产业联盟成立大会”在乌镇召开，对医疗、医药、保险等产业链各节点、及线上线下更有效率地融合；如何使相关政策、行业标准的推出与产业创新更好协同；如何有效推进互联网医疗健康产业发展等问题，进行了深入探讨。“互联网+健康医疗”新型服务模式有利于改善医疗质量、减少患者入院率、降低医疗成本、提高效率，是我国深化医疗卫生体制改革的重要任务和支撑，其对于我国建设跨地域、跨机构就诊信息共享的区域医疗联合体有着较强的现实和理论意义。

互联网的飞速发展催生了新的医疗服务模式，互联网医疗已成为医疗卫生和预防保健领域中不可或缺的一部分。随着李克强总理提出制定“互联网+”行动计划，医疗领域中“互联网+医疗”的产品和服务如雨后春笋般涌现，而建立以互联网为载体、患者主动参与疾病诊疗、可随时随地进行线上线下互动的医疗服务管理新模式，构建新的互联网医疗服务体系，能使广大群众享受更加高效、公平和便捷的医疗卫生和预防保健服务。本文在介绍近年来国内、外互联网医疗服务主要模式的基础上，就互联网医疗发展面临的机遇、挑战和未来走势作一探讨。</code></pre>
<h1 id="昨天：我国传统医疗服务模式"><a href="#昨天：我国传统医疗服务模式" class="headerlink" title="昨天：我国传统医疗服务模式"></a>昨天：我国传统医疗服务模式</h1><h2 id="传统医疗服务模式结构"><a href="#传统医疗服务模式结构" class="headerlink" title="传统医疗服务模式结构"></a>传统医疗服务模式结构</h2><p>我国传统医疗服务模式是以医院为中心的星型结构（如下图），医院处于中心地位。药企、医疗器械，保险公司、医保等机构以及患者、其他医疗服务都围绕医院展开。从检查、科室就医，处方药，患者就医流程都由医生主导，医患信息不透明。另外，政府对于医院财政支出不足，而随着我国老龄化加剧，现今的医保资金难以满足逐渐增加的参保人数需求，所以医保资金的压力逐渐转移到医院。第三，处方药作为医院收入的一大来源，也是一定程度上掌握在医院手里。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190608193246.png"></p>
<h2 id="传统医疗的不足"><a href="#传统医疗的不足" class="headerlink" title="传统医疗的不足"></a>传统医疗的不足</h2><p>传统医疗服务模式中，由于资金流、信息流以及物料流等以医院为核心环节，其他各环节信息流通不畅导致工作效率低下，引起以下诸多弊端。首先，医疗资源分布不均。由于三甲医院对基层医疗机构人才和资源的虹吸效应，优质医疗资源过度集中于大城市，基层医疗人员数量不足、诊疗水平达不到标准，导致“乡镇医院无患者可医，大医院人满为患”。再者，就医方式效率低，就医体验“三长一短”，服务质量不尽如人意，导致医患关系紧张。且仅有单纯的院内服务，缺乏院后服务。其次，政府财政支持不足，医保缺口明显。目前医院正常运营大部分资金来源于自身盈利，但其本质的公益性又使得收入有所限制，加之政府的宏观调控，使得医院处于两难境地。<br>导致这些弊端本质在于人们日益增长的医疗保健需求同传统医疗服务所提供的资源不对称，无法满足当今人们需求变化的节奏。</p>
<h1 id="今天：互联网医疗服务的主要模式"><a href="#今天：互联网医疗服务的主要模式" class="headerlink" title="今天：互联网医疗服务的主要模式"></a>今天：互联网医疗服务的主要模式</h1><h2 id="国外的主要模式"><a href="#国外的主要模式" class="headerlink" title="国外的主要模式"></a>国外的主要模式</h2><p>国外互联网医疗的建设起步较早，现已形成相对完善的管理和组织体系。考虑到人们对医疗保健知识的渴求日益增强，而在医疗环境中获取的健康信息及其可用性又很有限，因此越来越多的互联网医疗服务软件被开发出来并得到广泛应用。一项调查结果表明，美国居民中约31%的手机用户使用手机寻找健康或医疗信息，约35%的手机用户下载了应用程序来跟踪或管理自己的健康状况。另一项相似调查的结果显示，72%的成年人在互联网上查询健康信息，65%的互联网用户表示使用互联网和手机可更好地了解健康信息，互联网医疗干预的灵活性受到了广泛的追捧和欢迎。</p>
<h3 id="可穿戴医疗设备"><a href="#可穿戴医疗设备" class="headerlink" title="可穿戴医疗设备"></a>可穿戴医疗设备</h3><p>可穿戴医疗设备能通过传感器及时获取生理、行为和健康相关的数据，研究人员则可通过互联网同步获得这些数据并分析可能的影响因素。便携式和可穿戴传感器已越来越多地用于采集个人的生物、心理和行为数据，用于个人保健和健康的监测。通过可穿戴医疗设备获取的信息除能用于医疗保健外，还能用于相关医学研究并为制定公共卫生政策提供依据。</p>
<h3 id="数据平台的构建和共享"><a href="#数据平台的构建和共享" class="headerlink" title="数据平台的构建和共享"></a>数据平台的构建和共享</h3><p>在美国的医疗服务体系中，患者的电子病历和电子处方可在医生之间共享，当居民在异地发生意外时，医疗机构就能通过他的身份信息迅速获取其电子病历及处方，帮助医生及时、准确地了解他的疾病史等情况。这种数据共享也有利于远程医疗的开展，利用医生、患者和科研机构三者之间形成的互联网数据大平台，医生、患者和科研人员可根据自己的需要利用和获取相关信息，有利于诊疗活动的开展，并提高患者的就医满意度，保障患者健康。</p>
<h3 id="监测和记录"><a href="#监测和记录" class="headerlink" title="监测和记录"></a>监测和记录</h3><p>利用互联网医疗设备进行生物信息监测和健康指导已渐走入大众生活，通过监测可帮助患者及医护人员及时发现相关风险，提高患者的自我健康管理能力。ZEO通过蓝牙手机和床旁设备相连接，通过睡眠监测得出综合睡眠报告，用户也可通过监测得分的变化或与同年龄组平均分相比较而了解自己的睡眠状况。另外，越来越多的智能手机内置了运动传感器，可检测用户的异常行为，如老年人的跌倒、帕金森病患者的步态僵直等。还有的互联网医疗服务软件能监测睡眠状况、检测心血管疾病、警示健康状况或监测慢性阻塞性肺疾病患者的血氧饱和度和呼吸等指标值。类似的，血压仪、血糖仪和电子心电仪等医疗监测设备已得到广泛使用，这些便携式医疗设备能帮助患者在家中进行自我健康监测，时刻为患者提供健康信息及服务。</p>
<h3 id="信息化诊所运营商"><a href="#信息化诊所运营商" class="headerlink" title="信息化诊所运营商"></a>信息化诊所运营商</h3><p>互联网医疗的移动性使得人们无论是在家中、还是在路途中都能得到医疗服务和获取各种与健康相关的信息，避免了传统就医模式中的看病难、流程繁琐等问题，节省时间的同时还降低了就医成本，并具有促进自我健康管理的作用。One Medical Group运营了多家诊所，患者可网上预约就诊或在线购买药品、甚至在线查询检查结果。新技术提高了临床医疗的透明度，但仍存在相关信息的所有权和医疗记录访问的权限等敏感问题，需予进一步关注。互联网医疗的有效性、安全性和成本—效益的评估将是对其未来研究工作的重要部分。</p>
<h3 id="慢性病管理平台"><a href="#慢性病管理平台" class="headerlink" title="慢性病管理平台"></a>慢性病管理平台</h3><p>随着经济、社会的迅速发展，慢性病发病率逐年升高，已成为首要的公共卫生问题，使得研究者和企业都非常关注对慢性病人群的医疗服务问题。WellDoc是一种糖尿病患者用血糖水平自我管理软件，通过手机和云端平台记录和存储血糖水平数据，患者能用其监测自己的血糖水平变化情况。移动健康工具的出现推动了卫生保健领域、尤其是慢性病管理的发展。有研究显示，69%的美国成年人使用互联网技术监测健康指标来管理和控制自己的慢性病。互联网医疗可提高慢性病患者的疾病自我管理能力，提高其生活质量。</p>
<h2 id="国内主要模式"><a href="#国内主要模式" class="headerlink" title="国内主要模式"></a>国内主要模式</h2><p>国内医疗资源短缺且配置不合理，互联网医疗也相对落后。目前，我国互联网医疗可按诊疗时间分为诊疗前、诊疗中和诊疗后3个环节，按诊疗内容分为预约挂号、检查诊疗、药物配送、健康监测和支付保险5项服务，按适用对象分为面向医生和直接面向用户2类，按建设机构分为医院自建、企业自建和医院、企业合建3型。</p>
<h3 id="网上就医服务"><a href="#网上就医服务" class="headerlink" title="网上就医服务"></a>网上就医服务</h3><p>在互联网医疗模式下，患者可通过手机应用软件或相关网站选择合适的医院进行预约挂号及完成在线支付，并可通过网络实时查看目前排队情况以方便就医，节省就医时间。微信医院或互联网医院主要是为患者提供就医服务，包括预约挂号、预约就诊等。由于微信应用广泛并具有简单、快捷的特点，微信医院得到了患者更多的认同和接受。以“掌上药店”和“天猫药馆”为代表的线上药品销售商店会自动显示附近联网的药房，患者可根据自己情况进行线上下单和结算，然后选择自取或快递的配送方式，购药变得十分方便。</p>
<h3 id="医疗咨询和医患沟通"><a href="#医疗咨询和医患沟通" class="headerlink" title="医疗咨询和医患沟通"></a>医疗咨询和医患沟通</h3><p>以“平安医生”、“轻问诊”为代表的网络医疗咨询平台具有问诊、自诊、健康信息搜索、健康状况提醒等功能，受到患者和人们的欢迎和追捧。随着我国经济水平整体提高和疾病谱改变，人们的医疗卫生观念正逐渐由“治已病”向“防未病”转变，并希望能通过互联网获取更多的医疗保健知识。互联网医疗通过搭建医疗咨询和医患沟通平台拉近医患之间的距离，向患者提供医疗信息的同时树立了医生的个人品牌，有利于缓解医院门诊压力。</p>
<h3 id="大数据平台"><a href="#大数据平台" class="headerlink" title="大数据平台"></a>大数据平台</h3><p>在互联网医疗模式下，患者的医疗信息可存储于计算机，并通过云端平台发送给医疗人员和相关机构。阿里云的“未来医院”能帮助医院建立移动医疗服务平台，利用电子平台完成从门诊挂号到住院缴费、电子处方、药品配送、患者转诊、医保实时报销等各环节。目前，互联网医疗也已进军医保领域，包括线上投保及查询、医保结算以及医保机构对居民健康大数据的分析、评估和预测。</p>
<h3 id="医生集团"><a href="#医生集团" class="headerlink" title="医生集团"></a>医生集团</h3><p>互联网的迅猛发展为医生与患者之间的信息交流提供了便捷渠道，一定程度上降低了医疗信息的不对称状况和沟通成本，有助于医生更好地建立个人品牌，而医生集团则为医生自由执业提供了一个新的选项。“张强医生集团”是国内出现的首个医生集团，现已有更多的医生集团。医生集团在增加医生自由执业路径的同时，也面临着医疗制度和法律、法规的制约，其未来的发展还有待相应制度、体制的进一步完善及支持。</p>
<h1 id="明天：互联网医疗的走势分析"><a href="#明天：互联网医疗的走势分析" class="headerlink" title="明天：互联网医疗的走势分析"></a>明天：互联网医疗的走势分析</h1><h2 id="机遇"><a href="#机遇" class="headerlink" title="机遇"></a>机遇</h2><ul>
<li>传统医疗服务的痛点催生了互联网医疗。我国医疗体系存在医疗资源短缺且分布不均衡的问题，同时基层医疗服务水平也亟待提高，人们对医疗体制改革的呼声很高。患者有看病难、看病贵、看病繁琐、费用昂贵、渴望能够获得个性化的医疗和卫生保健知识等问题，医生则有难以与患者高效互动、缺乏接受培训和进行科研的时间等问题。在此情况下，互联网医疗顺势而出，在建立以患者为核心的医疗服务模式、诊疗信息的互联互通、健康管理和慢性病监测等方面顺应了患者的需求，同时也为医生带来了更多的职业便利和执业机会。</li>
<li>人口老龄化、慢性病普遍化为互联网医疗发展带来了机遇。人口老龄化，慢性病患病率逐渐提高，由此加重了我国医疗资源的紧张程度和人均医疗费用的增长速度。慢性病和老年患者多需反复就诊、长期用药、定期检测，患者的疾病自我管理能力和治疗依从性影响到疾病的进展，而通过可穿戴医疗设备等互联网医疗的监测和慢性病管理正可在一定程度上解决这些问题。</li>
<li>科技创新将推动互联网医疗快速发展。智能移动终端和移动网络的普及促进了互联网医疗的快速发展，可穿戴医疗设备、慢性病管理平台、智能设备等的出现改变了传统的就医诊疗模式，数据云端处理及分析的广泛应用则宣告着精准医疗和生物信息学时代的到来，医疗模式将从治疗疾病向预防疾病方向转变。</li>
</ul>
<h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><ul>
<li>相关法律、法规亟待完善。互联网医疗服务的主体已从患者、医生和医院转变为如今的医疗服务需求者、医疗机构、资源提供者、医保机构和第三方医疗服务商，各主体间相互联系、相互影响、相互制约，构成了完整的服务网络。然而，我国互联网医疗起步较晚，相关法律、法规亟待完善。医疗活动具有严肃性和复杂性，承担着重大的社会责任，有关医生多点执业的实施、互联网医疗的开展、药品网络营销的安全性、医生实名制的真实性、患者隐私信息的保护、医疗数据能否真实反映患者的实际病情、医疗责任划分及保险制度等都需有进一步的相关法律、法规的制约或支持。</li>
<li>加强科技创新和技术发展。我国互联网医疗尚不如其他行业那样具有完善的管理体制和成熟的技术，目前整体发展水平相对滞后，必须有相关行业的支持和技术支撑，使医学、技术和管理有机结合，形成相互补充、相互促进的联合体，方能使之达到可持续发展的状态。因此，需对医生进行必要的培训，使其具备相应的计算机应用技能;医院必须与企业进行合作，及时更新和强化硬件实力，但应注意患者数据的安全性和隐私保护。</li>
<li>建立品牌，提高影响力。传统医疗服务依赖于医院实体运行，医院高墙耸立，信息不对外流通，而互联网医疗是一个开放的平台，医生自身品牌及影响力的建立就显得尤为重要。然而，受传统就医模式及思维的影响，普遍群众对互联网医疗的认知和接受程度都较低，且缺乏信任感。这就需要互联网医疗在坚持医疗服务的同时，还需利用新媒体等手段建立品牌，以促进自己的发展和良性运行。</li>
</ul>
<blockquote>
<p>reference:<br><a href="http://news.hc3i.cn/art/201704/38557.htm" target="_blank" rel="noopener">http://news.hc3i.cn/art/201704/38557.htm</a><br><a href="http://xueshu.baidu.com/usercenter/paper/show?paperid=2932796969c7427f0fe6772845e28776&site=xueshu_se" target="_blank" rel="noopener">http://xueshu.baidu.com/usercenter/paper/show?paperid=2932796969c7427f0fe6772845e28776&amp;site=xueshu_se</a></p>
</blockquote>
]]></content>
      <categories>
        <category>昨天、今天、明天</category>
      </categories>
      <tags>
        <tag>互联网医疗</tag>
        <tag>服务</tag>
        <tag>Healthcare Service</tag>
        <tag>昨天、今天、明天</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是一体化架构(Monolithic Architecture)</title>
    <url>/2019/08/07/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E4%BD%93%E5%8C%96%E6%9E%B6%E6%9E%84-Monolithic-Architecure/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>假设你在开发一个服务端应用。该应用必须支持各种各样的客户端，包括桌面浏览器、手机浏览器和本地手机应用。应用可能也需要公开部分API供第三方使用，还可能与其他应用通过web service或消息代理(message broker)相集成。应用执行业务逻辑来处理请求(HTTP请求或者消息)；访问数据库；与其他系统交换消息；并返回HTML/JSON/XML类型的响应。</p>
<p>应用或是多层架构或是六角架构，并且包含多种类型的组件：</p>
<ul>
<li>表示组件(Presentation components) - 响应处理HTTP请求，并返回HTML或JSON/XML(对于web service API)</li>
<li>业务逻辑(Business logic) - 应用的业务逻辑</li>
<li>数据库访问逻辑(Database access logic) - 数据访问对象用于访问数据库</li>
<li>应用集成逻辑(Application integration logic) - 消息层，如基于Spring的集成</li>
</ul>
<p>这些逻辑组件分别响应应用中不同的功能模块。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>应用的部署架构是什么？</p>
<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><ul>
<li>该应用由一个开发者团队在维护</li>
<li>团队新成员必须快速上手</li>
<li>应用应该易于理解和修改</li>
<li>你想对应用进行持续集成</li>
<li>你必须在多台机器上部署多份应用的拷贝，以满足可伸缩性和可用性的要求</li>
<li>你想使用新技术(框架、编程语言等)</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用一体化架构构建应用。如：</p>
<ul>
<li>单个Java WAR文件</li>
<li>单个Rails或NodeJS目录结构</li>
</ul>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>我们假设你在构建一个电子商务应用，应用从客户接收订单，验证库存和可用额度，并派送订单。应用包含多个组件，包括StoreFrontUI，用来实现用户接口，以及一些后台服务，用于检测信用额度、维护库存和派送订单。</p>
<p>应用作为一体应用部署。例如，一个Java web应用运行在Tomcat之类web容器上，仅包含单个WAR文件；一个Rails应用使用Phusion Passenger部署在Apache/Nginx上，或者使用JRuby部署在Tomcat上，它们都仅包含单个目录结构。为了伸缩和提高可用性，你可以在一个负载均衡器下面运行该应用的多份实例。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190807222502.png"></p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>这个方案有一些好处：</p>
<ul>
<li>易于开发 - 当前开发工具和IDE的目标就是支持这种一体应用的开发</li>
<li>易于部署 - 你只需要将WAR文件或目录结构放到合适的运行环境下</li>
<li>易于伸缩 - 你只需要在负载均衡器下面运行应用的多份拷贝就可以伸缩</li>
</ul>
<p>但是，一旦应用变大、团队增长，这种方法的缺点就愈加明显：</p>
<ul>
<li>巨大的一体代码库可能会吓到开发者，尤其是团队的新人。应用难于理解和修改。因此，开发速度通常会减缓。另外，由于没有模块硬边界，模块化也随时间而破坏。还有，因为难于理解如何实现变更，代码质量也随时间下降。这是个恶性循环！</li>
<li>超载的IDE - 代码库越大，IDE越慢，开发者效率越低。</li>
<li>超载的web容器 - 应用越大，容器启动时间越长。因此开发者大量的时间被浪费在等待容器启动上。这也会影响到部署。</li>
<li>难于持续部署 - 对于频繁部署，巨大的一体应用也是个问题。为了更新一个组件，你必须重新部署整个应用。这还会中断后台任务(如Java应用的Quartz作业)，不管变更是否影响到这些任务，此外还可能引发问题。未被更新的组件也可能因而不能正常启动。因此，鉴于重新部署的相关风险会增加，不鼓励频繁更新。这尤其对用户界面的开发者来说是个问题，因为他们通常需要快速迭代，频繁重新部署。</li>
<li>难于伸缩应用 - 一体架构只能在一个维度伸缩。一方面，它可以通过运行多个拷贝来伸缩满足业务量的增加。某些云服务甚至可以动态地根据负载调整应用实例的数量。但是另一方面，该架构不能伸缩满足数据量的增加。每个应用实例都要访问全部数据，这使缓存低效，并且提升了内存占用和I/O流量。而且，不同的组件所需资源不同 - 有些可能是CPU密集型的，另一些可能是内存密集型的。一体架构下，我们不能独立伸缩各个组件。</li>
<li>难于调整开发规模 - 一体应用对调整开发规模也是个障碍。一旦应用达到一定规模，将工程组织分成专注于特定功能模块的团队通常更有效。比如，我们可能需要UI团队，会计团队，库存团队等。一体应用的问题是它阻碍组织团队相互独立地工作。团队之间必须在开发进度和重新部署上进行协调。对团队来说也很难改变和更新产品。</li>
<li>需要对一个技术栈长期投入 - 一体架构迫使你娶下开发初选择的技术栈(某些情况下，是那项技术的某个版本)。一体架构下，很难递增式地采用更新的技术。比如，想象下你选了JVM。除了Java你还可以选择其他使用JVM的语言，它们比如Groovy和Scala也可以与Java很好地进行互操作。但是一体架构下，非JVM语言写的组件就不行。而且，如果应用使用了后期过时的平台框架，将应用迁移到更新更好的框架上就很有挑战性。还有可能，为了采用新的平台框架，你要重写整个应用，这就太冒险了。</li>
</ul>
<h1 id="相关模式"><a href="#相关模式" class="headerlink" title="相关模式"></a>相关模式</h1><p>微服务架构是解决一体化架构缺点的替代模式。</p>
<h1 id="已知案例"><a href="#已知案例" class="headerlink" title="已知案例"></a>已知案例</h1><p>著名的互联网服务，如Netflix, Amazon.com和eBay开始都使用一体架构。作者开发的大部分web应用也是一体架构的。</p>
<blockquote>
<p>译自：<br><a href="https://microservices.io/patterns/monolithic.html" target="_blank" rel="noopener">https://microservices.io/patterns/monolithic.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件架构和服务架构</category>
      </categories>
      <tags>
        <tag>软件架构</tag>
        <tag>服务架构</tag>
        <tag>一体化架构</tag>
        <tag>Software Architecture</tag>
        <tag>Service Architecture</tag>
        <tag>Monolithic Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>一文读懂Curry-Howard同构</title>
    <url>/2019/10/10/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Curry-Howard%E5%90%8C%E6%9E%84/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>柯里-霍华德同构，Curry-Howard Isomorphism，又称柯里-霍华德对应（Curry-Howard correspondence）是在计算机程序和数学证明之间的紧密联系；这种对应也叫做公式为类型对应或命题为类型对应。这是对形式逻辑系统和公式计算（computational calculus）之间符号的相似性的推广。命名来自它的两位发现者：美国数学家哈斯凯尔·<strong>柯里</strong>和逻辑学家威廉·阿尔文·<strong>霍瓦德</strong>。</p>
<h1 id="同构对应"><a href="#同构对应" class="headerlink" title="同构对应"></a>同构对应</h1><p>Curry-Howard 同构显示了推理系统和程序语言之间的相似性，在此框架下：</p>
<ul>
<li>程序语言的语言构造同构为推理系统的推理规则</li>
<li>程序的类型同构为逻辑命题</li>
<li>闭合程序（不依赖环境的程序）可以同构为一条定理的证明过程，其类型就是一条定理</li>
<li>逻辑上下文同构为自由变量类型指派</li>
<li>Lambda 演算同构为 Gentzen 的自然演绎<ul>
<li>函数调用就是蕴含消除</li>
<li>函数抽象就是蕴含介入</li>
<li>参数多态就是全称量化</li>
<li>模板类型就是谓词</li>
<li>结构类型就是合取</li>
<li>联合类型就是析取</li>
<li>收参数但不返回就是否定</li>
<li>call/cc 就是双重否定消除</li>
</ul>
</li>
<li>SK 组合子演算同构为直觉 Hilbert 推理系统<ul>
<li>S 和 K 就是演算系统的两条公理</li>
</ul>
</li>
</ul>
<h1 id="Curry-Howard-同构与-Martin-Lof-类型论系统"><a href="#Curry-Howard-同构与-Martin-Lof-类型论系统" class="headerlink" title="Curry-Howard 同构与 Martin-Löf 类型论系统"></a>Curry-Howard 同构与 Martin-Löf 类型论系统</h1><p>这个框架里灵活性最高的是 Martin-Löf 的系统，两个高度抽象的算子—— $\prod$ 和 $\sum$ 进一步泛化了函数调用与合取，这使得它有极其恐怖的抽象能力。这个系统的推理规则是一下几条：</p>
<h2 id="Introduction-rule-for-prod"><a href="#Introduction-rule-for-prod" class="headerlink" title="Introduction rule for $\prod$"></a>Introduction rule for $\prod$</h2><p>$$\frac{\Gamma,x:A\vdash b:B}{\Gamma\vdash\lambda x.b:(\prod x:A)B}(\prod I)$$</p>
<h2 id="Elimination-rule-for-prod"><a href="#Elimination-rule-for-prod" class="headerlink" title="Elimination rule for $\prod$"></a>Elimination rule for $\prod$</h2><p>$$\frac{\Gamma\vdash f:(\prod x:A)B\quad\Gamma\vdash a:A}{\Gamma\vdash apply(f,a):B[a/x]}(\prod E)$$</p>
<p>Suppose $f = \lambda x.x$, then $apply(f,a)=(\lambda x.x)a$ </p>
<h2 id="Introduction-rule-for-sum"><a href="#Introduction-rule-for-sum" class="headerlink" title="Introduction rule for $\sum$"></a>Introduction rule for $\sum$</h2><p>$$\frac{\Gamma\vdash a:A\quad\Gamma\vdash b:B[a/x]}{\Gamma\vdash\lt a,b\gt:(\sum x:A)B}(\sum I)$$</p>
<h2 id="Elimination-rule-for-sum"><a href="#Elimination-rule-for-sum" class="headerlink" title="Elimination rule for $\sum$"></a>Elimination rule for $\sum$</h2><p>$$\frac{\Gamma\vdash c:(\sum x:A)B\quad\Gamma,x:A,y:B\vdash d:C[\lt x,y\gt/z]}{\Gamma\vdash split(c,\lambda x.\lambda y.d):C[c/z]}(\sum E)$$</p>
<p>where: $split(\lt a,b\gt,\lambda x.\lambda y.d)=(\lambda x.\lambda y.d)(a)(b)$ </p>
<blockquote>
<p>reference<br><a href="https://www.zhihu.com/question/22959608/answer/24770830" target="_blank" rel="noopener">https://www.zhihu.com/question/22959608/answer/24770830</a><br><a href="https://zh.wikipedia.org/zh-hans/%E6%9F%AF%E9%87%8C-%E9%9C%8D%E5%8D%8E%E5%BE%B7%E5%90%8C%E6%9E%84" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/柯里-霍华德同构</a><br><a href="http://www2.math.uu.se/~palmgren/tillog/klogik04-01eng.pdf" target="_blank" rel="noopener">http://www2.math.uu.se/~palmgren/tillog/klogik04-01eng.pdf</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Curry-Howard Isomorphism</tag>
        <tag>Type Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到100：zabbix及其支持环境的完整安装教程</title>
    <url>/2016/08/08/%E4%BB%8E0%E5%88%B0100%EF%BC%9Azabbix%E5%8F%8A%E5%85%B6%E6%94%AF%E6%8C%81%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%8C%E6%95%B4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>版本信息：<br>Ubuntu15.10<br>Apache2.4.12<br>php5.6.11（zabbix3.0要求php版本至少5.4以上）<br>Mysql5.6.31<br>zabbix3.0</p>
<p>前言：本教程包括了ubuntu上LAMP(Linux+Apache+Mysql+Php)环境的搭建以及zabbix安装。因为我们最终是要通过外部计算机访问我们的服务器的，所以我希望你可以先运行一下“ifconfig -a”语句来查看以下自己的IP地址，以方便之后测试服务器。文中将以“IPAddr”来代替你的IP地址，阅读时请注意。<br>这是博主虚拟机上的IP地址：</p>
<a id="more"></a>
<p><img src="/assets/images/zabbix_2.jpg" alt="虚拟机上的IP地址"></p>
<h2 id="0-预安装"><a href="#0-预安装" class="headerlink" title="0.预安装"></a>0.预安装</h2><p>后边会用到的软件，装一下即可：<br><code>sudo apt-get install vim -y</code></p>
<h2 id="1-Apache安装"><a href="#1-Apache安装" class="headerlink" title="1.Apache安装"></a>1.Apache安装</h2><p>在命令行运行下列语句下载apache：<br><code>sudo apt-get install apache2 -y</code><br>启动apache服务：<br><code>sudo /etc/init.d/apache2 start</code><br>看到下列语句说明启动成功：<br><img src="/assets/images/zabbix_1.jpg" alt="[OK]Starting apache2 (via systemctl):apache2.service"><br>从其他PC上打开浏览器，输入<em><a href="http://ipaddr/" target="_blank" rel="noopener">http://IPAddr</a></em>，打开页面，如果显示如下，则表示Apache安装成功。<br><img src="/assets/images/zabbix_3.jpg" alt="Apache默认页面"></p>
<h2 id="2-安装Mysql"><a href="#2-安装Mysql" class="headerlink" title="2.安装Mysql"></a>2.安装Mysql</h2><p>在命令行运行下列语句下载mysql：<br><code>sudo apt-get install mysql-server -y</code><br>安装的时候会弹出窗口让你设置root帐户的初始密码，根据个人喜好设置一个即可。<br>同样的，安装完了我们也要启动一下mysql的服务：<br><code>sudo /etc/init.d/mysql start</code><br>看到下列语句说明启动成功：<br><img src="/assets/images/zabbix_5.jpg" alt="[OK]Starting mysql (via systemctl):mysql.service"></p>
<h2 id="3-安装php5"><a href="#3-安装php5" class="headerlink" title="3.安装php5"></a>3.安装php5</h2><p>在命令行输入下列语句下载php5：<br><code>sudo apt-get install php5 -y</code><br>接着安装phpmyadmin：<br><code>sudo apt-get install phpmyadmin -y</code><br>安装的过程中根据提示，选择apache2，dbconfig-common那里选择YES，再输入系统root的密码和数据库root的密码即可。版本不同，顺序可能不大一样，总之问什么答什么就对了。<br>顺便改写以下/var/www目录的权限，方便以后编辑网站文件：<br><code>sudo chmod 777 /var/www</code><br>创建phpmyadmin的链接：<br><code>sudo ln -s /usr/share/phpmyadmin /var/www/html/</code><br>修改一下php5的配置，打开配置文件：<br><code>sudo vim /etc/php5/apache2/php.ini</code><br>加入红框中的语句：<br><img src="/assets/images/zabbix_6.jpg" alt="extension=mysqli.d"><br>保存退出。<br>现在在其他的PC上打开浏览器，输入<em><a href="http://ipaddr/phpmyadmin" target="_blank" rel="noopener">http://IPAddr/phpmyadmin</a></em>，显示以下页面表示配置成功：<br><img src="/assets/images/zabbix_7.jpg" alt="phpmyadmin登录页面"></p>
<h2 id="4-安装配置zabbix-server"><a href="#4-安装配置zabbix-server" class="headerlink" title="4.安装配置zabbix server"></a>4.安装配置zabbix server</h2><p>###4.1 下载deb：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget http://repo.zabbix.com/zabbix/3.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.0-1+trusty_all.deb</span><br><span class="line">dpkg -i zabbix-release_3.0-1+trusty_all.deb</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<p>###4.2 安装服务器端<br>运行下列语句：<br><code>sudo apt-get install zabbix-server-mysql zabbix-frontend-php -y</code><br>安装完成之后试着启动一下zabbix服务,出现下列语句即为成功：<br><img src="/assets/images/zabbix_8.jpg" alt="[OK]Starting zabbix_server (via systemctl):zabbix_server.service"></p>
<p>###4.3 配置zabbix_server.conf<br>打开配置文件：<br><code>sudo vim /etc/zabbix/zabbix_server.conf</code><br>把对应项的值改为如下(没有的自己在对应位置加上即可)：</p>
<ul>
<li>DBHost=localhost</li>
<li>DBName=zabbix</li>
<li>DBUser=zabbix</li>
<li>DBPassword=zabbix</li>
</ul>
<p>###4.4 配置mysql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">(输入你的数据库root密码)</span><br><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix';</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; \q</span><br><span class="line">cd /usr/share/doc/zabbix-server-mysql</span><br><span class="line">zcat create.sql.gz | mysql -u root -p zabbix</span><br><span class="line">（输入你的数据库root密码，点击回车后稍微等一会儿）</span><br><span class="line">sudo cp -r /usr/<span class="keyword">share</span>/zabbix /<span class="keyword">var</span>/www/html/zabbix</span><br><span class="line">/etc/init.d/zabbix-<span class="keyword">server</span> restart</span><br></pre></td></tr></table></figure>

<p>最后出现下列语句即为成功：<br><img src="/assets/images/zabbix_8.jpg" alt="[OK]Starting zabbix_server (via systemctl):zabbix_server.service"><br>###4.5 配置php<br>编辑php的配置文件：<br><code>sudo vim /etc/php5/apache2/php.ini</code><br>把对应项的值改为如下(没有的自己在对应位置加上即可)：</p>
<ul>
<li>post_max_size = 16M</li>
<li>max_execution_time = 300</li>
<li>max_input_time = 300</li>
<li>date.timezone = “Asia/Shanghai”</li>
</ul>
<p>改完之后重启apache2：<br><code>/etc/init.d/apache2 restart</code></p>
<h2 id="5-进入zabbix"><a href="#5-进入zabbix" class="headerlink" title="5.进入zabbix"></a>5.进入zabbix</h2><p>在另外一台PC上打开浏览器，在地址栏输入：<br><em><a href="http://ipaddr/zabbix" target="_blank" rel="noopener">http://IPAddr/zabbix</a></em><br>显示以下页面：<br><img src="/assets/images/zabbix_9.jpg" alt="zabbix欢迎页面"><br>点击右下角的Next step进入Check of pre-requisites页面：<br><img src="/assets/images/zabbix_10.jpg" alt="Check of pre-requisites页面"><br>这个页面是检测服务器配置是否合格的页面，必须全部为OK才可以点击Next step进入Configure DB connection页面。<br><img src="/assets/images/zabbix_11.jpg" alt="Configure DB connection页面"><br>其中password为zabbix（我们刚刚配置数据库时设置的）。<br>接下来的Zabbix server details和Pre-installation summary两个页面无脑点Next step即可。<br>显示如下页面我们就可以点击Finish了。<br><img src="/assets/images/zabbix_12.jpg" alt="Congratulations"><br>点击Finish之后出现zabbix server的登录页面，这里Username为Admin，Password为zabbix，最后点击Sign in，大功告成~<br><img src="/assets/images/zabbix_13.jpg" alt="登录页面"><br><img src="/assets/images/zabbix_14.jpg" alt="zabbix管理页面"></p>
]]></content>
      <tags>
        <tag>zabbix</tag>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>从网络爬虫数据中提取高质量的单语言数据集</title>
    <url>/2023/08/09/%E4%BB%8E%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%8F%90%E5%8F%96%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%95%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<h1 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h1><p>下图展示了用于下载和处理常见网络爬虫数据快照的整个pipline。<br>首先下载所有WET文件并分组保存为二进制文件，然后计算所有段落的哈希。<br>接着独立处理WET文件的每个文档：使用二进制文件对段落进行语言识别并计算语言模型困惑度从而删除重复数据。<br>最后按语言和困惑度分数将文档重新分组为json文件。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202308091947586.png"></p>
<h1 id="数据获取和预处理"><a href="#数据获取和预处理" class="headerlink" title="数据获取和预处理"></a>数据获取和预处理</h1><p>Common Crawl每月都会发布通过随机浏览和采样URL获得的网络快照。每个网页都有不同的可用格式：原始（WARC）、UTF-8文本（WET）和元数据（WAT）。</p>
<ul>
<li>WARC（Web ARChive）：它是一种用于存储和传输Web资源（例如HTML页面，图像和视频文件等）的文件格式。 WARC文件通常包含HTTP响应和元数据，用于记录Web爬虫收集的信息。</li>
<li>WAT（Web Archive Transformation）：它是一种元数据文件格式，用于描述WARC文件中记录的Web内容。 WAT文件通常包含URL，域名和其他有关记录的元数据信息。</li>
<li>WET（Web Extraction Toolkit）：它是一种将HTML页面转换为文本格式的文件格式。 WET文件通常包含从HTML页面中提取的文本内容，但不包括图像和其他资源。</li>
</ul>
<p>特点：1. 每月快照之间几乎没有内容重叠。2. 完整的数据包由8年来收集的数PB的数据组成。3. 网页是从整个网站上无限制地抓取的，包含有许多不同的语言。4. 文本的质量也有很大的差异。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202308091954320.png"></p>
<p>每个快照包含 20 到 30TB 的未压缩纯文本，相当于大约 30 亿个网页（例如，2019 年 2 月的快照包含 24TB 的数据）。可以独立下载和处理每个快照。对于每个快照，将 WET 文件重新分组为每个 5GB 的shard。<br>这些shards被保存到JSON文件中，其中一个条目对应一个网页。</p>
<h1 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h1><p>包括删除快照中不同网页中的重复段落，因为它们占文本的 70%。<br>首先通过将所有字符小写、用占位符（即 0）替换数字并删除所有 Unicode 标点符号和重音符号来标准化每个段落。<br>然后，重复数据删除通过两个独立的步骤完成。<br>首先，对于每个shard，我们计算每个段落的哈希码并将它们保存到二进制文件中。我们使用规范化段落的 SHA-1 的前 64 位作为密钥。<br>然后，我们通过将每个shard与所有二进制文件或其子集进行比较来消除重复数据。 </p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202308092003191.png"></p>
<p>这些步骤对于每个shard来说都是独立的，因此可以进行分布式。除了删除网络副本之外，此步骤还删除了许多样板文件，例如导航菜单、cookie 警告和联系信息。<br>特别是，它从其他语言的网页中删除了大量的英语内容。<br>这使得我们pipline的下一步的语言识别更加强大。</p>
<h1 id="语言识别"><a href="#语言识别" class="headerlink" title="语言识别"></a>语言识别</h1><p>包括按语言拆分数据。<br>这里使用来自 fastText ，改语言分类器在Wikipedia，Tatoeba和SETimes上进行了训练。<br>它使用字符 n-gram 作为特征，并使用分层softmax。<br>它支持 176 种语言，并在 [0， 1] 范围内为每种语言输出分数。它在单个 CPU 内核上每秒处理 1k 个文档。<br>对于每个网页，我们计算出最可能的语言和相应的分类器分数。如果该分数高于0.5，我们将文档分类为相应的语言。<br>否则语言没有明确标识，我们丢弃相应的页面。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202308092003773.png"></p>
<h1 id="基于语言模型的质量过滤"><a href="#基于语言模型的质量过滤" class="headerlink" title="基于语言模型的质量过滤"></a>基于语言模型的质量过滤</h1><p>至此仍然存在内容质量低下的文档。<br>过滤掉这些样本的一种方法是计算网页与目标域（例如维基百科）的相似度分数。<br>此处建议使用在目标领域训练的语言模型的困惑度作为质量得分。</p>
<p>更准确地说，对于每种语言，根据目标域的数据训练一个tokenizer和语言模型。<br>这里使用 KenLM 库中实现的 5-gram Kneser-Ney 模型，因为它可以高效地处理大量数据。<br>然后，对数据集中的每个页面进行tokenization，并使用语言模型计算每个段落的困惑度。<br>困惑度越低，数据越接近目标域。<br>在此步骤结束时，每种语言被分平均地分为头、中、尾三个部分，对应于困惑度分数。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202308092005786.png"></p>
<h1 id="进一步过滤"><a href="#进一步过滤" class="headerlink" title="进一步过滤"></a>进一步过滤</h1><p>通过维基百科参考的页面和随机抽样的页面，训练一个MLP作为discriminator，来判断输入的页面是否为维基百科参考页面。<br>训练完成后通过改判别器丢弃一部分非参考页面。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202308092011056.png"></p>
<blockquote>
<p>reference：<br>Wenzek, Guillaume, Marie-Anne Lachaux, Alexis Conneau, Vishrav Chaudhary, Francisco Guzmán, Armand Joulin, and Edouard Grave. “CCNet: Extracting high quality monolingual datasets from web crawl data.” arXiv preprint arXiv:1911.00359 (2019).<br><a href="https://www.datalearner.com/blog/1051682313146748" target="_blank" rel="noopener">https://www.datalearner.com/blog/1051682313146748</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Machine Learning</tag>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>修改mac分配的虚拟磁盘的空间</title>
    <url>/2022/08/22/%E4%BF%AE%E6%94%B9mac%E5%88%86%E9%85%8D%E7%9A%84%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98%E7%9A%84%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>通过mac自带的磁盘工具调整虚拟磁盘大小会报错，但是可以通过命令行调整。</p>
<p>如将Hello.dmg调整为7GB：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdiutil resize -size 7g Hello.dmg</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>冠词使用方法概要</title>
    <url>/2021/09/01/%E5%86%A0%E8%AF%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%A6%82%E8%A6%81/</url>
    <content><![CDATA[<blockquote>
<p>本文提炼自：<a href="https://zhuanlan.zhihu.com/p/35642367" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35642367</a></p>
</blockquote>
<p>冠词是置于名词前并限定名词的意义的虚词，分为定冠词和不定冠词，实际使用中，还会出现零冠词，共三种情况。</p>
<h1 id="定冠词：THE"><a href="#定冠词：THE" class="headerlink" title="定冠词：THE"></a>定冠词：THE</h1><p>用于表示特指。</p>
<h2 id="一般用法："><a href="#一般用法：" class="headerlink" title="一般用法："></a>一般用法：</h2><ol>
<li>表示特指：特指某(些)人或某(些)物(包括用于上文提到过的人或物之前，以及说话双方都知道的人或物)。如：We have a cat and two dogs. The cat is black and the dogs are white. 我们养了一只猫和两只狗，猫是黑的，狗是白的。</li>
<li>表示独一无二：用在世界上“独一无二”的事物的名词前。如：The earth goes round the sun. 地球绕着太阳转。</li>
<li>用于最高级前：即用于形容词或副词的最高级前。如：Who picked the most apples? 谁摘的苹果最多?</li>
<li>用于序数词或方位词之前。如：He was the first man to think of it. 他是第一个想到这一点的人。</li>
<li>用于乐器名词前：表示相应乐器的演奏。如：Besides the violin, he plays the piano and the flute. 除了拉提琴，他还能弹钢琴和吹笛子。</li>
<li>表示人体部位：用于某些介词短语中指身体的某个部位。如：He patted me on the back. 他拍了拍我的背。</li>
<li>用于表示一家人：用于在姓氏的复数形式之前表示一家人或夫妇二人。如：The Smiths live in the apartment above ours. 史密斯一家住在我们楼上的一套住房里。</li>
<li>用于江河湖海等前：用于江河湖海、山脉群岛、海湾海峡等地理名词前。如：The Yellow River flows into the Yellow Sea. 黄河流人黄海。</li>
<li>用于某些含有普通名词的专有名词前：用于某些国名、组织机构、建筑物、报纸杂志、会议条约等含有普通名词与其他词构成的专有名词。如：We visited the Great Wall yesterday. 我们昨天去参观了长城。</li>
</ol>
<h2 id="其他用法："><a href="#其他用法：" class="headerlink" title="其他用法："></a>其他用法：</h2><ol>
<li>用于整十的复数数词前：表示几十年代。如：This happened in the seventies. 这发生在七十年代。</li>
<li>用于比较级前：用于“the+比较级，the+比较级”结构中表示“越……就越……”。如：The sooner we operate now the safer. 越早动手术越安全。</li>
<li>用于表示类别：用于“the+某些形容词或过去分词”中表示一类人。如：Do you think the rich should pay more taxes to help the poor? 你认为富人是否应当多交点税来帮助穷人?</li>
<li>用于国籍名词前表总称：用于“the+某些国籍的形容词”中表示某国人的总称。如：The French are famous for their food. 法国人因法国菜而出名。</li>
<li>用于集合名词前表总称：用于“the + police / public等集合名词”中表示这类人的总称。如：The police are looking for the murderer. 警察正在寻找那个凶手。</li>
<li>用于修饰same, only, very等形容词：即用于“the same / only / very +名词”结构中。如：That’s the only reason. 那是唯一的理由。</li>
<li>用于单位名词前表标标准：即用于“单位词”（hour, day, month, year, dozen, gallon, ton, yard等）前表示标准，相当于汉语的“按”“论”“每”等。如：They let out cars by the day. 他们按天出租汽车。</li>
</ol>
<p>但是，by weight（按重量）习惯上不用冠词。如：Bananas are usually sold by weight. 香蕉通常按重量卖。</p>
<h1 id="不定冠词：A、AN"><a href="#不定冠词：A、AN" class="headerlink" title="不定冠词：A、AN"></a>不定冠词：A、AN</h1><p>用于表示泛指。</p>
<h2 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h2><ol>
<li>表类别：即指人或事物的类别。如：A teacher is a person who teaches. 教师就是教书的人。</li>
<li>表数量：即表示数量“一”。如：I’ll be able to finish it in a day or two. 在一两天内我会完成此事。</li>
<li>表同一性：即表示“同一”，说明事物的同一性质、特征、大小或程度等。如：This hat and that one are of a shape. 这顶帽子和那顶一样大。</li>
<li>表程度：用于most前表示“非常”“十分”。如：It’s a most boring book. 这是一本非常枯燥乏味的书。</li>
</ol>
<h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><ol>
<li>用于序数词前：用在序数词前表示“再一”“又一”。如：She thanked him a second time. 她再次向他道谢。</li>
<li>用于由动词转化来的名词前：表示一次、一番等义(通常与 have, take, make, give 等动词连用)。如：We’ve already had a try at it. 我们已经试过一下。</li>
<li>用于专有名词前：相当于a certain，意为“一个”“某个”。如：The house next door has been bought by a Mr Jones. 隔壁的 房子被一个叫琼斯的先生的人买下了。</li>
<li>用于抽象名词前：使之具体化，表示与该之相关的具体的人或事。如：He was a success in business. 他事业成功。</li>
</ol>
<h1 id="零冠词"><a href="#零冠词" class="headerlink" title="零冠词"></a>零冠词</h1><p>用于表示泛指。</p>
<ol>
<li>表泛指的不可数名词或复数名词前。如：Snow was failing. 正在下雪。</li>
<li>倒装的让步状语从句中：在as(虽然)引导让步状语从句前面的单数可数名词前不用冠词。如：Child as he was, he knew how to help others. 他虽是个孩子，但已知识如何帮助别人。</li>
<li>某些特殊词前：例如在man(人，人类), word(消息)的前面不用冠词。如：Man is a rational animal. 人是理性的动物。</li>
<li>又如动词 turn(变成)，go(变成)后作表语的名词前通常用不用冠词。如：He was a teacher before he turned writer. 他在成为作家之前是教师。</li>
<li>独立主格结构中：在表示伴随或补充说明用用的独立主格结构中，名词前不用冠词。如：The teacher came in, book in hand. 老师走进教室，手里拿着书。</li>
<li>“(a) kind [sort] of＋名词”结构的“名词”前：该结构中的“名词”不管是单数还是复数，其前都通常用零冠词。如：This kind of book is very interesting. 这种书很有趣。</li>
<li>表抽象意义的单数名词前：当单数可数名词含义抽象化具有形容词意味时，通常用零冠词。如：I was fool enough to accept his offer. 我接受他的提议真是太傻了。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>关联规则挖掘算法综述</title>
    <url>/2024/06/27/%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="什么是关联规则"><a href="#什么是关联规则" class="headerlink" title="什么是关联规则"></a>什么是关联规则</h1><p>关联规则是一种条件语句，它们帮助揭示数据库、关系数据库或其他信息库中看似无关数据之间的关系。关联规则用于发现经常一起使用的对象之间的关系。关联规则的应用包括购物篮数据分析、分类、交叉营销、聚类、目录设计和领先损失分析等。</p>
<p>关联规则使用两个基本标准：支持度（support）和置信度（confidence）。它通过分析数据中的频繁使用的”如果/那么”模式来识别关系和生成规则。通常，关联规则需要同时满足用户指定的最小支持度和用户指定的最小置信度。</p>
<p>计算方法如下：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202406271715961.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202406271715284.png"></p>
<h1 id="AIS-Algorithm"><a href="#AIS-Algorithm" class="headerlink" title="AIS Algorithm"></a>AIS Algorithm</h1><p>AIS算法由Agrawal、Imielinski和Swami首次提出的用于挖掘关联规则的算法。它专注于提高数据库的质量以及处理决策支持查询所需的必要功能。计算流程如下：</p>
<ol>
<li>首先，候选项集是通过扫描数据库获得。</li>
<li>对于每个事务，确定此事务中包含上一步的大项集是哪一项。</li>
<li>通过将这些大型项集与此事务中的其他项一起扩展，生成新的候选项集。</li>
</ol>
<p>案例如下：<br><img src="https://raw.githubusercontent.com/imonce/imgs/master/202406271717192.png"></p>
<p>首先生成候选集{1}{2}{3}{5},支持度为2，3，3，3。下一步生产两个候选项集{1,3}{1,4}….{1,5},对应的支持度为2，1，…,1.这里当支持度大于等于2时记录为大项集{1,3}{2,3}{2,5}{3,5},下一步生产三个组合的项集，{1,3,4}{2,3,5}{1,3,5},此时发现{2,3,5}是最终的最大项集。</p>
<h1 id="SETM-Algorithm"><a href="#SETM-Algorithm" class="headerlink" title="SETM Algorithm"></a>SETM Algorithm</h1><p>在SETM算法中，候选项目集在扫描数据库时即时生成，但在扫描结束时进行计数。然后，以与AIS算法相同的方式生成新的候选项目集，但生成交易的事务标识符TID与候选项目集一起以顺序结构保存。它将候选生成过程与计数过程分开。在扫描结束时，通过聚合顺序结构来确定候选项目集的支持计数。SETM算法具有与AIS算法相同的缺点。另一个缺点是，对于每个候选项目集，其条目数量与其支持值一样多。计算流程如下：</p>
<ol>
<li>候选项集将在数据库被扫描时动态生成，但在传递结束时进行计数。</li>
<li>新的候选项集的生成方式与AIS算法相同，但是生成事务的TID与候选项集保存在顺序结构中。如下图所示。</li>
<li>在传递结束时，通过排序和聚合（sorting and aggregating）这个顺序结构来确定候选项集的支持数。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202406271720292.png"></p>
<p>首先生成候选集{1}{2}{3}{5},支持度分别为2，3，3，3。下一步生产两个候选项集{1,3}{1,4}….{2,5},对应的TID2进行排序获得c2.进行聚合操作获得c3，发现有{1,3,4}{2,3,5}{1,3,5},{2,3,5}为最大项集。</p>
<h1 id="Apriori-Algorithm"><a href="#Apriori-Algorithm" class="headerlink" title="Apriori Algorithm"></a>Apriori Algorithm</h1><p>Apriori算法是一种最有影响的挖掘布尔关联规则频繁项集的算法。其核心是基于两阶段频集思想的递推算法。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202406271737870.png"></p>
<p>基本思想：首先找出所有的频集，这些项集出现的频繁性至少和预定义的最小支持度一样；然后由频集产生强关联规则，这些规则必须满足最小支持度和最小可信度。</p>
<h1 id="AprioriTid-Algorithm"><a href="#AprioriTid-Algorithm" class="headerlink" title="AprioriTid Algorithm"></a>AprioriTid Algorithm</h1><p>AprioriTid算法对Apriori算法做了调整，它的特点是在第一次遍历数据库D之后，就不再使用数据库来计算支持度，而是用集合Ck来完成。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202406271738857.png"></p>
<p>基本思想：跟Apriori算法的步骤基本相同，只是在第一次通过之后，数据库不用于计算候选项集；生成另一个集合C’，其中每个成员具有每个事务的TID以及该事务中存在的大项集，这个集用于计算每个候选项集。</p>
<h1 id="FP-Growth-Algorithm"><a href="#FP-Growth-Algorithm" class="headerlink" title="FP-Growth Algorithm"></a>FP-Growth Algorithm</h1><p>又称FP-tree算法，是在不使用候选代的情况下查找频繁项集的另一种方法，从而提高了性能。其核心是使用名为频繁模式树（FP-tree）的特殊数据结构，保留了项集关联信息。</p>
<p>FP树是一种存储数据的树结构，如下图所示，每一路分支表示数据集的一个项集，数字表示该元素在某分支中出现的次数。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202406271746657.png"></p>
<p>算法过程如下：</p>
<ol>
<li>构建FP树<ul>
<li>遍历数据集获得每个元素项的出现次数，去掉不满足最小支持度的元素项</li>
<li>读入每个项集并将其添加到一条已存在的路径中，若该路径不存在，则创建一条新路径（每条路径是一个无序集合）</li>
</ul>
</li>
<li>从FP树中挖掘频繁项集<ul>
<li>从FP树中获得条件模式基</li>
<li>利用条件模式基构建相应元素的条件FP树，迭代直到树包含一个元素项为止</li>
</ul>
</li>
</ol>
<h1 id="未来发展与挑战"><a href="#未来发展与挑战" class="headerlink" title="未来发展与挑战"></a>未来发展与挑战</h1><p>关联规则挖掘在数据挖掘领域具有广泛的应用前景，但同时也面临着一些挑战。未来的发展方向和挑战包括：</p>
<ol>
<li>大数据处理：随着数据规模的增加，传统的关联规则挖掘算法在处理能力和效率方面面临挑战。未来的研究需要关注大数据处理技术，以提高算法的处理能力和效率。</li>
<li>多源数据集成：多源数据集成是关联规则挖掘中的一大挑战，因为不同数据源之间可能存在格式、质量、语义等差异。未来的研究需要关注多源数据集成技术，以提高关联规则挖掘的准确性和可靠性。</li>
<li>异构数据处理：异构数据是指不同类型的数据（如文本、图像、音频等）。未来的研究需要关注异构数据处理技术，以挖掘这些数据中的关联规则。</li>
<li>私密和安全：随着数据保护和隐私问题的重视，关联规则挖掘需要关注数据的私密和安全。未来的研究需要关注数据掩码、数据脱敏等技术，以保护数据的安全和隐私。</li>
<li>智能推荐系统：关联规则挖掘可以应用于智能推荐系统，为用户提供个性化的推荐。未来的研究需要关注智能推荐系统的发展，以提高推荐系统的准确性和用户体验。</li>
</ol>
<blockquote>
<p>ref:<br><a href="https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=d4058d9f3f66c53ddea776c974fbd740afd994b4" target="_blank" rel="noopener">https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=d4058d9f3f66c53ddea776c974fbd740afd994b4</a><br><a href="https://www.jiqizhixin.com/graph/technologies/d44f694a-2363-4fd1-93d8-a77983bff15c" target="_blank" rel="noopener">https://www.jiqizhixin.com/graph/technologies/d44f694a-2363-4fd1-93d8-a77983bff15c</a><br><a href="https://www.163.com/dy/article/FD5U7JV60528OOR6.html" target="_blank" rel="noopener">https://www.163.com/dy/article/FD5U7JV60528OOR6.html</a><br><a href="https://zhuanlan.zhihu.com/p/62919869" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/62919869</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>association rule mining</tag>
      </tags>
  </entry>
  <entry>
    <title>启发式算法学习（一）：粒子群算法PSO</title>
    <url>/2019/11/06/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h1><p>粒子群算法（Particle swarm optimization，PSO）是模拟群体智能所建立起来的一种优化算法，主要用于解决最优化问题（optimization problems）。1995年由 Eberhart和Kennedy 提出，是基于对鸟群觅食行为的研究和模拟而来的。</p>
<p>假设一群鸟在觅食，在觅食范围内，只在一个地方有食物，所有鸟儿都看不到食物（即不知道食物的具体位置。当然不知道了，知道了就不用觅食了），但是能闻到食物的味道（即能知道食物距离自己是远是近。鸟的嗅觉是很灵敏的）。</p>
<p>假设鸟与鸟之间能共享信息（即互相知道每个鸟离食物多远。这个是人工假定，实际上鸟们肯定不会也不愿意），那么最好的策略就是结合自己离食物最近的位置和鸟群中其他鸟距离食物最近的位置这2个因素综合考虑找到最好的搜索位置。</p>
<p>粒子群算法与《遗传算法》等进化算法有很多相似之处。也需要初始化种群，计算适应度值，通过进化进行迭代等。但是与遗传算法不同，它没有交叉，变异等进化操作。与遗传算法比较，PSO的优势在于很容易编码，需要调整的参数也很少。</p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>PSO有几个核心概念：</p>
<ol>
<li>粒子（particle）：一只鸟。类似于遗传算法中的个体。</li>
<li>种群（population）：一群鸟。类似于遗传算法中的种群。</li>
<li>位置（position）：一个粒子（鸟）当前所在的位置。</li>
<li>经验（best）：一个粒子（鸟）自身曾经离食物最近的位置。</li>
<li>速度（velocity ）：一个粒子（鸟）飞行的速度。</li>
<li>适应度（fitness）：一个粒子（鸟）距离食物的远近。与遗传算法中的适应度类似。</li>
</ol>
<h1 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h1><div id="flowchart-0" class="flow-chart"></div>

<h1 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h1><h2 id="两个核心公式"><a href="#两个核心公式" class="headerlink" title="两个核心公式"></a>两个核心公式</h2><p>加速度更新公式：</p>
<p>$$v[i] = w * v[i] + c1 * rand() *(pbest[i] - present[i]) + c2 * rand() * (gbest - present[i])$$</p>
<p>其中v[i]代表第i个粒子的速度，w代表惯性权值,c1和c2表示学习参数，rand()表示在0-1之间的随机数,pbest[i]代表第i个粒子搜索到的最优值,gbest代表整个集群搜索到的最优值,present[i]代表第i个粒子的当前位置。</p>
<p>位置更新公式：</p>
<p>$$present[i]=present[i]+v[i]$$</p>
<h2 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h2><p>1.粒子数：粒子数的选取一般在20个到40个之间，但是需要具体问题具体对待，如果对于复杂问题，则需要设置更多的粒子，粒子数量越多，其搜索范围就越大。</p>
<p>2.惯性因子 $w$ ：用来控制继承多少粒子当前的速度的，越大则对于当前速度的继承程度越小，越小则对于当前速度的继承程度越大。有些同学可能会产生疑问，是不是说反了。其实不是，从公式中可以明确看出，其值越大，则速度的改变幅度就越大，则对于粒子的当前速度继承越小；反之，速度的改变幅度越小，则对于粒子当前速度继承越大。因此如果的值越大，则解的搜索范围越大，可以提高算法的全局搜索能力，但也损失了局部搜索能力，有可能错失最优解；反之如果的值越小，则解的搜索范围也就越小，算法的全局搜索能力也就越小，容易陷入局部最优。如果是变量，则其值应该随着迭代次数的增加而减小（类似于梯度下降当中的学习率）。如果为定值，则建议在0.6到0.75之间进行选取。</p>
<p>3.加速常数 $c1,c2$ ：通过公式一可以看出，加速常数控制着飞翔速度的计算是更加看重自身经验还是群体经验。公式一中的第二项就是自身经验的体现，加速常数可以看做是用来调整自身经验在计算粒子飞翔速度上的权重。同理是用来控制群体经验在计算粒子飞翔速度过程中的权重的。如果为0，则自身经验对于速度的计算不起作用，如果为0，则群体经验对于粒子飞翔速度的计算不起作用。的取值在学术界分歧很大主要有如下几种情况：</p>
<table>
<thead>
<tr>
<th align="left">学者</th>
<th align="left">参数取值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Clerc</td>
<td align="left">c1=c2=2.05</td>
</tr>
<tr>
<td align="left">Carlisle</td>
<td align="left">c1=2.8, c2=1.3</td>
</tr>
<tr>
<td align="left">Trelea</td>
<td align="left">w=0.6, c1=c2=1.7</td>
</tr>
<tr>
<td align="left">Eberhart</td>
<td align="left">w=0.729, c1=c2=1.494</td>
</tr>
</tbody></table>
<h1 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">f(x1,x2) = x1**2 + x2**2, x1,x2 belongs to [-10,10],求Min f</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PSO</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, population_size, max_steps)</span>:</span></span><br><span class="line">        self.w = <span class="number">0.6</span>  <span class="comment"># 惯性权重</span></span><br><span class="line">        self.c1 = self.c2 = <span class="number">2</span></span><br><span class="line">        self.population_size = population_size  <span class="comment"># 粒子群数量</span></span><br><span class="line">        self.dim = <span class="number">2</span>  <span class="comment"># 搜索空间的维度</span></span><br><span class="line">        self.max_steps = max_steps  <span class="comment"># 迭代次数</span></span><br><span class="line">        self.x_bound = [<span class="number">-10</span>, <span class="number">10</span>]  <span class="comment"># 解空间范围</span></span><br><span class="line">        self.x = np.random.uniform(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>],</span><br><span class="line">                                   (self.population_size, self.dim))  <span class="comment"># 初始化粒子群位置</span></span><br><span class="line">        self.v = np.random.rand(self.population_size, self.dim)  <span class="comment"># 初始化粒子群速度</span></span><br><span class="line">        fitness = self.calculate_fitness(self.x)</span><br><span class="line">        self.p = self.x  <span class="comment"># 个体的最佳位置</span></span><br><span class="line">        self.pg = self.x[np.argmin(fitness)]  <span class="comment"># 全局最佳位置</span></span><br><span class="line">        self.individual_best_fitness = fitness  <span class="comment"># 个体的最优适应度</span></span><br><span class="line">        self.global_best_fitness = np.max(fitness)  <span class="comment"># 全局最佳适应度</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_fitness</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.sum(np.square(x), axis=<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evolve</span><span class="params">(self)</span>:</span></span><br><span class="line">        fig = plt.figure()</span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> range(self.max_steps):</span><br><span class="line">            r1 = np.random.rand(self.population_size, self.dim)</span><br><span class="line">            r2 = np.random.rand(self.population_size, self.dim)</span><br><span class="line">            <span class="comment"># 更新速度和权重</span></span><br><span class="line">            self.v = self.w*self.v+self.c1*r1*(self.p-self.x)+self.c2*r2*(self.pg-self.x)</span><br><span class="line">            self.x = self.v + self.x</span><br><span class="line">            plt.clf()</span><br><span class="line">            plt.scatter(self.x[:, <span class="number">0</span>], self.x[:, <span class="number">1</span>], s=<span class="number">30</span>, color=<span class="string">'k'</span>)</span><br><span class="line">            plt.xlim(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>])</span><br><span class="line">            plt.ylim(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>])</span><br><span class="line">            plt.pause(<span class="number">0.01</span>)</span><br><span class="line">            <span class="comment"># plt.ion()</span></span><br><span class="line">            <span class="comment"># plt.show()</span></span><br><span class="line">           </span><br><span class="line">            fitness = self.calculate_fitness(self.x)</span><br><span class="line">            <span class="comment"># 需要更新的个体</span></span><br><span class="line">            update_id = np.greater(self.individual_best_fitness, fitness)</span><br><span class="line">            self.p[update_id] = self.x[update_id]</span><br><span class="line">            self.individual_best_fitness[update_id] = fitness[update_id]</span><br><span class="line">            <span class="comment"># 新一代出现了更小的fitness，所以更新全局最优fitness和位置</span></span><br><span class="line">            <span class="keyword">if</span> np.min(fitness) &lt; self.global_best_fitness:</span><br><span class="line">                self.pg = self.x[np.argmin(fitness)]</span><br><span class="line">                self.global_best_fitness = np.min(fitness)</span><br><span class="line">            print(<span class="string">'best fitness: %.5f, mean fitness: %.5f'</span> % (self.global_best_fitness, np.mean(fitness)))</span><br><span class="line">            </span><br><span class="line">pso = PSO(<span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">pso.evolve()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reference:<br><a href="https://blog.csdn.net/zhaozx19950803/article/details/79854466" target="_blank" rel="noopener">https://blog.csdn.net/zhaozx19950803/article/details/79854466</a><br><a href="https://blog.csdn.net/yy2050645/article/details/80740641" target="_blank" rel="noopener">https://blog.csdn.net/yy2050645/article/details/80740641</a><br><a href="https://blog.csdn.net/zj15527620802/article/details/81366105" target="_blank" rel="noopener">https://blog.csdn.net/zj15527620802/article/details/81366105</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start
op1=>operation: 初始化参数
op2=>operation: 计算各粒子适应值
op3=>operation: 找出个体和群体的最优值和最优位置
op4=>operation: 更新各个粒子的位置和速度
cond=>condition: 是否满足终止条件?
e=>end
st->op1->op2->op3->op4->cond
cond(yes)->e
cond(no)->op2</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
</blockquote>
]]></content>
      <categories>
        <category>启发式算法</category>
      </categories>
      <tags>
        <tag>启发式算法</tag>
        <tag>PSO</tag>
        <tag>粒子群算法</tag>
      </tags>
  </entry>
  <entry>
    <title>启发式算法学习（三）：遗传算法GA</title>
    <url>/2019/11/07/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h1><p>遗传算法（Genetic Alogrithm，GA）是最早由美国Holland教授提出的一种基于自然界的“适者生存，优胜劣汰”基本法则的智能搜索算法。该法则很好地诠释了生物进化的自然选择过程。遗传算法也是借鉴该基本法则，通过基于种群的思想，将问题的解通过编码的方式转化为种群中的个体，并让这些个体不断地通过选择、交叉和变异算子模拟生物的进化过程，然后利用“优胜劣汰”法则选择种群中适应性较强的个体构成子种群，然后让子种群重复类似的进化过程，直到找到问题的最优解或者到达一定的进化（运算）时间。</p>
<h1 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h1><p>个体（染色体）：自然界中一个个体（染色体）代表一个生物，在GA算法中，个体（染色体）代表了具体问题的一个解。</p>
<p>基因：在GA算法中，基因代表了具体问题解的一个决策变量，问题解和染色体中基因的对应关系如下所示</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20191107142629.png"></p>
<p>种群：多个个体即组成一个种群。GA算法中，一个问题的多组解即构成了问题的解的种群。</p>
<h1 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h1><div id="flowchart-0" class="flow-chart"></div>

<h1 id="主要操作介绍"><a href="#主要操作介绍" class="headerlink" title="主要操作介绍"></a>主要操作介绍</h1><h2 id="种群的初始化"><a href="#种群的初始化" class="headerlink" title="种群的初始化"></a>种群的初始化</h2><p>选择一种编码方案，然后在解空间内通过随机生成的方式初始化一定数量的个体构成GA的种群<br>种群的初始化和具体问题相关，一般来说可以采取某种分布（如高斯分布）在一定求解范围内随机获取</p>
<h2 id="种群评价"><a href="#种群评价" class="headerlink" title="种群评价"></a>种群评价</h2><p>种群的评价即计算种群中个体的适应度值。假设种群population有popsize个个体。依次计算每个个体的适应度值及评价种群。或者利用启发式算法对种群中的个体（矩形件的排入顺序）生成排样图并依此计算个体的适应函数值（利用率），然后保存当前种群中的最优个体作为搜索到的最优解。</p>
<h2 id="选择操作"><a href="#选择操作" class="headerlink" title="选择操作"></a>选择操作</h2><p>常见的选择操作有轮盘赌的方式：根据个体的适应度计算被选中的概率，公式如下：</p>
<p>$$P(x_j)=\frac{fit(x_j)}{\sum_{i=1}^n fit(x_i)}, j\in{1,2,…,n}$$</p>
<h2 id="交叉操作"><a href="#交叉操作" class="headerlink" title="交叉操作"></a>交叉操作</h2><p>一般以概率阀值Pc控制是否进行单点交叉、多点交叉或者其他交叉方式生成新的交叉个体。</p>
<p>交叉操作也有许多种：单点交叉，两点交叉等。此处仅讲解一下两点交叉。首先利用选择操作从种群中选择两个父辈个体parent1和parent2,然后随机产生两个位置pos1和pos2，将这两个位置中间的基因位信息进行交换，便得到下图所示的off1和off2两个个体，但是这两个个体中一般会存在基因位信息冲突的现象（整数编码时），此时需要对off1和off2个体进行调整：off1中的冲突基因根据parent1中的基因调整为parent2中的相同位置处的基因。如off1中的“1”出现了两次，则第二处的“1”需要调整为parent1中“1”对应的parent2中的“4”，依次类推处理off1中的相冲突的基因。需要注意的是，调整off2，则需要参考parent2。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20191107151135.png"></p>
<h2 id="变异操作"><a href="#变异操作" class="headerlink" title="变异操作"></a>变异操作</h2><p>一般以概率阀值Pm控制是否对个体的部分基因执行单点变异或多点变异。</p>
<p>变异操作的话，根据不同的编码方式有不同的变异操作。</p>
<p>如果是浮点数编码，则变异可以就染色体中间的某一个基因位的信息进行变异（重新生成或者其他调整方案）。</p>
<p>如果是采用整数编码方案，则一般有多种变异方法：位置变异（调换同一个体的多个基因）和符号变异（正数变负数）。</p>
<h1 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h1><p>求 $f(x,y)=21.5+x\times\sin(4\times\pi\times x) + y \times\sin(20\times\pi\times y)$ 的最大值</p>
<p>代码来自：<br><a href="https://blog.csdn.net/qq_30666517/article/details/78637255" target="_blank" rel="noopener">https://blog.csdn.net/qq_30666517/article/details/78637255</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fsolve, basinhopping</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 根据解的精度确定染色体(chromosome)的长度</span></span><br><span class="line"><span class="comment"># 需要根据决策变量的上下边界来确定</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getEncodedLength</span><span class="params">(delta=<span class="number">0.0001</span>, boundarylist=[])</span>:</span></span><br><span class="line">	<span class="comment"># 每个变量的编码长度</span></span><br><span class="line">	lengths = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> boundarylist:</span><br><span class="line">		lower = i[<span class="number">0</span>]</span><br><span class="line">		upper = i[<span class="number">1</span>]</span><br><span class="line">		<span class="comment"># lamnda 代表匿名函数f(x)=0,50代表搜索的初始解</span></span><br><span class="line">		res = fsolve(<span class="keyword">lambda</span> x: ((upper - lower) * <span class="number">1</span> / delta) - <span class="number">2</span> ** x - <span class="number">1</span>, <span class="number">50</span>)</span><br><span class="line">		length = int(np.floor(res[<span class="number">0</span>]))</span><br><span class="line">		lengths.append(length)</span><br><span class="line">	<span class="keyword">return</span> lengths</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成初始编码种群</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIntialPopulation</span><span class="params">(encodelength, populationSize)</span>:</span></span><br><span class="line">	<span class="comment"># 随机化初始种群为0</span></span><br><span class="line">	chromosomes = np.zeros((populationSize, sum(encodelength)), dtype=np.uint8)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(populationSize):</span><br><span class="line">		chromosomes[i, :] = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, sum(encodelength))</span><br><span class="line">	<span class="comment"># print('chromosomes shape:', chromosomes.shape)</span></span><br><span class="line">	<span class="keyword">return</span> chromosomes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 染色体解码得到表现型的解</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodedChromosome</span><span class="params">(encodelength, chromosomes, boundarylist, delta=<span class="number">0.0001</span>)</span>:</span></span><br><span class="line">	populations = chromosomes.shape[<span class="number">0</span>]</span><br><span class="line">	variables = len(encodelength)</span><br><span class="line">	decodedvalues = np.zeros((populations, variables))</span><br><span class="line">	<span class="keyword">for</span> k, chromosome <span class="keyword">in</span> enumerate(chromosomes):</span><br><span class="line">		chromosome = chromosome.tolist()</span><br><span class="line">		start = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> index, length <span class="keyword">in</span> enumerate(encodelength):</span><br><span class="line">			<span class="comment"># 将一个染色体进行拆分，得到染色体片段</span></span><br><span class="line">			power = length - <span class="number">1</span></span><br><span class="line">			<span class="comment"># 解码得到的10进制数字</span></span><br><span class="line">			demical = <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(start, length + start):</span><br><span class="line">				demical += chromosome[i] * (<span class="number">2</span> ** power)</span><br><span class="line">				power -= <span class="number">1</span></span><br><span class="line">			lower = boundarylist[index][<span class="number">0</span>]</span><br><span class="line">			upper = boundarylist[index][<span class="number">1</span>]</span><br><span class="line">			decodedvalue = lower + demical * (upper - lower) / (<span class="number">2</span> ** length - <span class="number">1</span>)</span><br><span class="line">			decodedvalues[k, index] = decodedvalue</span><br><span class="line">			<span class="comment"># 开始去下一段染色体的编码</span></span><br><span class="line">			start = length</span><br><span class="line">	<span class="keyword">return</span> decodedvalues</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 得到个体的适应度值及每个个体被选择的累积概率</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFitnessValue</span><span class="params">(func, chromosomesdecoded)</span>:</span></span><br><span class="line">	<span class="comment"># 得到种群规模和决策变量的个数</span></span><br><span class="line">	population, nums = chromosomesdecoded.shape</span><br><span class="line">	<span class="comment"># 初始化种群的适应度值为0</span></span><br><span class="line">	fitnessvalues = np.zeros((population, <span class="number">1</span>))</span><br><span class="line">	<span class="comment"># 计算适应度值</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(population):</span><br><span class="line">		fitnessvalues[i, <span class="number">0</span>] = func(chromosomesdecoded[i, :])</span><br><span class="line">	<span class="comment"># 计算每个染色体被选择的概率</span></span><br><span class="line">	probability = fitnessvalues / np.sum(fitnessvalues)</span><br><span class="line">	<span class="comment"># 得到每个染色体被选中的累积概率</span></span><br><span class="line">	cum_probability = np.cumsum(probability)</span><br><span class="line">	<span class="keyword">return</span> fitnessvalues, cum_probability</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新种群选择</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectNewPopulation</span><span class="params">(chromosomes, cum_probability)</span>:</span></span><br><span class="line">	m, n = chromosomes.shape</span><br><span class="line">	newpopulation = np.zeros((m, n), dtype=np.uint8)</span><br><span class="line">	<span class="comment"># 随机产生M个概率值</span></span><br><span class="line">	randoms = np.random.rand(m)</span><br><span class="line">	<span class="keyword">for</span> i, randoma <span class="keyword">in</span> enumerate(randoms):</span><br><span class="line">		logical = cum_probability &gt;= randoma</span><br><span class="line">		index = np.where(logical == <span class="number">1</span>)</span><br><span class="line">		<span class="comment"># index是tuple,tuple中元素是ndarray</span></span><br><span class="line">		newpopulation[i, :] = chromosomes[index[<span class="number">0</span>][<span class="number">0</span>], :]</span><br><span class="line">	<span class="keyword">return</span> newpopulation</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新种群交叉</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crossover</span><span class="params">(population, Pc=<span class="number">0.8</span>)</span>:</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	:param population: 新种群</span></span><br><span class="line"><span class="string">	:param Pc: 交叉概率默认是0.8</span></span><br><span class="line"><span class="string">	:return: 交叉后得到的新种群</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">	<span class="comment"># 根据交叉概率计算需要进行交叉的个体个数</span></span><br><span class="line">	m, n = population.shape</span><br><span class="line">	numbers = np.uint8(m * Pc)</span><br><span class="line">	<span class="comment"># 确保进行交叉的染色体个数是偶数个</span></span><br><span class="line">	<span class="keyword">if</span> numbers % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">		numbers += <span class="number">1</span></span><br><span class="line">	<span class="comment"># 交叉后得到的新种群</span></span><br><span class="line">	updatepopulation = np.zeros((m, n), dtype=np.uint8)</span><br><span class="line">	<span class="comment"># 产生随机索引</span></span><br><span class="line">	index = random.sample(range(m), numbers)</span><br><span class="line">	<span class="comment"># 不进行交叉的染色体进行复制</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> index.__contains__(i):</span><br><span class="line">			updatepopulation[i, :] = population[i, :]</span><br><span class="line">	<span class="comment"># crossover</span></span><br><span class="line">	<span class="keyword">while</span> len(index) &gt; <span class="number">0</span>:</span><br><span class="line">		a = index.pop()</span><br><span class="line">		b = index.pop()</span><br><span class="line">		<span class="comment"># 随机产生一个交叉点</span></span><br><span class="line">		crossoverPoint = random.sample(range(<span class="number">1</span>, n), <span class="number">1</span>)</span><br><span class="line">		crossoverPoint = crossoverPoint[<span class="number">0</span>]</span><br><span class="line">		<span class="comment"># one-single-point crossover</span></span><br><span class="line">		updatepopulation[a, <span class="number">0</span>:crossoverPoint] = population[a, <span class="number">0</span>:crossoverPoint]</span><br><span class="line">		updatepopulation[a, crossoverPoint:] = population[b, crossoverPoint:]</span><br><span class="line">		updatepopulation[b, <span class="number">0</span>:crossoverPoint] = population[b, <span class="number">0</span>:crossoverPoint]</span><br><span class="line">		updatepopulation[b, crossoverPoint:] = population[a, crossoverPoint:]</span><br><span class="line">	<span class="keyword">return</span> updatepopulation</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 染色体变异</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(population, Pm=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	:param population: 经交叉后得到的种群</span></span><br><span class="line"><span class="string">	:param Pm: 变异概率默认是0.01</span></span><br><span class="line"><span class="string">	:return: 经变异操作后的新种群</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">	updatepopulation = np.copy(population)</span><br><span class="line">	m, n = population.shape</span><br><span class="line">	<span class="comment"># 计算需要变异的基因个数</span></span><br><span class="line">	gene_num = np.uint8(m * n * Pm)</span><br><span class="line">	<span class="comment"># 将所有的基因按照序号进行10进制编码，则共有m*n个基因</span></span><br><span class="line">	<span class="comment"># 随机抽取gene_num个基因进行基本位变异</span></span><br><span class="line">	mutationGeneIndex = random.sample(range(<span class="number">0</span>, m * n), gene_num)</span><br><span class="line">	<span class="comment"># 确定每个将要变异的基因在整个染色体中的基因座(即基因的具体位置)</span></span><br><span class="line">	<span class="keyword">for</span> gene <span class="keyword">in</span> mutationGeneIndex:</span><br><span class="line">		<span class="comment"># 确定变异基因位于第几个染色体</span></span><br><span class="line">		chromosomeIndex = gene // n</span><br><span class="line">		<span class="comment"># 确定变异基因位于当前染色体的第几个基因位</span></span><br><span class="line">		geneIndex = gene % n</span><br><span class="line">		<span class="comment"># mutation</span></span><br><span class="line">		<span class="keyword">if</span> updatepopulation[chromosomeIndex, geneIndex] == <span class="number">0</span>:</span><br><span class="line">			updatepopulation[chromosomeIndex, geneIndex] = <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			updatepopulation[chromosomeIndex, geneIndex] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> updatepopulation</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义适应度函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fitnessFunction</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">lambda</span> x: <span class="number">21.5</span> + x[<span class="number">0</span>] * np.sin(<span class="number">4</span> * np.pi * x[<span class="number">0</span>]) + x[<span class="number">1</span>] * np.sin(<span class="number">20</span> * np.pi * x[<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(max_iter=<span class="number">500</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 每次迭代得到的最优解</span></span><br><span class="line">    optimalSolutions = []</span><br><span class="line">    optimalValues = []</span><br><span class="line">    <span class="comment"># 决策变量的取值范围</span></span><br><span class="line">    decisionVariables = [[<span class="number">-3.0</span>, <span class="number">12.1</span>], [<span class="number">4.1</span>, <span class="number">5.8</span>]]</span><br><span class="line">    <span class="comment"># 得到染色体编码长度</span></span><br><span class="line">    lengthEncode = getEncodedLength(boundarylist=decisionVariables)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到初始种群编码</span></span><br><span class="line">    chromosomesEncoded = getIntialPopulation(lengthEncode, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> iteration <span class="keyword">in</span> range(max_iter):</span><br><span class="line">        <span class="comment"># 种群解码</span></span><br><span class="line">        decoded = decodedChromosome(lengthEncode, chromosomesEncoded, decisionVariables)</span><br><span class="line">        <span class="comment"># 得到个体适应度值和个体的累积概率</span></span><br><span class="line">        evalvalues, cum_proba = getFitnessValue(fitnessFunction(), decoded)</span><br><span class="line">        <span class="comment"># 选择新的种群</span></span><br><span class="line">        newpopulations = selectNewPopulation(chromosomesEncoded, cum_proba)</span><br><span class="line">        <span class="comment"># 进行交叉操作</span></span><br><span class="line">        crossoverpopulation = crossover(newpopulations)</span><br><span class="line">        <span class="comment"># mutation</span></span><br><span class="line">        mutationpopulation = mutation(crossoverpopulation)</span><br><span class="line">        <span class="comment"># 将变异后的种群解码，得到每轮迭代最终的种群</span></span><br><span class="line">        final_decoded = decodedChromosome(lengthEncode, mutationpopulation, decisionVariables)</span><br><span class="line">        <span class="comment"># 适应度评价</span></span><br><span class="line">        fitnessvalues, cum_individual_proba = getFitnessValue(fitnessFunction(), final_decoded)</span><br><span class="line">        <span class="comment"># 搜索每次迭代的最优解，以及最优解对应的目标函数的取值</span></span><br><span class="line">        optimalValues.append(np.max(list(fitnessvalues)))</span><br><span class="line">        index = np.where(fitnessvalues == max(list(fitnessvalues)))</span><br><span class="line">        optimalSolutions.append(final_decoded[index[<span class="number">0</span>][<span class="number">0</span>], :])</span><br><span class="line">        chromosomesEncoded = mutationpopulation</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索最优解</span></span><br><span class="line">    optimalValue = np.max(optimalValues)</span><br><span class="line">    optimalIndex = np.where(optimalValues == optimalValue)</span><br><span class="line">    optimalSolution = optimalSolutions[optimalIndex[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">return</span> optimalSolution, optimalValue</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">solution, value = main()</span><br><span class="line">print(<span class="string">'最优解: x1, x2'</span>)</span><br><span class="line">print(solution[<span class="number">0</span>], solution[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">'最优目标函数值:'</span>, value)</span><br><span class="line"><span class="comment"># 测量运行时间</span></span><br><span class="line">elapsedtime = timeit.timeit(stmt=main, number=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Searching Time Elapsed:(S)'</span>, elapsedtime)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reference:<br><a href="https://blog.csdn.net/bible_reader/article/details/72782675" target="_blank" rel="noopener">https://blog.csdn.net/bible_reader/article/details/72782675</a><br><a href="https://blog.csdn.net/qq_30666517/article/details/78637255" target="_blank" rel="noopener">https://blog.csdn.net/qq_30666517/article/details/78637255</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start
op1=>operation: 种群初始化
op2=>operation: 评估种群
op3=>operation: 选择操作
op4=>operation: 直接将选中的个体作为临时个体
op5=>operation: 对选中的个体进行交叉操作，产生交叉个体
op6=>operation: 直接将所有临时个体放入下一代种群中
op7=>operation: 对临时个体进行变异操作，再投入到下一代种群中
op8=>operation: 输出最优结果
cond1=>condition: 是否进行交叉操作
cond2=>condition: 是否进行变异操作
cond3=>condition: 满足终止条件?
ed=>end: End
st->op1->op2->op3->cond1(no)->op4->cond2(no)->op6->cond3(yes)->op8->ed
cond1(yes)->op5->cond2
cond2(yes)->op7->cond3
cond3(no)->op2</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
</blockquote>
]]></content>
      <categories>
        <category>启发式算法</category>
      </categories>
      <tags>
        <tag>启发式算法</tag>
        <tag>遗传算法</tag>
        <tag>GA</tag>
        <tag>Genetic Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>启发式算法学习（二）：模拟退火算法SAA</title>
    <url>/2019/11/06/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h1><p>模拟退火算法（Simulated annealing algorithm，SAA）的思想借鉴于固体的退火原理，当固体的温度很高的时候，内能比较大，固体的内部粒子处于快速无序运动，当温度慢慢降低的过程中，固体的内能减小，粒子的慢慢趋于有序，最终，当固体处于常温时，内能达到最小，此时，粒子最为稳定。模拟退火算法便是基于这样的原理设计而成。</p>
<p>模拟退火算法从某一高温出发，在高温状态下计算初始解，然后以预设的邻域函数产生一个扰动量，从而得到新的状态，即模拟粒子的无序运动，比较新旧状态下的能量，即目标函数的解。如果新状态的能量小于旧状态，则状态发生转化；如果新状态的能量大于旧状态，则以一定的概率准则发生转化。当状态稳定后，便可以看作达到了当前状态的最优解，便可以开始降温，在下一个温度继续迭代，最终达到低温的稳定状态，便得到了模拟退火算法产生的结果。</p>
<h1 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h1><div id="flowchart-0" class="flow-chart"></div>

<h1 id="状态空间与邻域函数"><a href="#状态空间与邻域函数" class="headerlink" title="状态空间与邻域函数"></a>状态空间与邻域函数</h1><p>状态空间也称为搜索空间，它由经过编码的可行解的集合所组成。而邻域函数应尽可能满足产生的候选解遍布全部状态空间。其通常由产生候选解的方式和候选解产生的概率分布组成。候选解一般按照某一概率密度函数对解空间进行随机采样获得，而概率分布可以为均匀分布、正态分布、指数分布等。</p>
<h1 id="状态概率分布（Metropolis准则）"><a href="#状态概率分布（Metropolis准则）" class="headerlink" title="状态概率分布（Metropolis准则）"></a>状态概率分布（Metropolis准则）</h1><p>状态转移概率是指从一个状态转换成另一个状态的概率，模拟退火算法中一般采用Metropolis准则，具体如下：</p>
<p>$$f(x)=\left\lbrace\begin{array}{cll}<br>1 &amp; , &amp; E(x_{new}) &lt; E(x_{old}) \\<br>exp(-\frac{E(x_{new})-E(x_{old})}{T}) &amp; , &amp; E(x_{new}) \ge E(x_{old})<br>\end{array}\right.$$</p>
<p>其与当前温度参数T有关，随温度的下降而减小。</p>
<h1 id="冷却进度表"><a href="#冷却进度表" class="headerlink" title="冷却进度表"></a>冷却进度表</h1><p>冷却进度表是指从某一高温状态T向低温状态冷却时的降温函数,设时刻的温度为T(t)，则经典模拟退火算法的降温方式为：</p>
<p>$$T(t)=\frac{T_{0}}{lg(1+t)}$$</p>
<p>而快速模拟退火算法的降温方式为：</p>
<p>$$T(t)=\frac{T_{0}}{1+t}$$</p>
<p>其他方法不再赘述。</p>
<h1 id="初始温度"><a href="#初始温度" class="headerlink" title="初始温度"></a>初始温度</h1><p>一般来说，初始温度越大，获得高质量解的几率越大，但是花费的时间也会随之增加，因此，初温的确定应该同时考虑计算效率与优化质量，常用的方法包括：</p>
<p>1.均匀抽样一组状态，以各状态目标值的方差为初温。</p>
<p>2.随机产生一组状态，确定两两状态间的最大目标值差，然后根据差值，利用一定的函数确定初温，如： $T_{0}=-\frac{\Delta_{max}}{Pr}$ ,其中Pr为初始接受概率。</p>
<p>3.根据经验公式给出。</p>
<h1 id="循环终止准则"><a href="#循环终止准则" class="headerlink" title="循环终止准则"></a>循环终止准则</h1><p>内循环（求解循环）终止准则：</p>
<ol>
<li>检验目标函数的均值是否稳定</li>
<li>连续若干步的目标值变化较小</li>
<li>按一定的步数进行抽样</li>
</ol>
<p>外循环（降温循环）终止准则：</p>
<ol>
<li>设置终止温度</li>
<li>设置外循环迭代次数</li>
<li>算法搜索到的最优值连续若干步保持不变</li>
<li>检验系统熵是否稳定</li>
</ol>
<h1 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h1><p>实例函数： $f(x)=(x^{2}-5x)sin(x^2)$ </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SA</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, interval, tab=<span class="string">'min'</span>, T_max=<span class="number">10000</span>, T_min=<span class="number">1</span>, iterMax=<span class="number">1000</span>, rate=<span class="number">0.95</span>)</span>:</span></span><br><span class="line">        self.interval = interval <span class="comment"># 给定状态空间 - 即待求解空间</span></span><br><span class="line">        self.T_max = T_max <span class="comment"># 初始退火温度 - 温度上限</span></span><br><span class="line">        self.T_min = T_min <span class="comment"># 截止退火温度 - 温度下限</span></span><br><span class="line">        self.iterMax = iterMax <span class="comment"># 定温内部迭代次数</span></span><br><span class="line">        self.rate = rate <span class="comment"># 退火降温速度</span></span><br><span class="line">        </span><br><span class="line">        self.x_seed = random.uniform(interval[<span class="number">0</span>], interval[<span class="number">1</span>]) <span class="comment"># 解空间内的种子</span></span><br><span class="line">        self.tab = tab.strip() <span class="comment"># 求解最大值还是最小值的标签: 'min' - 最小值；'max' - 最大值</span></span><br><span class="line"></span><br><span class="line">        self.solve() <span class="comment"># 完成主体的求解过程</span></span><br><span class="line">        self.display() <span class="comment"># 数据可视化展示</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self)</span>:</span></span><br><span class="line">        temp = <span class="string">'deal_'</span> + self.tab <span class="comment"># 采用反射方法提取对应的函数</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, temp):</span><br><span class="line">            deal = getattr(self, temp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit(<span class="string">'&gt;&gt;&gt;tab标签传参有误："min"|"max"&lt;&lt;&lt;'</span>)  </span><br><span class="line">        x1 = self.x_seed</span><br><span class="line">        T = self.T_max</span><br><span class="line">        <span class="keyword">while</span> T &gt;= self.T_min:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.iterMax):</span><br><span class="line">                f1 = self.func(x1)</span><br><span class="line">                delta_x = random.random() * <span class="number">2</span> - <span class="number">1</span> <span class="comment"># [-1,1)之间的随机值</span></span><br><span class="line">                <span class="keyword">if</span> x1 + delta_x &gt;= self.interval[<span class="number">0</span>] <span class="keyword">and</span> x1 + delta_x &lt;= self.interval[<span class="number">1</span>]:   <span class="comment"># 将随机解束缚在给定状态空间内</span></span><br><span class="line">                    x2 = x1 + delta_x</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x2 = x1 - delta_x</span><br><span class="line">                f2 = self.func(x2)</span><br><span class="line">                delta_f = f2 - f1</span><br><span class="line">                x1 = deal(x1, x2, delta_f, T)</span><br><span class="line">            T *= self.rate</span><br><span class="line">        self.x_solu = x1 <span class="comment"># 提取最终退火解       </span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, x)</span>:</span> <span class="comment"># 状态产生函数 - 即待求解函数</span></span><br><span class="line">        value = np.sin(x**<span class="number">2</span>) * (x**<span class="number">2</span> - <span class="number">5</span>*x)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">p_min</span><span class="params">(self, delta, T)</span>:</span> <span class="comment"># 计算最小值时，容忍解的状态迁移概率</span></span><br><span class="line">        probability = np.exp(-delta/T)</span><br><span class="line">        <span class="keyword">return</span> probability</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">p_max</span><span class="params">(self, delta, T)</span>:</span></span><br><span class="line">        probability = np.exp(delta/T) <span class="comment"># 计算最大值时，容忍解的状态迁移概率</span></span><br><span class="line">        <span class="keyword">return</span> probability</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_min</span><span class="params">(self, x1, x2, delta, T)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> delta &lt; <span class="number">0</span>: <span class="comment"># 更优解</span></span><br><span class="line">            <span class="keyword">return</span> x2</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 容忍解</span></span><br><span class="line">            P = self.p_min(delta, T)</span><br><span class="line">            <span class="keyword">if</span> P &gt; random.random(): <span class="keyword">return</span> x2</span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> x1</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_max</span><span class="params">(self, x1, x2, delta, T)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> delta &gt; <span class="number">0</span>: <span class="comment"># 更优解</span></span><br><span class="line">            <span class="keyword">return</span> x2</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 容忍解</span></span><br><span class="line">            P = self.p_max(delta, T)</span><br><span class="line">            <span class="keyword">if</span> P &gt; random.random(): <span class="keyword">return</span> x2</span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> x1</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'seed: &#123;&#125;\nsolution: &#123;&#125;'</span>.format(self.x_seed, self.x_solu))</span><br><span class="line">        plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line">        x = np.linspace(self.interval[<span class="number">0</span>], self.interval[<span class="number">1</span>], <span class="number">300</span>)</span><br><span class="line">        y = self.func(x)</span><br><span class="line">        plt.plot(x, y, <span class="string">'g-'</span>, label=<span class="string">'function'</span>)</span><br><span class="line">        plt.plot(self.x_seed, self.func(self.x_seed), <span class="string">'bo'</span>, label=<span class="string">'seed'</span>)</span><br><span class="line">        plt.plot(self.x_solu, self.func(self.x_solu), <span class="string">'r*'</span>, label=<span class="string">'solution'</span>)</span><br><span class="line">        plt.title(<span class="string">'solution = &#123;&#125;'</span>.format(self.x_solu))</span><br><span class="line">        plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">        plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">        plt.legend()</span><br><span class="line">        plt.savefig(<span class="string">'SA.png'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        plt.close()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    SA([<span class="number">-5</span>, <span class="number">5</span>], <span class="string">'max'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reference<br><a href="https://www.imooc.com/article/30160" target="_blank" rel="noopener">https://www.imooc.com/article/30160</a><br><a href="https://baike.baidu.com/item/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/355508?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/模拟退火算法/355508?fr=aladdin</a><br><a href="https://blog.csdn.net/google19890102/article/details/45395257" target="_blank" rel="noopener">https://blog.csdn.net/google19890102/article/details/45395257</a><br><a href="https://www.cnblogs.com/xxhbdk/p/9192750.html" target="_blank" rel="noopener">https://www.cnblogs.com/xxhbdk/p/9192750.html</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start
op1=>operation: 随机生成初始解w，计算目标函数f(w)
op2=>operation: 扰动产生新解w'，计算目标函数f(w')
op3=>operation: 接受新解，w=w'，f(w)=f(w')
op4=>operation: 按照Metropolis准则接受新解
op5=>operation: 缓慢降低温度，重置迭代次数
op6=>operation: 运算结束，返回最优解
cond1=>condition: f(w')更接近优化目标？
cond2=>condition: 是否达到迭代次数?
cond3=>condition: 满足终止条件?
ed=>end: End
st->op1->op2->cond1(yes)->op3->cond2(no)->cond3(yes)->op6->ed
cond1(no)->op4->cond2
cond2(yes)->op6->ed
cond3(no)->op5(top)->op2</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
</blockquote>
]]></content>
      <categories>
        <category>启发式算法</category>
      </categories>
      <tags>
        <tag>启发式算法</tag>
        <tag>模拟退火算法</tag>
      </tags>
  </entry>
  <entry>
    <title>启发式算法学习（四）：蚁群算法ACO</title>
    <url>/2019/11/08/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h1><p>蚁群算法（<strong>Ant Colony Algorithm, AG</strong>, or <strong>Ant Colony Optimization, ACO</strong>），又称蚂蚁算法，是一种用来在图中寻找优化路径的机率型算法。它由Marco Dorigo于1992年在他的博士论文“Ant system: optimization by a colony of cooperating agents”中提出，其灵感来源于蚂蚁在寻找食物过程中发现路径的行为。蚁群算法是一种模拟进化算法，初步的研究表明该算法具有许多优良的性质。针对PID控制器参数优化设计问题，将蚁群算法设计的结果与遗传算法设计的结果进行了比较，数值仿真结果表明，蚁群算法具有一种新的模拟进化优化方法的有效性和应用价值。</p>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>蚂蚁会在其经过的路径上释放一种可以称之为“信息素”的物质，蚁群内的蚂蚁对“信息素”具有感知能力，它们会沿着“信息素”浓度较高路径行走，而每只路过的蚂蚁都会在路上留下“信息素”，这就形成一种类似正反馈的机制，这样经过一段时间后，整个蚁群就会沿着最短路径到达食物源了。可以分解为以下几步：</p>
<ol>
<li>蚂蚁在路径上释放信息素。</li>
<li>碰到还没走过的路口，就随机挑选一条路走。同时，释放与路径长度有关的信息素。</li>
<li>信息素浓度与路径长度成反比。后来的蚂蚁再次碰到该路口时，就选择信息素浓度较高路径。</li>
<li>最优路径上的信息素浓度越来越大。</li>
<li>最终蚁群找到最优寻食路径。</li>
</ol>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p>蚁群算法解决旅行商问题的流程：</p>
<div id="flowchart-0" class="flow-chart"></div>

<h1 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h1><p>这个利用TSP问题来说明这个数学模型，对于TSP问题，设蚂蚁群体中蚂蚁的数量为m，城市的数量为n，城市i与城市j之间的距离为 $d_{ij}$ ，t时刻城市i与城市j连接路径上的信息素浓度为 $c_{ij}(t)$ 。初始时刻，蚂蚁被放置在不同的城市里，且各城市键连接路径上的信息素浓度相同。然后蚂蚁将按一定概率选择线路，不放设 $p^k_{ij}(t)$ 为t时刻蚂蚁k从城市i转移到城市j的概率。“蚂蚁TSP”策略收到两方面的左右，首先是访问某城市的期望，领完便是其他蚂蚁释放的信息素浓度。所以已定义：</p>
<p>$$p_{ij}^{k}(t)=\left\lbrace\begin{array}{cll}<br>\frac{[c_{ij}(t)]^{a} * [n_{ij}(t)]^{b}}{\sum [c_{ij}(t)]^{a} * [n_{ij}(t)]^{b}} &amp; , &amp; j \in allowk \\<br>0 &amp; , &amp; j \notin allowk<br>\end{array}\right.$$</p>
<p>其中：</p>
<ul>
<li>$n_{ij}(t)$ 为启发函数，表示蚂蚁从城市i转移到城市j的期望</li>
<li>$allowk$ 为蚂蚁带访问城市集合，开始时， $allowk$ 中有 $n−1$ 个元素，即包括除了蚂蚁k出发城市的其他多个城市，随着时间的推移， $allowk$ 中的元素越来越少，直至为空</li>
<li>$a$ 为信息素重要程度因子</li>
<li>$b$ 为启发函数因子</li>
</ul>
<p>在蚂蚁遍历各城市的过程中，与实际情况相似的是，在蚂蚁释放信息素的同事，各个城市之间连接路径上的信息素的强度也在通过挥发等方式逐渐消失。为了描述这个特征，设ρ表示信息素挥发程度。这样所有蚂蚁完成走完一遍所有城市之后，各个城市键连接路径上的信息素浓度为</p>
<p>$$c_{ij}(t+1) = (1-\rho)*c_{ij}(t) + \Delta c_{ij}$$</p>
<p>$$\Delta c_{ij} = \sum \Delta c^k_{ij}$$</p>
<p>$\Delta c^k_{ij}$ 为第k只蚂蚁在城市i与城市j连接路径上释放信息素而增加的信息素浓度。</p>
<p>$\Delta c_{ij}$ 为所有蚂蚁在城市i与城市j连接路径上释放信息素而增加的信息素浓度。</p>
<p>一般情况下 $\Delta c^k_{ij}=\frac{Q}{L_k}$ ,若蚂蚁k从城市i访问了城市j，其中 $Q$ 为信息素常数， $L_k$ 为第k只蚂蚁经过路径总长度。</p>
<h1 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h1><p>代码来源：<a href="https://blog.csdn.net/fanxin_i/article/details/80380733" target="_blank" rel="noopener">https://blog.csdn.net/fanxin_i/article/details/80380733</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="comment">#//GUI模块</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">ALPHA:信息启发因子，值越大，则蚂蚁选择之前走过的路径可能性就越大</span></span><br><span class="line"><span class="string">      ，值越小，则蚁群搜索范围就会减少，容易陷入局部最优</span></span><br><span class="line"><span class="string">BETA:Beta值越大，蚁群越就容易选择局部较短路径，这时算法收敛速度会</span></span><br><span class="line"><span class="string">     加快，但是随机性不高，容易得到局部的相对最优</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">(ALPHA, BETA, RHO, Q) = (<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">0.5</span>,<span class="number">100.0</span>)</span><br><span class="line"><span class="comment"># 城市数，蚁群</span></span><br><span class="line">(city_num, ant_num) = (<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">distance_x = [</span><br><span class="line">    <span class="number">178</span>,<span class="number">272</span>,<span class="number">176</span>,<span class="number">171</span>,<span class="number">650</span>,<span class="number">499</span>,<span class="number">267</span>,<span class="number">703</span>,<span class="number">408</span>,<span class="number">437</span>,<span class="number">491</span>,<span class="number">74</span>,<span class="number">532</span>,</span><br><span class="line">    <span class="number">416</span>,<span class="number">626</span>,<span class="number">42</span>,<span class="number">271</span>,<span class="number">359</span>,<span class="number">163</span>,<span class="number">508</span>,<span class="number">229</span>,<span class="number">576</span>,<span class="number">147</span>,<span class="number">560</span>,<span class="number">35</span>,<span class="number">714</span>,</span><br><span class="line">    <span class="number">757</span>,<span class="number">517</span>,<span class="number">64</span>,<span class="number">314</span>,<span class="number">675</span>,<span class="number">690</span>,<span class="number">391</span>,<span class="number">628</span>,<span class="number">87</span>,<span class="number">240</span>,<span class="number">705</span>,<span class="number">699</span>,<span class="number">258</span>,</span><br><span class="line">    <span class="number">428</span>,<span class="number">614</span>,<span class="number">36</span>,<span class="number">360</span>,<span class="number">482</span>,<span class="number">666</span>,<span class="number">597</span>,<span class="number">209</span>,<span class="number">201</span>,<span class="number">492</span>,<span class="number">294</span>]</span><br><span class="line">distance_y = [</span><br><span class="line">    <span class="number">170</span>,<span class="number">395</span>,<span class="number">198</span>,<span class="number">151</span>,<span class="number">242</span>,<span class="number">556</span>,<span class="number">57</span>,<span class="number">401</span>,<span class="number">305</span>,<span class="number">421</span>,<span class="number">267</span>,<span class="number">105</span>,<span class="number">525</span>,</span><br><span class="line">    <span class="number">381</span>,<span class="number">244</span>,<span class="number">330</span>,<span class="number">395</span>,<span class="number">169</span>,<span class="number">141</span>,<span class="number">380</span>,<span class="number">153</span>,<span class="number">442</span>,<span class="number">528</span>,<span class="number">329</span>,<span class="number">232</span>,<span class="number">48</span>,</span><br><span class="line">    <span class="number">498</span>,<span class="number">265</span>,<span class="number">343</span>,<span class="number">120</span>,<span class="number">165</span>,<span class="number">50</span>,<span class="number">433</span>,<span class="number">63</span>,<span class="number">491</span>,<span class="number">275</span>,<span class="number">348</span>,<span class="number">222</span>,<span class="number">288</span>,</span><br><span class="line">    <span class="number">490</span>,<span class="number">213</span>,<span class="number">524</span>,<span class="number">244</span>,<span class="number">114</span>,<span class="number">104</span>,<span class="number">552</span>,<span class="number">70</span>,<span class="number">425</span>,<span class="number">227</span>,<span class="number">331</span>]</span><br><span class="line"><span class="comment">#城市距离和信息素</span></span><br><span class="line">distance_graph = [ [<span class="number">0.0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(city_num)] <span class="keyword">for</span> raw <span class="keyword">in</span> range(city_num)]</span><br><span class="line">pheromone_graph = [ [<span class="number">1.0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(city_num)] <span class="keyword">for</span> raw <span class="keyword">in</span> range(city_num)]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#----------- 蚂蚁 -----------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ant</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ID)</span>:</span></span><br><span class="line">        </span><br><span class="line">        self.ID = ID                 <span class="comment"># ID</span></span><br><span class="line">        self.__clean_data()          <span class="comment"># 随机初始化出生点</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 初始数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__clean_data</span><span class="params">(self)</span>:</span></span><br><span class="line">    </span><br><span class="line">        self.path = []               <span class="comment"># 当前蚂蚁的路径           </span></span><br><span class="line">        self.total_distance = <span class="number">0.0</span>    <span class="comment"># 当前路径的总距离</span></span><br><span class="line">        self.move_count = <span class="number">0</span>          <span class="comment"># 移动次数</span></span><br><span class="line">        self.current_city = <span class="number">-1</span>       <span class="comment"># 当前停留的城市</span></span><br><span class="line">        self.open_table_city = [<span class="keyword">True</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(city_num)] <span class="comment"># 探索城市的状态</span></span><br><span class="line">        </span><br><span class="line">        city_index = random.randint(<span class="number">0</span>,city_num<span class="number">-1</span>) <span class="comment"># 随机初始出生点</span></span><br><span class="line">        self.current_city = city_index</span><br><span class="line">        self.path.append(city_index)</span><br><span class="line">        self.open_table_city[city_index] = <span class="keyword">False</span></span><br><span class="line">        self.move_count = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择下一个城市</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__choice_next_city</span><span class="params">(self)</span>:</span></span><br><span class="line">        </span><br><span class="line">        next_city = <span class="number">-1</span></span><br><span class="line">        select_citys_prob = [<span class="number">0.0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(city_num)]  <span class="comment">#存储去下个城市的概率</span></span><br><span class="line">        total_prob = <span class="number">0.0</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 获取去下一个城市的概率</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(city_num):</span><br><span class="line">            <span class="keyword">if</span> self.open_table_city[i]:</span><br><span class="line">                <span class="keyword">try</span> :</span><br><span class="line">                    <span class="comment"># 计算概率：与信息素浓度成正比，与距离成反比</span></span><br><span class="line">                    select_citys_prob[i] = pow(pheromone_graph[self.current_city][i], ALPHA) * pow((<span class="number">1.0</span>/distance_graph[self.current_city][i]), BETA)</span><br><span class="line">                    total_prob += select_citys_prob[i]</span><br><span class="line">                <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">print</span> (<span class="string">'Ant ID: &#123;ID&#125;, current city: &#123;current&#125;, target city: &#123;target&#125;'</span>.format(ID = self.ID, current = self.current_city, target = i))</span><br><span class="line">                    sys.exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 轮盘选择城市</span></span><br><span class="line">        <span class="keyword">if</span> total_prob &gt; <span class="number">0.0</span>:</span><br><span class="line">            <span class="comment"># 产生一个随机概率,0.0-total_prob</span></span><br><span class="line">            temp_prob = random.uniform(<span class="number">0.0</span>, total_prob)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(city_num):</span><br><span class="line">                <span class="keyword">if</span> self.open_table_city[i]:</span><br><span class="line">                    <span class="comment"># 轮次相减</span></span><br><span class="line">                    temp_prob -= select_citys_prob[i]</span><br><span class="line">                    <span class="keyword">if</span> temp_prob &lt; <span class="number">0.0</span>:</span><br><span class="line">                        next_city = i</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 未从概率产生，顺序选择一个未访问城市</span></span><br><span class="line">        <span class="comment"># if next_city == -1:</span></span><br><span class="line">        <span class="comment">#     for i in range(city_num):</span></span><br><span class="line">        <span class="comment">#         if self.open_table_city[i]:</span></span><br><span class="line">        <span class="comment">#             next_city = i</span></span><br><span class="line">        <span class="comment">#             break</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (next_city == <span class="number">-1</span>):</span><br><span class="line">            next_city = random.randint(<span class="number">0</span>, city_num - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">while</span> ((self.open_table_city[next_city]) == <span class="keyword">False</span>):  <span class="comment"># if==False,说明已经遍历过了</span></span><br><span class="line">                next_city = random.randint(<span class="number">0</span>, city_num - <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 返回下一个城市序号</span></span><br><span class="line">        <span class="keyword">return</span> next_city</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算路径总距离</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cal_total_distance</span><span class="params">(self)</span>:</span></span><br><span class="line">        </span><br><span class="line">        temp_distance = <span class="number">0.0</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, city_num):</span><br><span class="line">            start, end = self.path[i], self.path[i<span class="number">-1</span>]</span><br><span class="line">            temp_distance += distance_graph[start][end]</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 回路</span></span><br><span class="line">        end = self.path[<span class="number">0</span>]</span><br><span class="line">        temp_distance += distance_graph[start][end]</span><br><span class="line">        self.total_distance = temp_distance</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 移动操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__move</span><span class="params">(self, next_city)</span>:</span></span><br><span class="line">        </span><br><span class="line">        self.path.append(next_city)</span><br><span class="line">        self.open_table_city[next_city] = <span class="keyword">False</span></span><br><span class="line">        self.total_distance += distance_graph[self.current_city][next_city]</span><br><span class="line">        self.current_city = next_city</span><br><span class="line">        self.move_count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 搜索路径</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_path</span><span class="params">(self)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 初始化数据</span></span><br><span class="line">        self.__clean_data()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 搜素路径，遍历完所有城市为止</span></span><br><span class="line">        <span class="keyword">while</span> self.move_count &lt; city_num:</span><br><span class="line">            <span class="comment"># 移动到下一个城市</span></span><br><span class="line">            next_city =  self.__choice_next_city()</span><br><span class="line">            self.__move(next_city)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 计算路径总长度</span></span><br><span class="line">        self.__cal_total_distance()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#----------- TSP问题 -----------</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TSP</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root, width = <span class="number">800</span>, height = <span class="number">600</span>, n = city_num)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 创建画布</span></span><br><span class="line">        self.root = root                               </span><br><span class="line">        self.width = width      </span><br><span class="line">        self.height = height</span><br><span class="line">        <span class="comment"># 城市数目初始化为city_num</span></span><br><span class="line">        self.n = n</span><br><span class="line">        <span class="comment"># tkinter.Canvas</span></span><br><span class="line">        self.canvas = tkinter.Canvas(</span><br><span class="line">                root,</span><br><span class="line">                width = self.width,</span><br><span class="line">                height = self.height,</span><br><span class="line">                bg = <span class="string">"#EBEBEB"</span>,             <span class="comment"># 背景白色 </span></span><br><span class="line">                xscrollincrement = <span class="number">1</span>,</span><br><span class="line">                yscrollincrement = <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        self.canvas.pack(expand = tkinter.YES, fill = tkinter.BOTH)</span><br><span class="line">        self.title(<span class="string">"TSP蚁群算法(n:初始化 e:开始搜索 s:停止搜索 q:退出程序)"</span>)</span><br><span class="line">        self.__r = <span class="number">5</span></span><br><span class="line">        self.__lock = threading.RLock()     <span class="comment"># 线程锁</span></span><br><span class="line"> </span><br><span class="line">        self.__bindEvents()</span><br><span class="line">        self.new()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 计算城市之间的距离</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(city_num):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(city_num):</span><br><span class="line">                temp_distance = pow((distance_x[i] - distance_x[j]), <span class="number">2</span>) + pow((distance_y[i] - distance_y[j]), <span class="number">2</span>)</span><br><span class="line">                temp_distance = pow(temp_distance, <span class="number">0.5</span>)</span><br><span class="line">                distance_graph[i][j] =float(int(temp_distance + <span class="number">0.5</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 按键响应程序</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bindEvents</span><span class="params">(self)</span>:</span></span><br><span class="line"> </span><br><span class="line">        self.root.bind(<span class="string">"q"</span>, self.quite)        <span class="comment"># 退出程序</span></span><br><span class="line">        self.root.bind(<span class="string">"n"</span>, self.new)          <span class="comment"># 初始化</span></span><br><span class="line">        self.root.bind(<span class="string">"e"</span>, self.search_path)  <span class="comment"># 开始搜索</span></span><br><span class="line">        self.root.bind(<span class="string">"s"</span>, self.stop)         <span class="comment"># 停止搜索</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 更改标题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">(self, s)</span>:</span></span><br><span class="line"> </span><br><span class="line">        self.root.title(s)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(self, evt = None)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 停止线程</span></span><br><span class="line">        self.__lock.acquire()</span><br><span class="line">        self.__running = <span class="keyword">False</span></span><br><span class="line">        self.__lock.release()</span><br><span class="line"> </span><br><span class="line">        self.clear()     <span class="comment"># 清除信息 </span></span><br><span class="line">        self.nodes = []  <span class="comment"># 节点坐标</span></span><br><span class="line">        self.nodes2 = [] <span class="comment"># 节点对象</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 初始化城市节点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(distance_x)):</span><br><span class="line">            <span class="comment"># 在画布上随机初始坐标</span></span><br><span class="line">            x = distance_x[i]</span><br><span class="line">            y = distance_y[i]</span><br><span class="line">            self.nodes.append((x, y))</span><br><span class="line">            <span class="comment"># 生成节点椭圆，半径为self.__r</span></span><br><span class="line">            node = self.canvas.create_oval(x - self.__r,</span><br><span class="line">                    y - self.__r, x + self.__r, y + self.__r,</span><br><span class="line">                    fill = <span class="string">"#ff0000"</span>,      <span class="comment"># 填充红色</span></span><br><span class="line">                    outline = <span class="string">"#000000"</span>,   <span class="comment"># 轮廓白色</span></span><br><span class="line">                    tags = <span class="string">"node"</span>,</span><br><span class="line">                )</span><br><span class="line">            self.nodes2.append(node)</span><br><span class="line">            <span class="comment"># 显示坐标</span></span><br><span class="line">            self.canvas.create_text(x,y<span class="number">-10</span>,              <span class="comment"># 使用create_text方法在坐标（302，77）处绘制文字</span></span><br><span class="line">                    text = <span class="string">'('</span>+str(x)+<span class="string">','</span>+str(y)+<span class="string">')'</span>,    <span class="comment"># 所绘制文字的内容</span></span><br><span class="line">                    fill = <span class="string">'black'</span>                       <span class="comment"># 所绘制文字的颜色为灰色</span></span><br><span class="line">                )</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 顺序连接城市</span></span><br><span class="line">        <span class="comment">#self.line(range(city_num))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始城市之间的距离和信息素</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(city_num):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(city_num):</span><br><span class="line">                pheromone_graph[i][j] = <span class="number">1.0</span></span><br><span class="line">                </span><br><span class="line">        self.ants = [Ant(ID) <span class="keyword">for</span> ID <span class="keyword">in</span> range(ant_num)]  <span class="comment"># 初始蚁群</span></span><br><span class="line">        self.best_ant = Ant(<span class="number">-1</span>)                          <span class="comment"># 初始最优解</span></span><br><span class="line">        self.best_ant.total_distance = <span class="number">1</span> &lt;&lt; <span class="number">31</span>           <span class="comment"># 初始最大距离</span></span><br><span class="line">        self.iter = <span class="number">1</span>                                    <span class="comment"># 初始化迭代次数 </span></span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 将节点按order顺序连线</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="comment"># 删除原线</span></span><br><span class="line">        self.canvas.delete(<span class="string">"line"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">line2</span><span class="params">(i1, i2)</span>:</span></span><br><span class="line">            p1, p2 = self.nodes[i1], self.nodes[i2]</span><br><span class="line">            self.canvas.create_line(p1, p2, fill = <span class="string">"#000000"</span>, tags = <span class="string">"line"</span>)</span><br><span class="line">            <span class="keyword">return</span> i2</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># order[-1]为初始值</span></span><br><span class="line">        reduce(line2, order, order[<span class="number">-1</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 清除画布</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.canvas.find_all():</span><br><span class="line">            self.canvas.delete(item)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 退出程序</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quite</span><span class="params">(self, evt)</span>:</span></span><br><span class="line">        self.__lock.acquire()</span><br><span class="line">        self.__running = <span class="keyword">False</span></span><br><span class="line">        self.__lock.release()</span><br><span class="line">        self.root.destroy()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">u"\n程序已退出..."</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 停止搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self, evt)</span>:</span></span><br><span class="line">        self.__lock.acquire()</span><br><span class="line">        self.__running = <span class="keyword">False</span></span><br><span class="line">        self.__lock.release()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 开始搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_path</span><span class="params">(self, evt = None)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 开启线程</span></span><br><span class="line">        self.__lock.acquire()</span><br><span class="line">        self.__running = <span class="keyword">True</span></span><br><span class="line">        self.__lock.release()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> self.__running:</span><br><span class="line">            <span class="comment"># 遍历每一只蚂蚁</span></span><br><span class="line">            <span class="keyword">for</span> ant <span class="keyword">in</span> self.ants:</span><br><span class="line">                <span class="comment"># 搜索一条路径</span></span><br><span class="line">                ant.search_path()</span><br><span class="line">                <span class="comment"># 与当前最优蚂蚁比较</span></span><br><span class="line">                <span class="keyword">if</span> ant.total_distance &lt; self.best_ant.total_distance:</span><br><span class="line">                    <span class="comment"># 更新最优解</span></span><br><span class="line">                    self.best_ant = copy.deepcopy(ant)</span><br><span class="line">            <span class="comment"># 更新信息素</span></span><br><span class="line">            self.__update_pheromone_gragh()</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">u"迭代次数："</span>,self.iter,<span class="string">u"最佳路径总距离："</span>,int(self.best_ant.total_distance))</span><br><span class="line">            <span class="comment"># 连线</span></span><br><span class="line">            self.line(self.best_ant.path)</span><br><span class="line">            <span class="comment"># 设置标题</span></span><br><span class="line">            self.title(<span class="string">"TSP蚁群算法(n:随机初始 e:开始搜索 s:停止搜索 q:退出程序) 迭代次数: %d"</span> % self.iter)</span><br><span class="line">            <span class="comment"># 更新画布</span></span><br><span class="line">            self.canvas.update()</span><br><span class="line">            self.iter += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 更新信息素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__update_pheromone_gragh</span><span class="params">(self)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 获取每只蚂蚁在其路径上留下的信息素</span></span><br><span class="line">        temp_pheromone = [[<span class="number">0.0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(city_num)] <span class="keyword">for</span> raw <span class="keyword">in</span> range(city_num)]</span><br><span class="line">        <span class="keyword">for</span> ant <span class="keyword">in</span> self.ants:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,city_num):</span><br><span class="line">                start, end = ant.path[i<span class="number">-1</span>], ant.path[i]</span><br><span class="line">                <span class="comment"># 在路径上的每两个相邻城市间留下信息素，与路径总距离反比</span></span><br><span class="line">                temp_pheromone[start][end] += Q / ant.total_distance</span><br><span class="line">                temp_pheromone[end][start] = temp_pheromone[start][end]</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 更新所有城市之间的信息素，旧信息素衰减加上新迭代信息素</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(city_num):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(city_num):</span><br><span class="line">                pheromone_graph[i][j] = pheromone_graph[i][j] * RHO + temp_pheromone[i][j]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 主循环</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mainloop</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root.mainloop()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#----------- 程序的入口处 -----------</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> </span><br><span class="line">    TSP(tkinter.Tk()).mainloop()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reference:<br><a href="https://zh.wikipedia.org/wiki/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/蚁群算法</a><br><a href="https://blog.csdn.net/fanxin_i/article/details/80380733" target="_blank" rel="noopener">https://blog.csdn.net/fanxin_i/article/details/80380733</a><br><a href="https://blog.csdn.net/qq_35109096/article/details/81126925" target="_blank" rel="noopener">https://blog.csdn.net/qq_35109096/article/details/81126925</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start
op1=>operation: 初始化
op15=>operation: 随机放置蚂蚁
op2=>operation: 对每只蚂蚁选择下个城市
op3=>operation: 更新信息素
op4=>operation: 输出最好路径
cond1=>condition: 还有城市可选？
cond2=>condition: 达到最大迭代次数？
ed=>end: End
st->op1->op15->op2->cond1(no)->op3->cond2(yes)->ed
cond1(yes)->op2
cond2(no)->op15</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
</blockquote>
]]></content>
      <categories>
        <category>启发式算法</category>
      </categories>
      <tags>
        <tag>启发式算法</tag>
        <tag>蚁群算法</tag>
        <tag>Ant Colony Optimization</tag>
        <tag>ACO</tag>
      </tags>
  </entry>
  <entry>
    <title>商业模式新生代读书笔记一</title>
    <url>/2019/03/06/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<h1 id="商业模式画布"><a href="#商业模式画布" class="headerlink" title="商业模式画布"></a>商业模式画布</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190306204257.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190306204613.png"></p>
<h2 id="商业模式定义："><a href="#商业模式定义：" class="headerlink" title="商业模式定义："></a>商业模式定义：</h2><p>商业模式描述了企业如何创造价值，传递价值和获取价值的基本原理</p>
<h2 id="苹果iPod-iTunes商业模式案例"><a href="#苹果iPod-iTunes商业模式案例" class="headerlink" title="苹果iPod/iTunes商业模式案例"></a>苹果iPod/iTunes商业模式案例</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190306204342.png"></p>
<h2 id="9个构造块详细说明"><a href="#9个构造块详细说明" class="headerlink" title="9个构造块详细说明"></a>9个构造块详细说明</h2><ol>
<li>CS：客户细分 customer segments</li>
<li>VP：价值主张 value propositions</li>
<li>CH：渠道通路 channel</li>
<li>CR：客户关系 customer relationships</li>
<li>R$: 收入来源 revenue streams</li>
<li>KR：核心资源 key resources</li>
<li>KA：关键业务 key activities</li>
<li>KP：重要合作 key partnerships</li>
<li>C$：成本结构 cost structure</li>
</ol>
<p>这9个商业模式构造块组成了构建商业模式边界工具的基础，这个工具我们称之为商业模式画布（Business Model Canvas）</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190306204210.png"></p>
<h3 id="客户细分"><a href="#客户细分" class="headerlink" title="客户细分"></a>客户细分</h3><p>划分依据：</p>
<ul>
<li>满足需求的产品服务</li>
<li>分销渠道</li>
<li>类型关系</li>
<li>盈利能力</li>
<li>客户的提供物</li>
</ul>
<h3 id="价值主张"><a href="#价值主张" class="headerlink" title="价值主张"></a>价值主张</h3><p>例子：新颖、性能、定制化、成分削减、风险抑制、可达性等</p>
<h3 id="渠道通路"><a href="#渠道通路" class="headerlink" title="渠道通路"></a>渠道通路</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190306203033.png"></p>
<h3 id="客户关系"><a href="#客户关系" class="headerlink" title="客户关系"></a>客户关系</h3><p>客户关系被以下几个动机所驱动：</p>
<ul>
<li>客户获取</li>
<li>客户维系</li>
<li>提升销售额（追加销售）</li>
</ul>
<p>例子：个人助理、自助服务、社区、共同创作等</p>
<h3 id="收入来源"><a href="#收入来源" class="headerlink" title="收入来源"></a>收入来源</h3><p>一个商业模式可以包含两种不同类型的收入来源：</p>
<ol>
<li>通过客户一次性支付获得的交易收入</li>
<li>经常性收入来自客户为获得价值主张与售后服务而持续支付的费用</li>
</ol>
<p>获取收入的方式：资产销售、使用收费、订阅收费、租赁收费、授权收费等</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190306203505.png"></p>
<h3 id="核心资源"><a href="#核心资源" class="headerlink" title="核心资源"></a>核心资源</h3><p>核心资源用来描绘让商业模式有效运转所必须的最重要因素</p>
<p>核心资源分类：</p>
<ul>
<li>实体资产</li>
<li>知识资产</li>
<li>人力资源</li>
<li>金融资源</li>
</ul>
<h3 id="关键业务"><a href="#关键业务" class="headerlink" title="关键业务"></a>关键业务</h3><p>关键业务分类：</p>
<ul>
<li>制造产品</li>
<li>问题解决</li>
<li>平台/网络</li>
</ul>
<h3 id="重要合作"><a href="#重要合作" class="headerlink" title="重要合作"></a>重要合作</h3><p>合作关系可以分为以下四类：</p>
<ol>
<li>在非竞争者之间的战略联盟关系</li>
<li>竟合：在竞争者之间的战略合作关系</li>
<li>为开发新业务而构建的合资关系</li>
<li>为确保可靠供应的购买方——供应商关系</li>
</ol>
<p>以下三种动机有助于创建合作关系：</p>
<ol>
<li>商业模式的优化和规模经济的运用</li>
<li>风险和不确定性的降低</li>
<li>特定资源和业务的获取</li>
</ol>
<h3 id="成本结构"><a href="#成本结构" class="headerlink" title="成本结构"></a>成本结构</h3><p>两种商业模式成本结构类型：</p>
<ol>
<li>成本驱动</li>
<li>价值驱动</li>
</ol>
<p>成本结构有以下特点：</p>
<ul>
<li>固定成本</li>
<li>可变成本</li>
<li>规模经济</li>
<li>范围经济</li>
</ul>
]]></content>
      <tags>
        <tag>商业模式</tag>
        <tag>商业</tag>
        <tag>模式</tag>
        <tag>读书笔记</tag>
        <tag>商业画布</tag>
      </tags>
  </entry>
  <entry>
    <title>商业模式新生代读书笔记三</title>
    <url>/2019/03/12/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
    <content><![CDATA[<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><blockquote>
<p>商业人士不仅需要更好的了解设计，他们更需要把自己变成设计师。</p>
<p>————Roger Martin</p>
</blockquote>
<ul>
<li>客户洞察</li>
<li>创意构思</li>
<li>可视思考</li>
<li>原型创作</li>
<li>故事讲述</li>
<li>情景推测</li>
</ul>
<h2 id="客户洞察"><a href="#客户洞察" class="headerlink" title="客户洞察"></a>客户洞察</h2><h3 id="移情图"><a href="#移情图" class="headerlink" title="移情图"></a>移情图</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312095617.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312095837.png"></p>
<h2 id="创意构思"><a href="#创意构思" class="headerlink" title="创意构思"></a>创意构思</h2><h3 id="4类不同集中点的商业模式创新："><a href="#4类不同集中点的商业模式创新：" class="headerlink" title="4类不同集中点的商业模式创新："></a>4类不同集中点的商业模式创新：</h3><ul>
<li>资源驱动</li>
<li>产品/服务驱动</li>
<li>客户驱动</li>
<li>财务驱动</li>
<li>多中心驱动（未纳入四大类之中，是上述四种的混合，更多的表现为业务的重构）</li>
</ul>
<h3 id="创意构思过程"><a href="#创意构思过程" class="headerlink" title="创意构思过程"></a>创意构思过程</h3><ul>
<li>团队构成：团队是否有足够的多样性，来创造新的商业模式构想</li>
<li>全情投入/头脑风暴：在创新之前，需要研究哪些要素</li>
<li>扩展：针对每个构造块，能够想到哪些创新</li>
<li>条件筛选：什么事商业模式创新的最重要准则</li>
<li>原型创作：每个入围创意的完整商业模式应该是什么样子</li>
</ul>
<h3 id="头脑风暴的规则"><a href="#头脑风暴的规则" class="headerlink" title="头脑风暴的规则"></a>头脑风暴的规则</h3><ol>
<li>保持聚焦：从问题的精确表述开始，不能跑题太远</li>
<li>执行规则：暂缓判决/一次一议/争取数量/视觉化/鼓励疯狂创意</li>
<li>可视思考：把创意写下来，在每个人都能看得到的平面上描绘出来</li>
<li>做好准备：头脑风暴前要有充分的了解与思考</li>
</ol>
<h2 id="可视思考"><a href="#可视思考" class="headerlink" title="可视思考"></a>可视思考</h2><p>将模式描绘出来，这个模式就转换成一个持久的事物，也是一个可以随时返回讨论的概念原点。</p>
<h3 id="视觉化的故事讲述活动"><a href="#视觉化的故事讲述活动" class="headerlink" title="视觉化的故事讲述活动"></a>视觉化的故事讲述活动</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312103823.png"></p>
<h2 id="原型制作"><a href="#原型制作" class="headerlink" title="原型制作"></a>原型制作</h2><p>原型制作可以让概念变得更加形象具体，并能促进新创意的探索。</p>
<h3 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h3><blockquote>
<p>如果过快地专注于一个创意，你就会迷上它。如果急于精雕细琢某个创意，你就会变得依附于它，很难保持不断的探索、不断寻找更好的创意。对于那些不成熟的早期模型尤其需要审慎小心。</p>
<p>Jin Glymph，盖里公司合伙人</p>
</blockquote>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312104405.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312104445.png"></p>
<h2 id="故事讲述"><a href="#故事讲述" class="headerlink" title="故事讲述"></a>故事讲述</h2><h3 id="为什么要讲故事"><a href="#为什么要讲故事" class="headerlink" title="为什么要讲故事"></a>为什么要讲故事</h3><ul>
<li>让新创意不再抽象<ul>
<li>让商业模式不再抽象<ul>
<li>公司视角</li>
<li>客户视角</li>
</ul>
</li>
<li>让未来变得不再抽象<ul>
<li>激发创意</li>
<li>证明变革</li>
</ul>
</li>
</ul>
</li>
<li>要讲的清晰易懂</li>
<li>调动员工的积极性</li>
</ul>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>技巧有很多，要充分了解谁是你的听众，你会出席什么场合，再来选择一种匹配的技巧。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312104836.png"></p>
<h2 id="情景推测"><a href="#情景推测" class="headerlink" title="情景推测"></a>情景推测</h2><p>两种情景推测：</p>
<ol>
<li>描述不同的客户背景：客户事如何使用产品和服务的，什么类型的客户在使用它们，客户的顾虑、愿望和目的分别是什么</li>
<li>描述新商业模式可能会参与竞争的未来场景：这里的目的不是要去预测未来，而是要具体形象地草绘出未来的各种可能情况。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312105228.png"></p>
<h3 id="未来的情景推测和新型商业模式"><a href="#未来的情景推测和新型商业模式" class="headerlink" title="未来的情景推测和新型商业模式"></a>未来的情景推测和新型商业模式</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190312105336.png"></p>
]]></content>
      <tags>
        <tag>商业模式</tag>
        <tag>商业</tag>
        <tag>模式</tag>
        <tag>读书笔记</tag>
        <tag>商业模式设计</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是微服务架构（Microservice Architecture）</title>
    <url>/2019/08/07/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88Microservice-Architecture%EF%BC%89/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>假设你在开发一个服务端应用。该应用必须支持各种各样的客户端，包括桌面浏览器、手机浏览器和本地手机应用。应用可能也需要公开部分API供第三方使用，还可能与其他应用通过web service或消息代理(message broker)相集成。应用执行业务逻辑来处理请求(HTTP请求或者消息)；访问数据库；与其他系统交换消息；并返回HTML/JSON/XML类型的响应。</p>
<p>应用或是多层架构或是六角架构，并且包含多种类型的组件：</p>
<ul>
<li>表示组件(Presentation components) - 响应处理HTTP请求，并返回HTML或JSON/XML(对于web service API)</li>
<li>业务逻辑(Business logic) - 应用的业务逻辑</li>
<li>数据库访问逻辑(Database access logic) - 数据访问对象用于访问数据库</li>
<li>应用集成逻辑(Application integration logic) - 消息层，如基于Spring的集成</li>
</ul>
<p>这些逻辑组件分别响应应用中不同的功能模块。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>应用的部署架构是什么？</p>
<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><ul>
<li>该应用由一个开发者团队在维护</li>
<li>团队新成员必须快速上手</li>
<li>应用应该易于理解和修改</li>
<li>你想对应用进行持续集成</li>
<li>你必须在多台机器上部署多份应用的拷贝，以满足可伸缩性和可用性的要求</li>
<li>你想使用新技术(框架、编程语言等)</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>通过采用伸缩立方(Scale Cube)(特别是y轴方向上的伸缩)来架构应用，将应用按功能分解为一组相互协作的服务的集合。每个服务实现一组有限并相关的功能。比如，一个应用可能包含订单管理服务，客户管理服务等。</p>
<p>服务间通过HTTP/REST等同步协议或AMQP等异步协议进行通讯。</p>
<p>服务独立开发和部署。</p>
<p>每个服务为了与其他服务解耦，都有自己的数据库。必要时，数据库间的一致性通过数据库复制机制或应用级事件来维护。</p>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>我们假设你在构建一个电子商务应用，应用从客户接收订单，验证库存和可用额度，并派送订单。应用包含多个组件，包括StoreFrontUI，用来实现用户接口，以及一些后台服务，用于检测信用额度、维护库存和派送订单。</p>
<p>应用作为一组服务部署。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190807223130.png"></p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>这个方案有一些好处：</p>
<ul>
<li>每个微服务都相对较小<ul>
<li>易于开发者理解</li>
<li>IDE反应更快，开发者更高效</li>
<li>web容器启动更快，开发者更高效，并提升了部署速度</li>
</ul>
</li>
<li>每个服务都可以独立部署 - 易于频繁部署新版本的服务</li>
<li>易于伸缩开发组织结构。你可以对多个团队的开发工作进行组织。每个(双披萨[1])团队负责单个服务。每个团队可以独立于其他团队开发、部署和伸缩服务。</li>
<li>提升故障隔离(fault isolation)。比如，如果一个服务存在内存泄露，那么只有该服务受影响，其他服务仍然可以处理请求。相比之下，一体架构的一个出错组件可以拖垮整个系统。</li>
<li>每个服务可以单独开发和部署</li>
<li>消除了任何对技术栈(technologh stack)的长期投入(long-term commitments)</li>
</ul>
<p>这个方案也有一些缺点：</p>
<ul>
<li>开发者要处理分布式系统的额外复杂度。<ul>
<li>开发者工具/IDE是面向构建一体应用的，并没有显示提供对开发分布式应用的支持</li>
<li>测试更加困难</li>
<li>开发者需要实现服务间通信机制</li>
<li>不使用分布式事务实现跨服务的用例更加困难</li>
<li>实现跨服务的用例需要团队间的细致协作</li>
</ul>
</li>
<li>生产环境的部署复杂度。对于包含多种不同服务类型的系统，部署和管理的操作复杂度仍然存在。</li>
<li>内存消耗增加。微服务架构使用NxM个服务实例来替代N个一体应用实例。如果每个服务运行在自己独立的JVM(或类似)上，通常有必要对实例进行隔离，对这么多运行的JVN，就有M倍的开销。另外，如果每个服务运行在独立的VM(如EC2实例)，如Netflix，开销会更高。</li>
</ul>
<h1 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h1><h2 id="什么时候使用微服务架构"><a href="#什么时候使用微服务架构" class="headerlink" title="什么时候使用微服务架构"></a>什么时候使用微服务架构</h2><p>使用该方法的一个挑战就是决定何时使用才合理。在开发应用的初期，你通常不会遇到这种方法试图解决的问题。而且，使用这个精细、分布式的架构将会拖慢开发进度。对初创公司，这是个严重问题，因为它们的最大挑战通常是如何快速发展业务模型及相关应用。使用Y轴切分使快速迭代更加困难。但是之后，当挑战变成如何伸缩，你需要使用功能分解将一体应用切分为一组服务时，混乱的依赖关系可能使之变得困难。</p>
<h1 id="如何拆分应用到服务"><a href="#如何拆分应用到服务" class="headerlink" title="如何拆分应用到服务"></a>如何拆分应用到服务</h1><p>另一个挑战是如何将系统分隔为微服务。这是个技术活，但有些策略可能有帮助。</p>
<ul>
<li>按业务能力分解，定义与业务能力对应的服务。</li>
<li>按领域驱动设计的子域分解。</li>
<li>按动词或用例分解并定义负责特定操作的服务。例如，负责装运完整订单的运输服务。</li>
<li>通过定义负责对给定类型的实体/资源执行所有操作的服务，按名词或资源进行分解。例如，负责管理用户帐户的帐户服务。</li>
</ul>
<p>理论上，每个服务应该只承担很小的职责。Bob Martin(大叔)讲过使用单一职责原则(SRP)来设计类。SRP定义类的职责作为变化的原因，而且类应该只有一个变化的原因。使用SRP来设计服务也是合理的。</p>
<p>另一个有助于服务设计的类比是Unix实用工具的设计方法。Unix提供大量的实用工具如grep、cat和find。每个工具只做一件事，通常做得非常好，并且可以跟其他工具使用shell脚本组合来执行复杂任务。</p>
<h2 id="如何保持数据一致性"><a href="#如何保持数据一致性" class="headerlink" title="如何保持数据一致性"></a>如何保持数据一致性</h2><p>为了确保松耦合，每个服务都有自己的数据库。维护服务之间的数据一致性是一个挑战，因为对于许多应用程序来说，两阶段提交/分布式事务不是一个选项。应用程序必须使用SAGA模式。服务在其数据更改时发布事件。其他服务使用该事件并更新其数据。有几种可靠更新数据和发布事件的方法，包括事件源和事务日志跟踪。</p>
<h2 id="如何实现查询"><a href="#如何实现查询" class="headerlink" title="如何实现查询"></a>如何实现查询</h2><p>另一个挑战是实现需要检索多个服务拥有的数据的查询。</p>
<p>API组合和命令查询责任分离（CQR）模式。</p>
<h1 id="相关模式"><a href="#相关模式" class="headerlink" title="相关模式"></a>相关模式</h1><p>有许多与微服务模式相关的模式。单片架构是微服务架构的替代方案。其他模式解决了应用微服务体系结构时会遇到的问题。如API网关模式定义了客户端如何访问服务。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190807224059.png"></p>
<ul>
<li>分解模式<ul>
<li>按业务能力分解</li>
<li>按子域分解</li>
</ul>
</li>
<li>每个服务模式的数据库描述了每个服务如何拥有自己的数据库，以确保松耦合。</li>
<li>API网关模式定义了客户机如何访问微服务体系结构中的服务。</li>
<li>客户端发现和服务器端发现模式用于将客户端请求路由到微服务体系结构中的可用服务实例。</li>
<li>消息传递和远程过程调用模式是两种不同的服务通信方式。</li>
<li>每个主机的单个服务和每个主机的多个服务模式是两种不同的部署策略。</li>
<li>交叉关注模式：微服务机箱模式和外部化配置</li>
<li>测试模式：服务组件测试和服务集成契约测试</li>
<li>断路器</li>
<li>访问令牌</li>
<li>可观测性模式：<ul>
<li>日志聚合</li>
<li>应用程序度量</li>
<li>审核日志记录</li>
<li>分布式跟踪</li>
<li>异常跟踪</li>
<li>健康检查API</li>
<li>记录部署和更改</li>
</ul>
</li>
<li>用户界面模式：<ul>
<li>服务器端页面片段组合</li>
<li>客户端UI组成</li>
</ul>
</li>
</ul>
<h1 id="著名案例"><a href="#著名案例" class="headerlink" title="著名案例"></a>著名案例</h1><p>大多数大规模的web站点，如 Netflix, Amazon和eBay都从一体架构转变为微服务架构。</p>
<p>Netflix是个非常受欢迎的视频流服务提供商，占有多达30%的互联网流量，它有着大规模、基于服务的架构。他们每天处理800+不同类型设备超过10亿次视频流API的请求。每个API可以展开成平均6次对后端服务的调用。</p>
<p>Amazon.com原有个两层架构。为了伸缩，他们迁移到一个包含上百个后端服务的基于服务的架构。调用这些服务的应用中包括实现Amazon.com网站和web service API的应用。Amazon.com网站应用调用100-150个服务来获取数据用于构建网页。</p>
<p>拍卖网站ebay.com也从一体架构发展成基于服务的架构。应用层包含多个独立的应用。每个应用实现特定功能模块(如购买或销售)的业务逻辑。每个应用使用X轴的分隔，有些应用如搜索，使用Z轴分隔。Ebay.com也对数据库层采用X,Y,Z的组合伸缩方式。</p>
<blockquote>
<p>译自：<br><a href="https://microservices.io/patterns/microservices.html" target="_blank" rel="noopener">https://microservices.io/patterns/microservices.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件架构和服务架构</category>
      </categories>
      <tags>
        <tag>软件架构</tag>
        <tag>服务架构</tag>
        <tag>Software Architecture</tag>
        <tag>Service Architecture</tag>
        <tag>微服务架构</tag>
        <tag>Microservice Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>商业模式新生代读书笔记二</title>
    <url>/2019/03/11/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="商业模式式样"><a href="#商业模式式样" class="headerlink" title="商业模式式样"></a>商业模式式样</h1><blockquote>
<p>建筑中的式样就是将原型和原形的再现抽象为建筑设计的概念</p>
<p>——Christopher Alexander</p>
</blockquote>
<p>商业模式式样</p>
<ul>
<li>非绑定式商业模式</li>
<li>长尾式商业模式</li>
<li>多边平台式商业模式</li>
<li>免费式商业模式</li>
<li>开放式商业模式</li>
</ul>
<h2 id="非绑定式商业模式"><a href="#非绑定式商业模式" class="headerlink" title="非绑定式商业模式"></a>非绑定式商业模式</h2><h3 id="三种基础业务："><a href="#三种基础业务：" class="headerlink" title="三种基础业务："></a>三种基础业务：</h3><ol>
<li>客户关系型业务</li>
<li>产品创新型业务</li>
<li>基础设施型业务</li>
</ol>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190307135512.png"></p>
<h2 id="长尾式商业模式"><a href="#长尾式商业模式" class="headerlink" title="长尾式商业模式"></a>长尾式商业模式</h2><p>核心：多样少量</p>
<h3 id="式样"><a href="#式样" class="headerlink" title="式样"></a>式样</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311145707.png"></p>
<h2 id="多边平台式商业模式"><a href="#多边平台式商业模式" class="headerlink" title="多边平台式商业模式"></a>多边平台式商业模式</h2><p>多边平台将两个或者更多有明显区别但有互相依赖的客户群体集合在一起。</p>
<h3 id="式样-1"><a href="#式样-1" class="headerlink" title="式样"></a>式样</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311150008.png"></p>
<h2 id="免费式商业模式"><a href="#免费式商业模式" class="headerlink" title="免费式商业模式"></a>免费式商业模式</h2><ul>
<li>至少有一个庞大的用户细分群体可以享受持续的免费服务</li>
<li>免费服务可以来自多种模式</li>
</ul>
<p>通过该商业模式的其他部分或其他客户细分群体，给分服务用户细分群体提供财务支持。</p>
<h3 id="免费广告：多边平台的式样"><a href="#免费广告：多边平台的式样" class="headerlink" title="免费广告：多边平台的式样"></a>免费广告：多边平台的式样</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311150230.png"></p>
<h3 id="免费式样"><a href="#免费式样" class="headerlink" title="免费式样"></a>免费式样</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311150419.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311150511.png"></p>
<h3 id="诱钓式样"><a href="#诱钓式样" class="headerlink" title="诱钓式样"></a>诱钓式样</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311150559.png"></p>
<h2 id="开放式商业模式"><a href="#开放式商业模式" class="headerlink" title="开放式商业模式"></a>开放式商业模式</h2><p>开放式商业模式可以用哪些通过与外部伙伴系统合作，来创造和捕捉价值的企业。</p>
<ul>
<li>由外到内：将外部创意引入到公司内部</li>
<li>由内到外：将企业内部闲置的创意和资产提供给外部伙伴</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311151203.png"></p>
<h3 id="由外到内的式样"><a href="#由外到内的式样" class="headerlink" title="由外到内的式样"></a>由外到内的式样</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311151251.png"></p>
<h3 id="由内到外的式样"><a href="#由内到外的式样" class="headerlink" title="由内到外的式样"></a>由内到外的式样</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311151324.png"></p>
<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><center class="half">
    <img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311151454.png" width="50%" style="display:inline"><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190311151630.png" width="50%" style="display:inline">
</center>]]></content>
      <tags>
        <tag>商业模式</tag>
        <tag>商业</tag>
        <tag>模式</tag>
        <tag>读书笔记</tag>
        <tag>商业模式式样</tag>
      </tags>
  </entry>
  <entry>
    <title>多目标优化简述</title>
    <url>/2019/11/28/%E5%A4%9A%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<p>多目标优化是多准则决策的一个领域，它是涉及多个目标函数同时优化的数学问题。多目标优化已经应用于许多科学领域，包括工程、经济和物流，其中需要在两个或多个相互冲突的目标之间进行权衡的情况下作出最优决策。分别涉及两个和三个目标的多目标优化问题的例子有：在购买汽车时降低成本，同时使舒适性最大化；在使车辆的燃料消耗和污染物排放最小化的同时将性能最大化。在实际问题中，甚至可以有三多个目标。</p>
<p>对于非平凡多目标优化问题，不存在同时优化每个目标的单个解决方案。在这种情况下，目标函数被说成是冲突的，并且存在一个（可能无限）数量的帕累托最优解。如果目标函数在值上不能改进而不降低其他一些目标值，则解决方案称为非支配、Pareto最优、Pareto有效或非劣解。如果没有额外的主观偏好信息，所有Pareto最优解都被认为是同样好的（因为向量不能完全排序）。研究人员从不同的角度研究多目标优化问题，从而在设置和解决多目标优化问题时存在不同的求解哲学和目标。目标可以是找到帕累托最优解的代表性集合，and/or量化满足不同目标的折衷，and/or找到满足人类决策者decision maker(DM)的主观偏好的单一解决方案。</p>
<h1 id="形式化定义"><a href="#形式化定义" class="headerlink" title="形式化定义"></a>形式化定义</h1><p>$$<br>\begin{array}{cl}{\min / \max } &amp; {f_{m}(x), \quad m=1,2, \ldots, M} \\ {\text { subject to }} &amp; {g_{j}(x) \geq 0, \quad j=1,2, \ldots, J} \\ {} &amp; {h_{k}(x)=0, \quad k=1,2, \ldots, K} \\ {} &amp; {x_{i}^{(Lower)} \leq x_{i} \leq x_{i}^{(Upper)}, \quad i=1,2, \ldots, n} \end{array}<br>$$</p>
<h1 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h1><table>
<thead>
<tr>
<th>年份</th>
<th>事件</th>
<th>相关论文</th>
</tr>
</thead>
<tbody><tr>
<td>1906</td>
<td>Pareto提出核心思想</td>
<td>Pareto, V. (1906). Manuale di economia politica (Vol. 13). Societa Editrice.</td>
</tr>
<tr>
<td>1979</td>
<td>Stadler, W. 对帕累托最优进一步回顾</td>
<td>Stadler, W. (1979). A survey of multicriteria optimization or the vector maximum problem, part I: 1776–1960. Journal of Optimization Theory and Applications, 29(1), 1-52.</td>
</tr>
<tr>
<td>2008</td>
<td>Miettinen, K.提出一种混合方法解决多目标问题</td>
<td>Miettinen, K., Ruiz, F., &amp; Wierzbicki, A. P. (2008). Introduction to multiobjective optimization: interactive approaches. In Multiobjective Optimization (pp. 27-57). Springer, Berlin, Heidelberg.</td>
</tr>
<tr>
<td>2014</td>
<td>Deb, K.对多目标优化进行回顾</td>
<td>Deb, K. (2014). Multi-objective optimization. In Search methodologies (pp. 403-449). Springer, Boston, MA.</td>
</tr>
<tr>
<td>2018</td>
<td>Sener, O., &amp; Koltun, V.提出多任务学习来作为多目标优化的策略</td>
<td>Sener, O., &amp; Koltun, V. (2018). Multi-task learning as multi-objective optimization. In Advances in Neural Information Processing Systems (pp. 524-535).</td>
</tr>
</tbody></table>
<p>多目标优化算法归结起来有传统优化算法和智能优化算法两大类。</p>
<ol>
<li>传统优化算法包括加权法、约束法和线性规划法等，实质上就是将多目标函数转化为单目标函数，通过采用单目标优化的方法达到对多目标函数的求解。 </li>
<li>智能优化算法包括进化算法（Evolutionary Algorithm, 简称EA）、粒子群算法（Particle Swarm Optimization, PSO）等。</li>
</ol>
<p>从九十年代初开始，进化算法系列算法被统一，如遗传算法等。</p>
<h1 id="多目标优化问题的解"><a href="#多目标优化问题的解" class="headerlink" title="多目标优化问题的解"></a>多目标优化问题的解</h1><p>在单目标优化问题中，通常最优解只有一个，而且能用比较简单和常用的数学方法求出其最优解。然而在多目标优化问题中，各个目标之间相互制约，可能使得一个目标性能的改善往往是以损失其它目标性能为代价，不可能存在一个使所有目标性能都达到最优的解，所以对于多目标优化问题，其解通常是一个非劣解的集合——Pareto解集。</p>
<blockquote>
<p>帕累托最优（Pareto Optimal）：帕雷托最优是指资源分配的一种理想状态。给定固有的一群人和可分配的资源，如果从一种分配状态到另一种状态的变化中，在没有使任何人境况变坏的前提下，使得至少一个人变得更好，这就是帕雷托改善。帕雷托最优的状态就是不可能再有更多的帕雷托改善的状态；换句话说，不可能在不使任何其他人受损的情况下再改善某些人的境况。帕累托最优解集的边界（boundary）被称为帕累托最优前沿面（Pareto-optimal front）。</p>
</blockquote>
<p>在存在多个Pareto最优解的情况下，如果没有关于问题的更多的信息，那么很难选择哪个解更可取，因此所有的Pareto最优解都可以被认为是同等重要的。由此可知，对于多目标优化问题，最重要的任务是找到尽可能多的关于该优化问题的Pareto最优解。因而，在多目标优化中主要完成以下两个任务：</p>
<ol>
<li>找到一组尽可能接近Pareto最优域的解。</li>
<li>找到一组尽可能不同的解。</li>
</ol>
<p>第一个任务是在任何优化工作中都必须的做到的，收敛不到接近真正Pareto最优解集的解是不可取的，只有当一组解收敛到接近真正Pareto最优解，才能确保该组解近似最优的这一特性。</p>
<h1 id="几种常用的多目标优化问题解决方法"><a href="#几种常用的多目标优化问题解决方法" class="headerlink" title="几种常用的多目标优化问题解决方法"></a>几种常用的多目标优化问题解决方法</h1><h2 id="Weighted-Sum-Method"><a href="#Weighted-Sum-Method" class="headerlink" title="Weighted Sum Method"></a>Weighted Sum Method</h2><p>线性加权法，其中权重代表了每个目标函数的重要程度。</p>
<p>$$<br>\begin{array}{rl}{\min } &amp; {F(x)=\sum_{m=1}^{M} w_{m} f_{m}(x)} \\ {\text { subject to }} &amp; {g_{j}(x) \geq 0, \quad j=1,2, \ldots, J} \\ {} &amp; {h_{k}(x)=0, \quad k=1,2, \ldots, K} \\ {} &amp; {x_{i}^{(Lower)} \leq x_{i} \leq x_{i}^{(Upper)}, \quad i=1,2, \ldots, n}\end{array}<br>$$</p>
<p>优点：简单</p>
<p>缺点：很难设定一个权重向量能够去获得帕累托最优解；在一些非凸情况不能够保证获得帕累托最优解</p>
<h2 id="varepsilon-constraint-method"><a href="#varepsilon-constraint-method" class="headerlink" title="$\varepsilon$ -constraint method"></a>$\varepsilon$ -constraint method</h2><p>只保留一个目标函数，其他的目标函数被设定的值约束。</p>
<p>$$<br>\begin{array}{cl}{\min } &amp; {f_{\mu}(x)} \\ {\text {subject to }} &amp; {f_{m}(x) \leq \epsilon_{m}, \quad m=1,2, \ldots, M \text { and } m \neq \mu} \\ {} &amp; {g_{j}(x) \geq 0, \quad j=1,2, \ldots, J} \\ {} &amp; {h_{k}(x)=0,} \quad {k=1,2, \ldots, K} \\ {} &amp; {x_{i}^{(Lower)} \leq x_{i} \leq x_{i}^{(Upper)},} \quad {i=1,2, \ldots, n}\end{array}<br>$$</p>
<p>优点：能够应用到凸函数和非凸函数场景下</p>
<p>缺点：函数需要精心选择；需要在独立目标函数的最小值或最大值之内</p>
<h2 id="Weighted-Metric-Method"><a href="#Weighted-Metric-Method" class="headerlink" title="Weighted Metric Method"></a>Weighted Metric Method</h2><p>$$<br>\begin{array}{cl}{\min } &amp; {l_{p}(x)=\left(\sum_{m=1}^{M} w_{m}\left|f_{m}(x)-z_{m}^{*}\right|\right)^{1 / p}} \\ {\text { subject to }} &amp; {g_{j}(x) \geq 0, \quad j=1,2, \ldots, J} \\ {} &amp; {h_{k}(x)=0, \quad k=1,2, \ldots, K} \\ {} &amp; {x_{i}^{(Lower)} \leq x_{i} \leq x_{i}^{(Upper)}, \quad i=1,2, \ldots, n}\end{array}<br>$$</p>
<p>优点：weighted Techebycheff metirc能够保证获得所有帕累托最优解</p>
<p>缺点：需要有每个函数最大值和最小值的先验知识；需要每个目标函数的 $z^{*}$ 能够独立被找到；对于较小的p值，不一定保证所有能够获得所有帕累托最优解；随着p增加，问题会变得不可求导</p>
<h2 id="Multi-Objective-Genetic-Algorithms"><a href="#Multi-Objective-Genetic-Algorithms" class="headerlink" title="Multi-Objective Genetic Algorithms"></a>Multi-Objective Genetic Algorithms</h2><p>基于遗传算法的多目标优化就是利用遗传算法的原理来搜索帕累托最优前沿面。</p>
<p>遗传算法相比与传统算法的优点是能够得到一个最优解集，而不是单单一个最优解，这样给我们更多的选择。但计算复杂度可能稍高，而且里面涉及的一些函数需要精心设计。</p>
<p>详见：<a href="https://imonce.github.io/2019/11/07/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/">https://imonce.github.io/2019/11/07/启发式算法学习（三）：遗传算法/</a></p>
<h1 id="发展分析"><a href="#发展分析" class="headerlink" title="发展分析"></a>发展分析</h1><p>多目标优化算法相对成熟，在不同的问题使用不同的优化算法。NSGA-II, SPEA 或者 MOPSO都是可选项，而到底选择哪一个方法，还需要根据特定的情景选择。</p>
<p>尽管多目标优化算法应用于动态的制造系统，dynamic manufacturing systems，但是制造系统和很复杂的，并且是动态的，因此算法还是有一定的缺陷性。</p>
<p>未来发展方向：</p>
<ol>
<li><p>因为多种多目标方法已经被提出，混合方法 hybrid method可以被进一步发展。</p>
</li>
<li><p>现在的动态制造系统中的多目标优化算法需要动态调度的能力</p>
</li>
</ol>
<blockquote>
<p>Reference:<br><a href="https://www.jiqizhixin.com/graph/technologies/cf8932be-519a-4fd9-84f9-c6ffa997a554" target="_blank" rel="noopener">https://www.jiqizhixin.com/graph/technologies/cf8932be-519a-4fd9-84f9-c6ffa997a554</a><br><a href="https://blog.csdn.net/paulfeng20171114/article/details/82454310" target="_blank" rel="noopener">https://blog.csdn.net/paulfeng20171114/article/details/82454310</a><br><a href="https://hpzhao.github.io/2018/09/17/%E5%A4%9A%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">https://hpzhao.github.io/2018/09/17/多目标优化四种方法/</a><br><a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E7%B4%AF%E6%89%98%E6%9C%80%E4%BC%98" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/帕累托最优</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>多目标优化</tag>
        <tag>Multi-Objective Optimization</tag>
        <tag>MOO</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地回复审稿意见</title>
    <url>/2020/07/17/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E5%A4%8D%E5%AE%A1%E7%A8%BF%E6%84%8F%E8%A7%81/</url>
    <content><![CDATA[<h1 id="Something-You-Shound-Not-Do"><a href="#Something-You-Shound-Not-Do" class="headerlink" title="Something You Shound Not Do"></a>Something You Shound Not Do</h1><ol>
<li>删减、归纳审稿人的意见————有逃避问题的嫌疑</li>
<li>在response中疯狂解释原文内容没问题，不需要修改————存在没有吸取审稿意见的嫌疑</li>
<li>长篇大论、语无伦次的解释————这个问题很大，而且你脑子不清楚</li>
<li>因为不需要回复而隐藏定性评价————其他审稿人发现了会认为：隐藏这部分是因为这些文字对你不利（比如建议reject等）</li>
</ol>
<h1 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h1><ol>
<li>把意见分条，逐条回答</li>
<li>回复时指出修改内容对应文中的章节和位置</li>
<li>针对大部分问题，类似创新性不强、相关性不够、某一部分没讲清楚等等，都可以用以下三段式<ol>
<li>谢谢你的意见</li>
<li>是我们没写清楚</li>
<li>我们已经加强了相关部分，把口口口口强调出来。本文的口口口口就在于…</li>
</ol>
</li>
<li>审稿人认为你引文不够，分两种情况<ol>
<li>你引文确实不够————那就老老实实加</li>
<li>审稿人定向推荐了几篇论文————那就老老实实帮他增加引用量吧</li>
</ol>
</li>
<li>审稿人要求补实验<ol>
<li>补了，且结果有用，加进去</li>
<li>补了，且结果没用，说明情况并讨论原因</li>
<li>补不了，但有必要，根据具体原因找替代方案</li>
<li>补不了，但没必要，还是要找替代方案，不能让审稿人觉得你怂了</li>
</ol>
</li>
</ol>
<blockquote>
<p>reference:<br><a href="http://blog.sciencenet.cn/blog-71964-1181769.html" target="_blank" rel="noopener">http://blog.sciencenet.cn/blog-71964-1181769.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Paper</category>
      </categories>
      <tags>
        <tag>Paper</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速写出优质论文</title>
    <url>/2019/12/28/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%BC%98%E8%B4%A8%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<p>写给自己：</p>
<ol>
<li>不管别人有没有催，不管有没有投稿日，都要给自己一个deadline</li>
<li>想法不成熟也没关系，方法有瑕疵也没关系，总之先开始写，把想到的东西都写下来</li>
<li>整理出第一版，就算再烂，也比没有强</li>
<li>拿着写好内容，再去找各路大神讨论，不断优化，事半功倍</li>
</ol>
]]></content>
      <categories>
        <category>Paper</category>
      </categories>
      <tags>
        <tag>Paper</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写年度报告:套路和技巧</title>
    <url>/2020/01/03/%E5%A6%82%E4%BD%95%E5%86%99%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A-%E5%A5%97%E8%B7%AF%E5%92%8C%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>写年度报告也好，写普通报告也好，如果能够掌握一些技巧的话，就可以给自己的报告增色不少。</p>
<h1 id="绝对值，相对化"><a href="#绝对值，相对化" class="headerlink" title="绝对值，相对化"></a>绝对值，相对化</h1><p>有一些数据，直接拿出来并不好看。然而如果把这些绝对值转化成相对值，比如百分比、环比、增长率等，事情就大不一样。</p>
<p>例子：</p>
<table>
<thead>
<tr>
<th align="left">实际情况</th>
<th align="left">报告内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">组内5个人，只有1个评了A</td>
<td align="left">组内有20%的员工拿了A</td>
</tr>
<tr>
<td align="left">去年销售额占总公司1%，今年1.1%</td>
<td align="left">销售额环比增长10%</td>
</tr>
<tr>
<td align="left">去年一共接了2个订单，今年还没做完</td>
<td align="left">客户存留率100%</td>
</tr>
<tr>
<td align="left">去年一共接了2个订单，今年还没做完，又接了2单</td>
<td align="left">全年订单数量翻番</td>
</tr>
</tbody></table>
<h1 id="相对值，模糊化"><a href="#相对值，模糊化" class="headerlink" title="相对值，模糊化"></a>相对值，模糊化</h1><p>有的数据已经不错了，但是老板总觉得不够好。这个时候，就需要把这些数据进行模糊化。</p>
<p>例子</p>
<table>
<thead>
<tr>
<th align="left">实际情况</th>
<th align="left">报告内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">去年销售额占总公司1%，今年1.1%</td>
<td align="left">销售额实现两位数增长</td>
</tr>
<tr>
<td align="left">去年一共接了2个订单，今年还没做完，又接了2单</td>
<td align="left">订单数量增长速度极快</td>
</tr>
</tbody></table>
<h1 id="模糊值，整合化"><a href="#模糊值，整合化" class="headerlink" title="模糊值，整合化"></a>模糊值，整合化</h1><p>汇报的时候，老板通常会更在意比较“差”的部分，而这些也会直接影响你的最终评估结果。但是一年发生了这么多事情，不可能事事顺心，都表现的很好。因此需要把分散的值，整合起来。</p>
<p>例子：</p>
<table>
<thead>
<tr>
<th align="left">实际情况</th>
<th align="left">报告内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">今年前边11个月销售额都环比增长10%，12月圣诞活动没搞好环比下降了5%</td>
<td align="left">年销售额增长5%</td>
</tr>
<tr>
<td align="left">组内销售任务每人10w，1人6w，4人12w</td>
<td align="left">组内销售任务超额完成</td>
</tr>
</tbody></table>
<h1 id="整合值，定语化"><a href="#整合值，定语化" class="headerlink" title="整合值，定语化"></a>整合值，定语化</h1><p>有些时候，无论怎么整合，这些数据就是不好看。这个时候，需要在报告的数据前边加上定语，对数据进行过滤。</p>
<p>例子：</p>
<table>
<thead>
<tr>
<th align="left">实际情况</th>
<th align="left">报告内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">游戏运营，玩家总数少了10w</td>
<td align="left">新增玩家50w（流失60w就不说了）</td>
</tr>
<tr>
<td align="left">新兴领域，一共10家公司</td>
<td align="left">在领域内进入国内前10</td>
</tr>
</tbody></table>
<h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><p>无论怎么套路，没做就是没做，多少就是多少，实事求是不扯谎，这是底线。</p>
<p>本文只是给大家提供一些年度报告的包装思路，往坏了说算是歪门邪道，充其量可以帮助大家临时抱抱佛脚。</p>
<p>巧妇难为无米之炊，最重要的还是平时下足功夫。把工作做好，对自己、对别人都是负责。</p>
<p>多一些真诚，少一些套路。</p>
]]></content>
      <categories>
        <category>Trick</category>
      </categories>
      <tags>
        <tag>Trick</tag>
      </tags>
  </entry>
  <entry>
    <title>如何开展一项研究工作</title>
    <url>/2024/01/03/%E5%A6%82%E4%BD%95%E5%BC%80%E5%B1%95%E4%B8%80%E9%A1%B9%E7%A0%94%E7%A9%B6%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="明确问题"><a href="#明确问题" class="headerlink" title="明确问题"></a>明确问题</h1><ol>
<li>motivation (case)</li>
<li>任务的具体输入输出</li>
<li>服务对象</li>
<li>服务场景</li>
</ol>
<blockquote>
<p>对应intro，要有故事来支撑</p>
</blockquote>
<h1 id="总结现有解决方案"><a href="#总结现有解决方案" class="headerlink" title="总结现有解决方案"></a>总结现有解决方案</h1><ol>
<li>传统经典解决方案，有哪几大类</li>
<li>最新/最火/最好的方案是哪一类、那几个</li>
</ol>
<blockquote>
<p>对应related works，快速入门可以看一些review文章</p>
</blockquote>
<h1 id="总结最近三年方案的工作内容"><a href="#总结最近三年方案的工作内容" class="headerlink" title="总结最近三年方案的工作内容"></a>总结最近三年方案的工作内容</h1><ol>
<li>benchmark、数据集</li>
<li><strong>挑战有哪些</strong></li>
<li><strong>contribution都是怎么写的</strong></li>
<li><strong>创新集中在哪些方面</strong></li>
</ol>
<blockquote>
<p>对应related works，增加理解，需要对近几年的文章精读</p>
</blockquote>
<h1 id="确定研究框架"><a href="#确定研究框架" class="headerlink" title="确定研究框架"></a>确定研究框架</h1><ol>
<li>挑战</li>
<li><strong>算法与创新点</strong></li>
<li>contribution设计</li>
<li>实验设计</li>
</ol>
<blockquote>
<p>关键在于算法与创新点设计，需要对前一部分2、3、4有深入理解，结合实际数据或场景需求</p>
</blockquote>
]]></content>
      <tags>
        <tag>research</tag>
      </tags>
  </entry>
  <entry>
    <title>如何构建高绩效团队</title>
    <url>/2019/08/08/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E9%AB%98%E7%BB%A9%E6%95%88%E5%9B%A2%E9%98%9F/</url>
    <content><![CDATA[<h1 id="剔除害群之马"><a href="#剔除害群之马" class="headerlink" title="剔除害群之马"></a>剔除害群之马</h1><p>如果一个人没有良好的品质，任何领导者没有魔力能够把品质注入到他身上。</p>
<p>作为团队的领导，可以对每一个成员进行培养、测试他的品质，给年轻人机会让他展示自己的品质，但如果这种品质在他身上根本就不存在，就不能注入。这一点，每一个团队领导都要十分清楚。所以说，选择可靠的人的能力非常重要，有匹害群之马，大多数的组织都会功亏一篑。</p>
<h1 id="团队的发展过程中，要坚持四个尊重"><a href="#团队的发展过程中，要坚持四个尊重" class="headerlink" title="团队的发展过程中，要坚持四个尊重"></a>团队的发展过程中，要坚持四个尊重</h1><ul>
<li>尊重别人</li>
<li>尊重诚实的品质</li>
<li>尊重忠诚的品质</li>
<li>尊重时间</li>
</ul>
<h1 id="高绩效团队拥有哪些元素"><a href="#高绩效团队拥有哪些元素" class="headerlink" title="高绩效团队拥有哪些元素"></a>高绩效团队拥有哪些元素</h1><ol>
<li>清晰的目的和愿景：人们想知道他们在做什么，想要达到什么样的目标，想要一些他们可以承诺的事情。这是很多团队领导者忽略的东西，或者他们知道自己的愿景是什么，但是，他们忘记了与团队成员分享，他们忽略了经常重复的好处。</li>
<li>清晰的目标：这包括两部分，为整个团队和每个团队成员制定明确的目标，这样，他们就知道团队对他们的期望，以及他们将如何为整体绩效做贡献。</li>
<li>高的工作标准：高效的团队为自己的绩效、工作方式和他们工作的水平感到自豪。拥有清晰的绩效标准或关键绩效指标（KPI）会得到强有力的承诺—-如果团队成员参与了这些标准的设定，承诺就会更多。</li>
<li>系统和程序：建立清晰的工作、报告和执行过程的清晰方法可以提高工作效率和效果。当团队成员变得更习惯于在一起工作时，这些系统和程序会变得更高质量。</li>
<li>清晰、开放的沟通：包括正式的非正式的沟通。在一个团队里，信息分享、说出你想要的和问出你想要的是非常重要的，更为关键的是团队成员之间可以相互倾听对方的观点并尊重对方的贡献，这样做的部分原因是，你可以轻松地表达不同意见、处理分歧。</li>
<li>信任和承诺：这是一种无形的元素，虽然人际关系很好，但这在团队中并不重要，更重要的是能够尊重同事，与他们一起工作，感觉他们会履行自己的承诺，可靠和值得信任远比彼此喜欢更为重要。</li>
<li>领导力：随着团队的发展，领导风格和方法需要与时俱进。</li>
<li>定义的角色和职责：大多数人都想知道他们应该做什么，以及他们将如何被评估。</li>
<li>归属感：团队成员有归属感吗？把目标感与愿景结合起来。</li>
</ol>
<h1 id="重点是分享和互相依赖"><a href="#重点是分享和互相依赖" class="headerlink" title="重点是分享和互相依赖"></a>重点是分享和互相依赖</h1><p>高效的团队合作不是一个人们抛弃“自我”，仅是依附于团队获得支持和认同的依赖过程，在这个过程中，它也不是一个“我”是第一位的独立过程，高绩效团队是一个相互依赖的过程。</p>
<p>在高绩效协团队中，我们不会看到“指责”，或声称“这不是我的工作”。相互依赖的思维意味着从“这对我有什么好处？”到“这对我们有什么好处？”</p>
]]></content>
      <tags>
        <tag>团队建设</tag>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>[Trick]在linux上创建root权限用户（不修改系统文件）</title>
    <url>/2018/07/31/%E5%9C%A8linux%E4%B8%8A%E5%88%9B%E5%BB%BAroot%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7%EF%BC%88%E4%B8%8D%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h1 id="简略过程"><a href="#简略过程" class="headerlink" title="简略过程"></a>简略过程</h1><p>如我们现在要创建一个名为imonce的新用户：</p>
<blockquote>
<p>adduser imonce</p>
</blockquote>
<p>赋予root权限</p>
<blockquote>
<p>usermod -g sudo imonce</p>
</blockquote>
<p>万事大吉</p>
<h1 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h1><p>有空再补吧<del>(‾⌣‾</del>)</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>trick</tag>
      </tags>
  </entry>
  <entry>
    <title>如何把jupyter notebook自动转换为python脚本</title>
    <url>/2021/11/21/%E5%A6%82%E4%BD%95%E6%8A%8Ajupyter-notebook%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%B8%BApython%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>将YOURNOTEBOOKNAME替换为需要转换的文件名称，运行以下命令即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jupyter nbconvert --to script YOURNOTEBOOKNAME.ipynb</span><br></pre></td></tr></table></figure>

<p>如果使用了anaconda环境，且未将其设置为默认环境的话，可以在jupyter命令前补充安装路径。</p>
<p>以安装路径为“~/opt/anaconda3”为例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~/opt/anaconda3/bin/jupyter nbconvert --to script YOURNOTEBOOKNAME.ipynb</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>现代服务业：昨天、今天、明天</title>
    <url>/2019/06/23/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E3%80%81%E6%9C%8D%E5%8A%A1%E4%B8%9A%E3%80%81%E7%8E%B0%E4%BB%A3%E6%9C%8D%E5%8A%A1%E4%B8%9A/</url>
    <content><![CDATA[<h1 id="昨天：传统服务及传统服务业"><a href="#昨天：传统服务及传统服务业" class="headerlink" title="昨天：传统服务及传统服务业"></a>昨天：传统服务及传统服务业</h1><h2 id="传统服务的定义"><a href="#传统服务的定义" class="headerlink" title="传统服务的定义"></a>传统服务的定义</h2><p>具有无形特征却可以给人带来某种利益或满足感的一种(一系列)交互行为及其过程</p>
<h2 id="传统服务的特性"><a href="#传统服务的特性" class="headerlink" title="传统服务的特性"></a>传统服务的特性</h2><p>服务的特性（Edward Livingston Trudeau, 1848 – 1915）：</p>
<ul>
<li>To cure sometimes </li>
<li>To relieve often </li>
<li>To comfort always</li>
</ul>
<h2 id="传统服务业定义"><a href="#传统服务业定义" class="headerlink" title="传统服务业定义"></a>传统服务业定义</h2><p>提供服务的行业，包括是国民经济中在流通、生产生活、科学文化教育、社会公共需求等领域提供各种服务产品的部门或行业</p>
<h2 id="传统服务业在各个产业中的体现"><a href="#传统服务业在各个产业中的体现" class="headerlink" title="传统服务业在各个产业中的体现"></a>传统服务业在各个产业中的体现</h2><ul>
<li>第一产业（农林牧副渔等）：产品直接取自自然界的部门(300$/人)，主要指农业（农、林、牧、渔 ），是国民经济的基础 <ul>
<li>农业种植业包括育种、播种、灌溉、施肥、除草、土壤改造、病虫防治、收割、分拣、运输、储存等</li>
</ul>
</li>
<li>第二产业（包括制造和采掘业等）：对初级产品进行再加工部门，工业 (800$/人) （采掘、制造、自来水、电力蒸汽热水、煤气和建筑）<ul>
<li>制造业的生产运营包括研发、设计、品牌、制造、物流配送、渠道控制和销售服务等七个主要环节，其中除制造外的六个环节都是服务；从产业价值链角度来看，这些服务环节创造的附加价值往往远高于制造加工环节的产品价值</li>
<li>采掘业包括勘探、采掘、分拣、运输、提炼/加工、储存等，主要环节也是服务</li>
</ul>
</li>
<li>三次产业：一、二产业之外，为生产和消费提供各种服务的部门(1500$/人) <ul>
<li>20世纪30年代 ，英国经济学家AG Fisher在《安全与进步的冲突》一书中提出“第三产业”的概念</li>
</ul>
</li>
</ul>
<h2 id="产业融合"><a href="#产业融合" class="headerlink" title="产业融合"></a>产业融合</h2><p>产业交叉及其跨界发展，如：农业+物联网+互联网，服务型制造</p>
<h1 id="今天：现代服务业"><a href="#今天：现代服务业" class="headerlink" title="今天：现代服务业"></a>今天：现代服务业</h1><h2 id="现代服务定义"><a href="#现代服务定义" class="headerlink" title="现代服务定义"></a>现代服务定义</h2><p>现代服务（线上服务，新服务）是以协同创造、获取价值为目标，服务提供商(SP)与顾客(C)之间的交互行为及其过程</p>
<h2 id="服务的要素"><a href="#服务的要素" class="headerlink" title="服务的要素"></a>服务的要素</h2><ul>
<li>价值共创：<ul>
<li>SP与C共同参与创造过程与结果</li>
<li>不仅包括经济价值，还可能包括非经济的目标</li>
<li>经济价值测度方法也与工业经济有差别(完全市场交易vs拍卖？)</li>
</ul>
</li>
<li>服务关系:不仅包括SP与C之间关系，往往不是二元关系</li>
<li>服务供给：有效的服务供给永远是短缺的（例如，考虑客户需求反应的时间性等）</li>
</ul>
<h2 id="现代服务业的特征"><a href="#现代服务业的特征" class="headerlink" title="现代服务业的特征"></a>现代服务业的特征</h2><ul>
<li>服务系统化<ul>
<li>系统指服务流程、服务供应链，更多的是服务生态系统。服务系统中顾客、信息主体、资源主体和环境等参与要素间形成动态的关联</li>
<li>服务系统具有明显的开放性特征</li>
</ul>
</li>
<li>服务关系化<ul>
<li>服务系统包括多元化价值主体，不仅仅包括盈利组织和目标</li>
<li>主体间广泛的连接形成关系，多种关系尤其是客户/潜在客户之间及其与服务提供者之间关系对客户行为和服务价值的影响大</li>
<li>服务交互与接触方式的数量大大增加且可以动态切换，各种社交媒体的综合应用等使得客户的选择与决策产生相互影响</li>
<li>关系可跨越时空限制，现代服务通常在较大地理空间内动态进行</li>
</ul>
</li>
<li>资源整合化<ul>
<li>服务资源概念发生变化；显著依赖于专门领域的专业知识</li>
<li>产品只是服务交付的载体，服务是生产的最终目的-&gt;制造服务化</li>
<li>强调社会服务资源协同地满足社会服务需求，而不是单个企业孤立地满足若干细分市场的需求</li>
</ul>
</li>
</ul>
<h2 id="现代服务业分类"><a href="#现代服务业分类" class="headerlink" title="现代服务业分类"></a>现代服务业分类</h2><ul>
<li>基础服务：通信和信息服务</li>
<li>生产和市场服务：创意、研发、设计、金融、物流、电子商务、咨询、农业支撑及中介和咨询</li>
<li>个人消费服务：教育、医疗保健、住宿、餐饮、文化娱乐、旅游、房地产及商品零售</li>
<li>公共服务：政府的公共管理服务、基础教育、公共卫生、医疗及公益性信息服务</li>
</ul>
<h2 id="现代服务业在各个领域内应用"><a href="#现代服务业在各个领域内应用" class="headerlink" title="现代服务业在各个领域内应用"></a>现代服务业在各个领域内应用</h2><h3 id="智能电网"><a href="#智能电网" class="headerlink" title="智能电网"></a>智能电网</h3><p>电力生产传输-&gt;用能的效用</p>
<p>建立在集成的高速双向通信网络基础之上，利用传感器对发电、输电、配电、供电等关键设备（能力）的运行状况进行实时监控，然后综合能力与需求信息，对电力系统运行进行优化管理</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623160724.png"></p>
<h3 id="智能医疗"><a href="#智能医疗" class="headerlink" title="智能医疗"></a>智能医疗</h3><p>专业服务-&gt;围绕患者的个性化集成服务</p>
<p>智能医疗是以患者为本的网络化服务系统，利用ICT技术实现服务创新、资源共享，和医疗服务能力与需求的动态匹配，以改善疾病预防、诊断和治疗。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623160839.png"></p>
<h3 id="智能出行（携程旅行网）"><a href="#智能出行（携程旅行网）" class="headerlink" title="智能出行（携程旅行网）"></a>智能出行（携程旅行网）</h3><p>专业服务-&gt;现代旅游资源<strong>集成服务</strong></p>
<p>现代旅行服务业,创立于1999年，总部设在上海，目前已在北京、广州、深圳、成都、杭州、厦门、青岛、南京、武汉、沈阳等10个城市设立分公司，员工近7000人;作为中国领先的在线旅行服务公司，携程旅行网成功整合了高科技产业与传统旅行业，向超过1800万会员提供集酒店预订、机票预订、度假预订、商旅管理、特约商户及旅游资讯在内的全方位旅行服务，被誉为互联网和传统旅游无缝结合的典范;凭借稳定的业务发展和优异的盈利能力，Ctrip于2003年12月在美国纳斯达克成功上市。</p>
<ul>
<li>酒店预订<ul>
<li>拥有中国领先的酒店预订服务中心，为会员提供即时预订服务</li>
<li>合作酒店超过28000家，遍布全球134个国家和地区的5900余个城市</li>
<li>不仅为会员提供优惠房价预订，在主要酒店拥有大量保留房，为会员出行提供保障 </li>
</ul>
</li>
<li>机票预订<ul>
<li>拥有全国联网的机票预订、配送和各大机场的现场服务系统，为会员提供国际和国内机票的查询预订服务</li>
<li>机票预订覆盖各大航空公司的绝大多数航线，实现国内48个城市市内免费送票，实现异地机票，本地预订、异地取送</li>
</ul>
</li>
<li>度假预订<ul>
<li>为会员提供自由行、海外团队游、半自助游、自驾游、签证、自由行PASS、代驾租车等多种度假产品</li>
<li>依托充足的行业资源，提供丰富多样的酒店、航班、轮船、火车、专线巴士等搭配完善的配套服务</li>
<li>摈弃传统团队走马观花的形式，以合理的行程安排和深入的旅行体验为特色</li>
</ul>
</li>
<li>商旅管理<ul>
<li>面向国内外各大企业与集团，以提升企业整体商旅管理水平与资源整合能力为服务宗旨</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623160948.png"></p>
<h3 id="资源共享服务"><a href="#资源共享服务" class="headerlink" title="资源共享服务"></a>资源共享服务</h3><p>资源所有-&gt;资源所用</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623161128.png"></p>
<pre><code>Gig Economy：An environment in which temporary positions are common and organizations contract with independent workers for short-term engagements, on demand. McKinsey’s taxonomy (2016): 
1. Free agents (自由职业者): those who actively choose independent work and derive their primary income from independent work
2. Casual earners (偶尔赚外快者): those who use independent work for supplemental income, and do so by choice
3. Reluctant(无法取得固定岗位者): those who make their primary living from independent work, but would prefer traditional jobs
4. Financially strapped(财务困难赚外快者): those who do supplemental independent work out of necessity    

Sharing Economy：The coordination of exchanges between individuals as would a traditional market, but in a flexible, self-governing, and potentially revolutionary way</code></pre>
<h1 id="明天：服务科学"><a href="#明天：服务科学" class="headerlink" title="明天：服务科学"></a>明天：服务科学</h1><p>服务科学的概念是2002年IBM的Almaden 研究中心与UC Berkely 大学组成的合作研究团队首次提出的；2005年IBM正式提出服务科学管理和工程（SSME）的概念，认为服务科学是科学、工程和管理三个维度的结合。</p>
<ul>
<li>服务运作管理：主要来源于生产运作管理，包括商业模式分析、服务流程分析、服务排程与决策优化、服务质量管理和收益管理等</li>
<li>服务营销：提出了服务行为、服务包的概念和服务主导逻辑</li>
<li>服务计算：从面向对象和面向构件的计算演化而来的一种分布式计算模式，通过分布在企业内部或者跨企业边界的不同商业应用系统实现快捷、灵活的无缝集成与相互协作，实现消除商业服务和信息技术服务之间鸿沟的目的</li>
</ul>
<h2 id="国内外部分研究机构、刊物"><a href="#国内外部分研究机构、刊物" class="headerlink" title="国内外部分研究机构、刊物"></a>国内外部分研究机构、刊物</h2><ul>
<li>浙江大学 服务科学研究中心、电子服务研究中心</li>
<li>台湾清华大学   服务科学研究所 <a href="http://www.iss.nthu.edu.tw/" target="_blank" rel="noopener">http://www.iss.nthu.edu.tw/</a></li>
<li>Service Science, IBM Research, <a href="http://researcher.watson.ibm.com/researcher/view_group.php?id=1230" target="_blank" rel="noopener">http://researcher.watson.ibm.com/researcher/view_group.php?id=1230</a></li>
<li>University of Tokyo, Service Innovation Working Group <a href="http://www.ducr.u-tokyo.ac.jp/en/2006service_innovation/index.html" target="_blank" rel="noopener">http://www.ducr.u-tokyo.ac.jp/en/2006service_innovation/index.html</a> </li>
<li>Arizona State University, the Center for Services Leadership (CSL), <a href="https://wpcarey.asu.edu/research/services-leadership" target="_blank" rel="noopener">https://wpcarey.asu.edu/research/services-leadership</a></li>
<li>Carnegie Mellon University, IT Services Qualification Center (ITSQC) <a href="http://www.itsqc.cs.cmu.edu/" target="_blank" rel="noopener">http://www.itsqc.cs.cmu.edu/</a> </li>
<li>Georgia Institute of Technology, Tennenbaum Institute <a href="http://www.ti.gatech.edu/" target="_blank" rel="noopener">http://www.ti.gatech.edu/</a> </li>
<li>Ohio State University, Fisher College of Business, Initiative for Managing Services <a href="http://fisher.osu.edu/centers/ims" target="_blank" rel="noopener">http://fisher.osu.edu/centers/ims</a> </li>
<li>Stanford University, Center for Work, Technology &amp; Organization (WTO)  <a href="http://web.stanford.edu/group/wto/cgi-bin/wp/" target="_blank" rel="noopener">http://web.stanford.edu/group/wto/cgi-bin/wp/</a> </li>
<li>University of Maryland, Center for Excellence in Service <a href="http://www.rhsmith.umd.edu/centers-excellence/center-excellence-service" target="_blank" rel="noopener">http://www.rhsmith.umd.edu/centers-excellence/center-excellence-service</a></li>
<li>University of Pennsylvania, Wharton Business School, Fishman-Davidson Center for Service and Operations Management  <a href="http://opim.wharton.upenn.edu/fd/" target="_blank" rel="noopener">http://opim.wharton.upenn.edu/fd/</a>  </li>
<li>Service Science (INFORMS journal) <a href="http://pubsonline.informs.org/journal/serv" target="_blank" rel="noopener">http://pubsonline.informs.org/journal/serv</a></li>
<li>IEEE Transactions on Service Computing <a href="http://www.computer.org/portal/web/tsc" target="_blank" rel="noopener">http://www.computer.org/portal/web/tsc</a></li>
<li>Service Oriented Computing and Applications <a href="http://www.springer.com/computer/communication+" target="_blank" rel="noopener">http://www.springer.com/computer/communication+</a>networks/journal/11761</li>
<li>IEEE Transactions on Network and Service Management <a href="http://www.comsoc.org/tnsm" target="_blank" rel="noopener">http://www.comsoc.org/tnsm</a></li>
<li>Journal of Service Research  <a href="http://jsr.sagepub.com/" target="_blank" rel="noopener">http://jsr.sagepub.com</a></li>
<li>服务科学和管理  <a href="http://www.hanspub.org/journal/ssem/" target="_blank" rel="noopener">http://www.hanspub.org/journal/ssem/</a> </li>
</ul>
<h2 id="服务科学的特征"><a href="#服务科学的特征" class="headerlink" title="服务科学的特征"></a>服务科学的特征</h2><ul>
<li>自然科学特征<ul>
<li>实践工具、部分研究问题</li>
<li>强调量化、可重复</li>
<li>依靠实验</li>
</ul>
</li>
<li>社会科学特征<ul>
<li>实践目标、部分研究问题</li>
<li>强调客户参与、体验</li>
<li>依靠假设-&gt;分析验证、仿真、情境分析/决策支持</li>
</ul>
</li>
</ul>
<h2 id="研究趋势"><a href="#研究趋势" class="headerlink" title="研究趋势"></a>研究趋势</h2><h3 id="传感与接入"><a href="#传感与接入" class="headerlink" title="传感与接入"></a>传感与接入</h3><ul>
<li>传感与接入：感知对象（人或物）的状态，将状态参数转换为可存储、可传输数据，并将数据接入到可共享的系统中，如：传感器、智能穿戴、移动定位设备等</li>
<li>物联网又名传感网，指将各种信息传感设备与互联网结合起来而形成一个物物相联的网络以进行识别和管理</li>
<li>智能穿戴在2013年逐渐成为热词；目前的技术路径<ul>
<li>基于通讯的智能穿戴产品，以三星等传统通讯企业为代表</li>
<li>基于定位、运动娱乐智能穿戴产品，以耐克等传统运动娱乐企业为代表</li>
<li>基于眼镜类的虚拟现实或沉浸式的智能穿戴产品，以谷歌眼镜为代表</li>
<li>基于血压、心率、血糖、新陈代谢等监测可穿戴设备，以移动医疗为主</li>
</ul>
</li>
<li>移动定位设备：主要用于基于位置的服务（如位置获取基础上的导航、交友、紧急呼叫、周边服务搜索等服务)</li>
<li>天网工程</li>
<li>智能交通中卡口与收费站等各种视频采集设备</li>
</ul>
<h3 id="万物互联"><a href="#万物互联" class="headerlink" title="万物互联"></a>万物互联</h3><p>物物互联</p>
<ul>
<li>云计算：网络连接起来的浩大数据、计算、服务、设施资源进行统一管理、协调，形成一个内容丰富、能量强大的资源服务体系，按社会和用户需求进行分配提供；云计算=计算与存储资源的分布式存在与互联整合</li>
<li>车联网：指装载在车辆上的电子标签通过无线射频等识别技术，实现在信息网络平合上对车辆的属性信息和静动态信息进行提取和有效利用，对车辆运行状态进行有效的监管和提供综合服务</li>
<li>M2M：M2M是将数据从一台终端传送到另一台终端，也就是机器与机器的对话。三一重工在其销往全球的工程机械(关键部件)上加装数据采集终端,机械的运行数据通过网络汇总到三一集团ECC(Enterprise Control Center), ECC随时发现设备运行中存在的问题,智能设备控制器检测的油温、转速、工作压力等运行数据通过通信网络实时发送至ECC，一旦发现异常情况，ECC立即指导客户排除故障或派出维修人员上门服务</li>
<li>智能电网（Smart Grid, SG）, 又叫互动电网，是建立在集成的高速双向通信网络基础之上，利用传感器对发电、输电、配电、供电等关键设备（能力）的运行状况进行实时监控，然后综合能力与需求信息，对电力系统运行进行优化管理</li>
</ul>
<p>人人互联</p>
<ul>
<li>电话：仍是人际沟通与联系的主要工具；但IT发展改变了电话的形式与内涵 (固定电话-&gt;移动电话-&gt;网络电话)</li>
<li>社交媒体(Social Media)指借助允许人们撰写、分享、评价、讨论、相互沟通的网站和技术，实现人们彼此之间用来分享意见、见解、经验和观点的工具和平台。现阶段主要包括微信(2011), Mini-Blog(2007), Google+(2011)，手机QQ(2003), Facebook(2004), Twitter(2006), Blog(2002-2005), Email(1987/1998)等</li>
<li>UGC（User Generated Content）：指用户原创内容，是伴随着以提倡个性化为主要特点的Web2.0概念而兴起的。它并不是某一种具体的业务，而是一种用户使用互联网的新方式，即由原来的以下载为主变成下载和上传并重，如视频分享，直播，照片分享，知识分享，社区论坛等</li>
<li>大型开放式网络课程，即MOOC ，是信息技术、网络技术与优质教育的结合，通过这个平台将教育资源送到世界的各个角落。具有工具资源多元化、课程易于使用、课程受众面广、课程参与自主性的特点</li>
<li>创客空间。创客指不以盈利为目标,出于兴趣与爱好，努力把各种创意转变为现实的人</li>
</ul>
<p>人物互联</p>
<ul>
<li>智能家居(smart home, home automation)是在互联网影响之下物联化的体现。它以住宅为平台，通过物联网技术将家居生活有关的设施集成，提供控制、遥控、报警、监测、以及定时等多种功能和手段</li>
<li>服务机器人：在非结构环境下为人类提供必要服务的多种高技术集成的智能化装备。IR工作环境已知，SR工作环境绝大多数未知</li>
</ul>
<h3 id="面向个人与社会群体的数字化"><a href="#面向个人与社会群体的数字化" class="headerlink" title="面向个人与社会群体的数字化"></a>面向个人与社会群体的数字化</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623162654.png"></p>
<ul>
<li>面向个人与社会群体数据爆发式增长的推手：硬件成本的降低，网络带宽的提升，云计算的兴起，网络技术的发展，智能终端的普及，电子商务、社交网络和电子地图等的全面应用，物联网</li>
<li>近几年（2009年以后)数字化表现的主要特征与趋势<ul>
<li>以服务为主，大多采用平台模式</li>
<li>数字资源系统开放</li>
<li>虚拟空间与物理空间融合</li>
</ul>
</li>
</ul>
<h2 id="互联网大数据时代及其直接影响"><a href="#互联网大数据时代及其直接影响" class="headerlink" title="互联网大数据时代及其直接影响"></a>互联网大数据时代及其直接影响</h2><ul>
<li>大数据的概念是2008年提出的；因为政治经济的发展需要和媒体宣传，使人们认识到大数据技术对个人、社会和国家重要而深刻的影响，因此认为我们正在进入大数据时代</li>
<li>数据与数据技术对社会和人们生活产生重要影响的事，主要发生在近几年：从传感与接入、互联和面向个人与群体的数字化三个维度看，这些事主要发生在十年左右</li>
<li>面向个人与群体的数字化的直接影响<ul>
<li>数据的爆炸式增长（数字化主体的爆炸式增长），服务科学化成为可能</li>
<li>生产过程与消费过程的融合，导致人类社会从工业社会进入信息社会，从制造经济进入服务经济</li>
<li>个人(用户)在生产、消费等活动中的主体地位将日益得到明确与体现，不断形成新的服务产品和服务模式</li>
</ul>
</li>
</ul>
<h3 id="大数据推动服务研究科学化"><a href="#大数据推动服务研究科学化" class="headerlink" title="大数据推动服务研究科学化"></a>大数据推动服务研究科学化</h3><ul>
<li>客户体验的测量</li>
<li>客户个体特征的识别</li>
<li>新型服务关系发现</li>
</ul>
<h3 id="服务价值多元化"><a href="#服务价值多元化" class="headerlink" title="服务价值多元化"></a>服务价值多元化</h3><p>传统商业研究与产业发展侧重短期与长期经济利益，其价值观点立足于消费者与生产者，认为企业是价值创造者，顾客是价值破坏者(Norman &amp; Ramírez, HBR 71(4): 65-77,1993)；在现代服务中，客户成为其价值共创的参与者与重要资源，服务提供者（企业）必须与客户的价值形成有效融合，才能实现价值共创。</p>
<p>产品（工业经济）满足用户生理需求、安全需求或者社交需求其中之一的满足，侧重经济价值；服务过程（体验经济）不仅需要有效整合各种资源（服务提供者），还常常需要考虑同时满足客户尊重与自我实现等多种需求，因此包括了经济价值与社会价值</p>
<h3 id="服务的新产品与新模式不断涌现"><a href="#服务的新产品与新模式不断涌现" class="headerlink" title="服务的新产品与新模式不断涌现"></a>服务的新产品与新模式不断涌现</h3><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623163140.png"></p>
<h2 id="服务科学研究的需求与应用背景"><a href="#服务科学研究的需求与应用背景" class="headerlink" title="服务科学研究的需求与应用背景"></a>服务科学研究的需求与应用背景</h2><h3 id="医养结合的居家养老服务"><a href="#医养结合的居家养老服务" class="headerlink" title="医养结合的居家养老服务"></a>医养结合的居家养老服务</h3><ul>
<li>我国老年人口情况<ul>
<li>65岁+人口:2013年末1.32亿 2017年末1.58亿 2018年末1.67亿</li>
<li>65岁+人口年增加：2013年前400万 2018年800+万</li>
<li>65岁+人口占比11.9%；2030年全球65岁+人口占比23.5%</li>
</ul>
</li>
<li>医疗服务需求<ul>
<li>我国65岁+慢性病患病率54%；慢性病患者近3亿</li>
<li>2011-2030年慢性病造成的全球经济损失47万亿美元</li>
</ul>
</li>
<li>共性问题：有效服务供给不足，服务需求差异巨大</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623163810.png"></p>
<h3 id="服务型制造"><a href="#服务型制造" class="headerlink" title="服务型制造"></a>服务型制造</h3><p>世界一流的制造企业都是高度国际化的服务型制造提供商：以开创性的服务理念、先进的制造服务化模式和国际化的服务运营视角在全球组织制造和服务资源</p>
<ul>
<li>服务型制造：强调制造企业从出售产品向出售一体化的解决方案转变</li>
<li>服务型制造是制造企业实现跨越式的转型升级，实现从制造大国向制造强国迈进的重要手段</li>
<li>制造服务提供商的服务创新能力，包括技术创新和服务模式创新能力是其能否成功转型升级的关键</li>
</ul>
<p>共性特征：</p>
<ul>
<li>集成客户域中的服务需求</li>
<li>打通制造组织域中的线上数据分析和线下智能生产过程</li>
<li>整合内外部制造与服务资源，创造全新的产品服务</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623163918.png"></p>
<h3 id="基于平台的资源共享服务"><a href="#基于平台的资源共享服务" class="headerlink" title="基于平台的资源共享服务"></a>基于平台的资源共享服务</h3><p>互联网与大数据技术的发展及广泛应用，为服务资源组织效率和满足客户的个性化服务需求的能力建设、从而提高服务质量提供了新的可能与发展空间。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190623161128.png"></p>
<ul>
<li>改变了人们的资源观：资源所有-&gt;资源所用<ul>
<li>耐用品（自行车、房屋）、稀缺品（如关键设备与装备等）</li>
<li>数据、智力（知识、创造力）</li>
</ul>
</li>
<li>服务供给侧改革的重要举措，也是社会经济可持续发展的一个可能的促进措施</li>
<li>共性特征：通过资源状态的实时感知，在较大时空范围内实现个性化服务需求的关联，及其与服务能力(资源)的动态匹配</li>
</ul>
<blockquote>
<p>supervised by Prof. Zhongsheng Hua of Zhejiang University</p>
</blockquote>
]]></content>
      <categories>
        <category>昨天、今天、明天</category>
      </categories>
      <tags>
        <tag>服务</tag>
        <tag>Service</tag>
        <tag>Service Industry</tag>
        <tag>服务业</tag>
        <tag>现代服务业</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的激活函数</title>
    <url>/2022/12/26/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>references:<br><a href="https://www.v7labs.com/blog/neural-networks-activation-functions#:~:text=An%20Activation%20Function%20decides%20whether,prediction%20using%20simpler%20mathematical%20operations" target="_blank" rel="noopener">https://www.v7labs.com/blog/neural-networks-activation-functions#:~:text=An%20Activation%20Function%20decides%20whether,prediction%20using%20simpler%20mathematical%20operations</a>.<br><a href="https://blog.csdn.net/weixin_45134475/article/details/123672283" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45134475/article/details/123672283</a><br><a href="https://zhuanlan.zhihu.com/p/92412922" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/92412922</a></p>
</blockquote>
<h1 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h1><p>$\sigma(x) = \frac{1}{1+e^{-x}}$</p>
<h1 id="Tanh"><a href="#Tanh" class="headerlink" title="Tanh"></a>Tanh</h1><p>$tanh(x) = \frac{1-e^{-2x}}{1+e^{-2x}}$</p>
<h1 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h1><p>$ReLU(x)=\left\lbrace\begin{array}{cll}<br>x &amp; , &amp; x \ge 0 \\<br>0 &amp; , &amp; x &lt; 0<br>\end{array}\right.$</p>
<p>或</p>
<p>$ReLU(x) = \max(0, x)$</p>
<h1 id="Leaky-ReLU"><a href="#Leaky-ReLU" class="headerlink" title="Leaky ReLU"></a>Leaky ReLU</h1><p>$ReLU(x)=\left\lbrace\begin{array}{cll}<br>x &amp; , &amp; x \ge 0 \\<br>0.1x &amp; , &amp; x &lt; 0<br>\end{array}\right.$</p>
<p>或</p>
<p>$ReLU(x) = \max(0.1x, x)$</p>
<h1 id="ELU"><a href="#ELU" class="headerlink" title="ELU"></a>ELU</h1><p>$ELU(x)=\left\lbrace\begin{array}{cll}<br>x &amp; , &amp; x \ge 0 \\<br>\alpha(e^x-1) &amp; , &amp; x &lt; 0<br>\end{array}\right.$</p>
<h1 id="Swish"><a href="#Swish" class="headerlink" title="Swish"></a>Swish</h1><p>$swish(x) = x*sigmoid(x) =\frac{x}{1+e^{-x}}$</p>
<h1 id="Maxout"><a href="#Maxout" class="headerlink" title="Maxout"></a>Maxout</h1><p>$max(z_1, z_2, …)$</p>
<h1 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h1><p>$softmax(z_i) = \frac{e^{z_i}}{\sum_j e^{z_j}}$</p>
]]></content>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Activation Function</tag>
      </tags>
  </entry>
  <entry>
    <title>如何走出职场焦虑、避免中年危机</title>
    <url>/2019/08/06/%E5%A6%82%E4%BD%95%E8%B5%B0%E5%87%BA%E8%81%8C%E5%9C%BA%E7%84%A6%E8%99%91%E3%80%81%E9%81%BF%E5%85%8D%E4%B8%AD%E5%B9%B4%E5%8D%B1%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="自我认识"><a href="#自我认识" class="headerlink" title="自我认识"></a>自我认识</h1><p>有人对自己工作进行抱怨时，经常会用到<strong>“不会做，不好做，不想做”</strong>这样的词语。然而“不会做”，“不好做”，“不想做”表达的是同样的含义么？这些表述背后又透露了什么信息呢？</p>
<p>为了帮助大家分析自己，美国著名心理学家麦克利兰提出了一个“冰山模型”，把一个人的素质要素分成了三类：</p>
<ol>
<li>知识、技能</li>
<li>能力</li>
<li>价值观、性格特质、动机</li>
</ol>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190805171618.png"></p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">知识、技能</th>
<th align="left">能力</th>
<th align="left">价值观、性格特质、动机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">解释</td>
<td align="left">通过学习和实践获得的可以使用在特定领域的认知、经验、技术，如学过的数学知识、写作修辞手法、office套件的使用方法等</td>
<td align="left">可以在不同领域使用的通用能力，如学习能力、人际交往能力</td>
<td align="left">判断事物的是非标准、行为偏好、成就动机、权利动机、亲和动机</td>
</tr>
<tr>
<td align="left">和工作不匹配的表现</td>
<td align="left">不会做，慌乱焦虑、无所适从</td>
<td align="left">不好做，低效、无奈</td>
<td align="left">不想做，矛盾纠结、没热情、心累</td>
</tr>
</tbody></table>
<h1 id="职业匹配"><a href="#职业匹配" class="headerlink" title="职业匹配"></a>职业匹配</h1><p>职业，本质上是关键业务的集合。看一个人和他的职业匹不匹配，就是看他是否需要、擅长、喜欢自己负责的业务。</p>
<p>可以通过下表来对自己和职业的匹配进行评估，只需要根据冰山模型填上自己的个人素质、自己目前需要什么（钱、社区、人脉等），再根据和每个业务的匹配关系给出1-5的评分即可。</p>
<table>
<tr>
    <td></td>
    <td></td>
    <td>个人素质</td>
    <td>业务1的匹配分数</td>
    <td>业务2的匹配分数</td>
    <td>...</td>
</tr>
<tr>
    <td rowspan="3"> 喜欢 </td>
    <td>价值观</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
</tr>
<tr>
    <td>性格特质</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
</tr>
<tr>
    <td>动机</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
</tr>
<tr>
    <td rowspan="3"> 擅长 </td>
    <td>知识</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
</tr>
<tr>
    <td>技能</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
</tr>
<tr>
    <td>能力</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
</tr>
<tr>
    <td>需要</td>
    <td>需要</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
</tr>
</table>

<h1 id="职业调整"><a href="#职业调整" class="headerlink" title="职业调整"></a>职业调整</h1><p>当我们对自己进行职业匹配之后，发现自己不喜欢、不擅长、不需要某一份工作的时候应该怎么办呢？</p>
<h2 id="不喜欢"><a href="#不喜欢" class="headerlink" title="不喜欢"></a>不喜欢</h2><p>不喜欢是和一个人的根本挂钩的，很难靠改变自己来喜欢上某个工作或者业务，最好是对工作进行调整：</p>
<ol>
<li>调整业务内容和目标（业务内调整）</li>
<li>更换负责的业务（岗位内调整）</li>
<li>请求更换岗位（公司内调整）</li>
<li>跳槽</li>
</ol>
<h2 id="不擅长"><a href="#不擅长" class="headerlink" title="不擅长"></a>不擅长</h2><p>不擅长说白了是自己的知识储备不够、技术水平不过关、能力不足导致的。需要不是外界的调整，而是自我的提升。</p>
<h2 id="不需要"><a href="#不需要" class="headerlink" title="不需要"></a>不需要</h2><p>不需要，本质上是这份工作不能满足你的某些需求。那么只需要分析其中的原因即可：</p>
<ol>
<li>业务原因。这个业务不被重视，没有前景，可能会被砍掉</li>
<li>行业原因。行业普遍工资低/加班等</li>
<li>职业原因。某类岗位就是重复性机械劳动，难以接触新的事物</li>
<li>公司原因。这公司药丸</li>
</ol>
<p>分析清楚了原因，就知道从哪里下手了。</p>
<h1 id="内在提升"><a href="#内在提升" class="headerlink" title="内在提升"></a>内在提升</h1><p>时间要投入到自我提升上，才会有工资的提升。自我提升有以下几种：</p>
<h2 id="知识提升"><a href="#知识提升" class="headerlink" title="知识提升"></a>知识提升</h2><p>提升自己的知识储备，不必每次都去搜索学习。</p>
<p>但是要注意，学了知识之后，如果可以灵活运营，则满腹经纶指点江山，否则就是读死书，浪费时间。</p>
<p>因此，要注意：</p>
<ol>
<li>要学会提取知识的核心，掌握20%的核心知识。比如做ppt漂亮的核心就是饱和度、边框、行间距</li>
<li>知识和问题关联起来，学习知识的时候就要联系到它能解决什么问题</li>
<li>系统化训练，刻意使用刚刚学到的知识，不要快速遗忘</li>
</ol>
<h2 id="技能提升"><a href="#技能提升" class="headerlink" title="技能提升"></a>技能提升</h2><p>技能的定价和天花板取决于其稀缺性。</p>
<p>某一技能可能在稀缺时期很值钱，但是随着供求关系发生变化，其市场价值依然会产生波动。</p>
<h2 id="能力提升"><a href="#能力提升" class="headerlink" title="能力提升"></a>能力提升</h2><p>技能熟练，只是一个好兵，能力强大，才能得到提升，成为将才。</p>
<p>能力提升可以跨行业跨职业，一旦积累到一定高度，换个公司、行业、职业一样可以吃的开，挣到钱。</p>
<h2 id="提升自我、认识自我"><a href="#提升自我、认识自我" class="headerlink" title="提升自我、认识自我"></a>提升自我、认识自我</h2><p>提升自我：对事物有更加深刻的看法，有更加成熟的三观，锻炼自己的某种特质</p>
<p>认识自我：有自知之明，找到更加适合自己的环境和土壤</p>
<h1 id="外在提升"><a href="#外在提升" class="headerlink" title="外在提升"></a>外在提升</h1><p>外在提升主要就是提升自己周围的环境，物理环境和社会环境。</p>
<p>物理环境的提升可以通过搬家、打扫卫生等完成。</p>
<p>社会环境，主要由自己的人脉构成，扩展、优化自己的人脉，就是提升自己的社会环境的过程。</p>
<p>提升过程中需要注意以下几个误区：</p>
<ol>
<li>皇冠综合症：只顾低头做事，等待伯乐发现自己，给自己戴上皇冠，这是不对的。要学会主动争取，树立个人品牌，展现自己的价值</li>
<li>名片囤积：人脉的构建不是基于名片的互换，而是基于价值的互换</li>
</ol>
<p>人脉关系中存在以下几种角色，可以帮助你迅速定位自己：</p>
<ol>
<li>节点：把大家连接在一起的人</li>
<li>专家：掌握信息、知识甚至是资源的人</li>
<li>明星：有强烈个人魅力的人</li>
<li>助理：在圈子里提供服务的人</li>
</ol>
<h1 id="持续成长"><a href="#持续成长" class="headerlink" title="持续成长"></a>持续成长</h1><ol>
<li>长远规划，给自己定好发展方向</li>
<li>提升能力，成为可迁移人才</li>
<li>提升认知高度，成为纵向深度人才，多思考：<ul>
<li>这个行业中的关键成功要素是什么</li>
<li>行业的社会价值是什么</li>
<li>部门、岗位、公司的核心价值是什么</li>
</ul>
</li>
</ol>
<p>在成长的几个阶段，需要注意：</p>
<ol>
<li>起步期：靠自己<ul>
<li>思维方面，形成独立见解</li>
<li>效率方面，学会多任务，能够高效处理工作，管理时间</li>
<li>沟通方面，理解他人需求，条理清楚</li>
<li>交际方面，懂得人际拓展方法</li>
</ul>
</li>
<li>发展期：靠别人<ul>
<li>思维方面，掌握解决复杂问题、拆分工作的方法</li>
<li>效率方面，懂得如何辅导和激励下属工作，不让自己累死</li>
<li>沟通方面，掌握说服他人的技巧，懂得公开表达</li>
<li>交际方面，能够处理团队内部或跨部门的冲突，进行高难度沟通</li>
</ul>
</li>
<li>成熟期：靠影响力<ul>
<li>思维方面，要更加有高度，掌握战略思维、经济学思维等</li>
<li>效率方面，掌握运营和财务的知识，更好的配置资源</li>
<li>沟通方面，了解公司，知道如何向用户推销自己，营销思维</li>
<li>交际方面，全面进阶的领导力</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>个人提升系列</category>
      </categories>
      <tags>
        <tag>职业规划、个人提升</tag>
      </tags>
  </entry>
  <entry>
    <title>常见QoS指标一览</title>
    <url>/2019/11/04/%E5%B8%B8%E8%A7%81QoS%E6%8C%87%E6%A0%87%E4%B8%80%E8%A7%88/</url>
    <content><![CDATA[<p>英文： Quality of Service<br>中文： 服务质量<br>介绍： 指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力，是网络的一种安全机制，<strong>是用来解决网络延迟和阻塞等问题的一种技术</strong>。 通过配置QoS，对企业的网络流量进行调控，避免并管理网络拥塞，减少报文的丢失率，同时也可以为企业用户提供专用带宽或者为不同的业务（语音、视频、数据等）提供差分服务。</p>
<p>在正常情况下，如果网络只用于特定的无时间限制的应用系统，并不需要QoS，比如Web应用，或E-mail设置等。但是对关键应用和多媒体应用就十分必要。当网络过载或拥塞时，==QoS能确保重要业务量不受延迟或丢弃==，同时保证网络的高效运行。在RFC 3644上有对QoS的说明。</p>
<h1 id="可用性-Usability"><a href="#可用性-Usability" class="headerlink" title="可用性(Usability)"></a>可用性(Usability)</h1><p>是当用户需要时网络即能工作的时间百分比。可用性主要是设备可靠性和网络存活性相结合的结果。对它起作用的还有一些其他因素，包括软件稳定性以及网络演进或升级时不中断服务的能力。 在连续5min内，如果一个IP网络所提供的丢包率&lt;=75%，则认为该时间段是可用的，否则是不可用的。</p>
<h1 id="吞吐量-网络带宽-Throughput"><a href="#吞吐量-网络带宽-Throughput" class="headerlink" title="吞吐量(网络带宽)(Throughput)"></a>吞吐量(网络带宽)(Throughput)</h1><p>网络带宽是指在单位时间（一般指的是1秒钟）内能传输的数据量。对IP网而言可以从帧中继网借用一些概念。根据应用和服务类型，服务水平协议(SLA)可以规定承诺信息速率(CIR)、突发信息速率(BIR)和最大突发信号长度。承诺信息速率是应该予以严格保证的，对突发信息速率可以有所限定，以在容纳预定长度突发信号的同时容纳从话音到视像以及一般数据的各种服务。一般讲，吞吐量越大越好。</p>
<h1 id="时延-Latency-Packet-delay"><a href="#时延-Latency-Packet-delay" class="headerlink" title="时延(Latency)(Packet delay)"></a>时延(Latency)(Packet delay)</h1><p>指一项服务从网络入口到出口的平均经过时间。许多服务，特别是话音和视像等实时服务都是高度不能容忍时延的。当时延超过200-250毫秒时，交互式会话是非常麻烦的。为了提供高质量话音和会议电视，网络设备必须能保证低的时延。<br>产生时延的因素很多，包括分组时延、排队时延、交换时延和传播时延。传播时延是信息通过铜线、光纤或无线链路所需的时间，它是光速的函数。在任何系统中，包括同步数字系列(SDH)、异步传输模式（ATM）和弹性分组环路(RPR)，传播时延总是存在的。</p>
<h1 id="时延变化-抖动-Packet-delay-variation"><a href="#时延变化-抖动-Packet-delay-variation" class="headerlink" title="时延变化(抖动)(Packet delay variation)"></a>时延变化(抖动)(Packet delay variation)</h1><p>是指同一业务流中不同分组所呈现的时延不同。高频率的时延变化称作抖动，而低频率的时延变化称作漂移。抖动主要是由于业务流中相继分组的排队等候时间不同引起的，是对服务质量影响最大的一个问题。</p>
<p>​某些业务类型（特别是语音和视频等实时业务）是极其不能容忍抖动的。报文到达时间的差异将在语音或视频中造成断续；另外，抖动也会影响一些网络协议的处理，有些协议是按固定的时间间隔发送交互性报文，抖动过大就会导致协议震荡，而实际上所有传输系统都有抖动，但只要抖动在规定容差之内就不会影响服务质量，另外，可利用缓存来克服过量的抖动，但这将会增加时延。</p>
<p>漂移是任何同步传输系统都有的一个问题。在SDH系统中是通过严格的全网分级定时来克服漂移的。在异步系统中，漂移一般不是问题。漂移会造成基群失帧，使服务质量的要求不能满足。</p>
<h1 id="丢包-Packet-loss"><a href="#丢包-Packet-loss" class="headerlink" title="丢包(Packet loss)"></a>丢包(Packet loss)</h1><p>不管是比特丢失还是分组丢失，对分组数据业务的影响比对实时业务的影响都大。在通话期间，丢失一个比特或一个分组的信息往往用户注意不到。在视像广播期间，这在屏幕上可能造成瞬间的波形干扰，然后视像很快恢复如初。即便是用传输控制协议(TCP)传送数据也能处理丢失，因为传输控制协议允许丢失的信息重发。事实上，一种叫做随机早丢(RED)的拥塞控制机制在故意丢失分组，其目的是在流量达到设定门限时抑制TCP传输速率，减少拥塞，同时还使TCP流失去同步，以防止因速率窗口的闭合引起吞吐量摆动。但分组丢失多了，会影响传输质量。所以，要保持统计数字，当超过预定门限时就向网络管理人员告警。</p>
<p>丢包（packetloss）可能在所有环节中发生，例如：</p>
<ul>
<li>处理过程：路由器在收到报文的时候可能由于CPU繁忙，无法处理报文而导致丢包；</li>
<li>排队过程：在把报文调度到队列的时候可能由于队列被装满而导致丢包；</li>
<li>传输过程：报文在链路上传输的过程中，可能由于种种原因（如链路故障等）导致的丢包。</li>
</ul>
<blockquote>
<p>References:<br><a href="https://blog.csdn.net/qq_25077833/article/details/53428655" target="_blank" rel="noopener">https://blog.csdn.net/qq_25077833/article/details/53428655</a><br><a href="https://blog.csdn.net/kakingka/article/details/45698709" target="_blank" rel="noopener">https://blog.csdn.net/kakingka/article/details/45698709</a><br><a href="https://blog.csdn.net/qq_38265137/article/details/80466737" target="_blank" rel="noopener">https://blog.csdn.net/qq_38265137/article/details/80466737</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Service Computing</tag>
        <tag>服务计算</tag>
        <tag>QoS</tag>
      </tags>
  </entry>
  <entry>
    <title>快速修复mac自带日历无法同步问题</title>
    <url>/2022/08/22/%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8Dmac%E8%87%AA%E5%B8%A6%E6%97%A5%E5%8E%86%E6%97%A0%E6%B3%95%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>打开terminal运行以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">launchctl stop com.apple.CalendarAgent</span><br><span class="line">launchctl start com.apple.CalendarAgent</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（七）：我的家（下）</title>
    <url>/2019/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%88%91%E7%9A%84%E5%AE%B6%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><h2 id="段落1"><a href="#段落1" class="headerlink" title="段落1"></a>段落1</h2><p>Mi chiamo Alberto Sorrentino 我叫Alberto Sorrentino</p>
<p>Sono di Napoli, ma lavoro a Roma da molti anni 我来自那不勒斯，但我在罗马工作多年</p>
<p>Sono avvocato 我是个律师</p>
<p>Mia moglie, Luisa, insegna all’Università di Roma 我的妻子路易莎在罗马大学任教</p>
<p>Abbiamo due belle bambine, Giulia e Patrizia 我们有两个漂亮的女孩（女儿），Giulia和Patrizia</p>
<p>Patrizia ha cinque anni e ancora non va a scuola Patrizia已经五岁了，仍然没有上学</p>
<p>ma sa già leggere e scrivere 但他已经知道如何阅读和写作</p>
<p>Giulia invece fa la terza elementare 朱莉娅改为（升年纪）三年级</p>
<p>I miei genitori vivono a Napoli 我的父母住在那不勒斯</p>
<p>Mio padre ha 70 anni ed è in pensione 我父亲今年70岁，现已退休</p>
<p>Mia madre è casalinga 我的妈妈是家庭主妇</p>
<p>I miei nonni paterni sono morti 我的祖父母已经死了</p>
<p>la mia nonna materna, invece, vive con i miei genitori 另一方面，我的外婆与我的父母住在一起</p>
<p>Ho anche due sorelle e un fratello 我还有两个姐妹和一个兄弟</p>
<p>La mia sorella più grande, Marisa, è medico 我的姐姐玛丽莎是一名医生</p>
<p>È sposata e ha un figlio di sette anni 她已婚，有一个七岁的儿子</p>
<p>Anche suo marito è avvocato, come me 她的丈夫也像我一样是律师</p>
<p>Io e mio cognato andiamo molto d’accordo 我的姐夫和我相处得很好</p>
<p>Ci conosciamo da quando eravamo bambini 自从我们还是孩子以来，我们彼此认识</p>
<p>Fra tutti i miei parenti, lui è il più simpatico 在我所有的亲戚中，他是最好的</p>
<p>Giovanna, la mia seconda sorella, è divorziata 我的第二个姐姐Giovanna离婚了</p>
<p>È ingegnere e lavora sempre tanto 她是一名工程师，总是努力工作</p>
<p>Io somiglio molto a lei 我看起来很像她</p>
<p>Abbiamo lo stesso carattere e spesso litighiamo 我们有相同的性格，我们经常争吵</p>
<p>Mio fratello Carlo è più piccolo di me 我兄弟卡罗比我小</p>
<p>È un tipo disinvolto, energico e allegro 他是一个休闲，充满活力和快乐的人</p>
<p>Studia lingue e letterature straniere all’Università di Napoli 他在那不勒斯大学学习外语和文学</p>
<p>Studia anche l’inglese, ma non lo sa parlare molto bene 他也学习英语，但不知道如何说得很好</p>
<p>Non ci vediamo molto spesso perché abitiamo lontano 我们不经常看到对方因为我们住得很远</p>
<p>ma siamo una famiglia molto unita 但我们是一个非常亲密的家庭</p>
<p>Ci telefoniamo spesso e ci aiutiamo a vicenda 我们经常互相打电话，互相帮助</p>
<h2 id="段落2"><a href="#段落2" class="headerlink" title="段落2"></a>段落2</h2><p>Oggi in Italia le famiglie numerose sono molto rare 今天在意大利，大家庭非常罕见</p>
<p>Infatti in Italia la crescita demografica è quasi zero 事实上，在意大利，人口增长几乎为零</p>
<p>Molte coppie oggi decidono di non avere figli o di avere un figlio unico 今天许多夫妇决定不生孩子或独生子女</p>
<p>per ragioni economiche e di lavoro 出于经济和工作原因</p>
<p>anche perché le donne italiane lavorano sempre più spesso fuori casa 也是因为意大利女性越来越多地在家外工作</p>
<p>Ancora, però, come in passato, i figli sposati spesso vivono vicino ai genitori 然而，与过去一样，已婚子女往往与父母亲近</p>
<p>e i nonni passano molto tempo con i nipoti 祖父母和孙子孙女一起度过了很多时光</p>
<p>particolarmente quando i genitori lavorano 特别是父母的工作（忙的时候）</p>
<p>I figli adulti assistono i genitori quando sono vecchi o non stanno bene 成年子女在年老或不适时帮助父母</p>
<p>Spesso i genitori anziani vanno a vivere con i figli  年长的父母通常会和孩子一起生活</p>
<p>Oggi molte cose stanno cambiando anche nella struttura familiare italiana 今天，即使在意大利家庭结构中，许多事情也在变化</p>
<p>da molti anni c’è il divorzio e nuovi nuclei familiari si formano più facilmente che in passato 已经有很多年了，离婚、新家庭比过去更容易形成</p>
<p>la famiglia però occupa sempre un posto importante nella società italiana 然而，这个家庭在意大利社会中一直占有重要地位</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（三.5）：数字与星期几</title>
    <url>/2019/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89-5%EF%BC%89%EF%BC%9A%E6%95%B0%E5%AD%97%E4%B8%8E%E6%98%9F%E6%9C%9F%E5%87%A0/</url>
    <content><![CDATA[<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">uno</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">due</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">tre</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">quattro</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">cinque</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">sei</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">sette</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">otto</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">nove</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">dieci</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">undici</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">dodici</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">tredici</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">quattordici</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">quindici</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">sedici</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">diciassette</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">diciotto</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">diciannove</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left">venti</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left">ventuno</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left">ventidue</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left">ventitré</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left">ventiquattro</td>
</tr>
</tbody></table>
<h1 id="星期几"><a href="#星期几" class="headerlink" title="星期几"></a>星期几</h1><table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">周1</td>
<td align="left">lunedì</td>
</tr>
<tr>
<td align="left">周2</td>
<td align="left">marterdì</td>
</tr>
<tr>
<td align="left">周3</td>
<td align="left">mercoledì</td>
</tr>
<tr>
<td align="left">周4</td>
<td align="left">giovedì</td>
</tr>
<tr>
<td align="left">周5</td>
<td align="left">venerdì</td>
</tr>
<tr>
<td align="left">周6</td>
<td align="left">sabato</td>
</tr>
<tr>
<td align="left">周7</td>
<td align="left">domenica</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（九）：购物1</title>
    <url>/2019/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A91/</url>
    <content><![CDATA[<h1 id="课文"><a href="#课文" class="headerlink" title="课文"></a>课文</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Anna：Allora, chi compra la torta? 那么，谁买蛋糕？</p>
<p>Mario：La compro io. E i CD? 我会买的。CD怎么样？（谁来带？）</p>
<p>Anna：Anna：Li portano Carlo e Giuseppe. Ma le candeline per la torta, dove sono? 卡洛和约瑟夫带来了。但是蛋糕蜡烛在哪里？</p>
<p>Mario：Eccole! Va bene? Poi stasera scrivo gli inviti e domani li spedisco, d’accordo? 在这里！可以吗？那我今晚写邀请函，明天发出去，好吗？</p>
<p>Anna：Ma allora, invitiamo anche Giovanna e sua sorella? 但是，我们应该邀请乔瓦娜和她姐姐吗？</p>
<p>Mario：Certo che le invitiamo! Chissà che bel regalo fanno a Gabriella. 当然我们邀请他们！我想知道他们给加布里埃拉的礼物多好。</p>
<p>Anna：Sì, sono ricche, ma sono anche molto avare! 是的，他们很富有，但他们也很贪婪（抠门）！</p>
<p>Anna：Al massimo portano una bottiglia di spumante scadente! 他们最多带一瓶快过期的香槟！</p>
<p>Mario：Ma che dici! Fanno sempre dei bei regali! 你在说什么！他们总是送上好礼物！</p>
<p>Anna：Sarà! Intanto, lo spumante buono lo porto io! 或许吧！同时，我会带来好的香槟！</p>
<h2 id="对话2"><a href="#对话2" class="headerlink" title="对话2"></a>对话2</h2><p>Buongiorno signora! 早上好，女士。</p>
<p>Buongiorno! 早上好！</p>
<p>Cosa desidera comprare oggi? 你今天想买什么？</p>
<p>Vorrei delle seppie 我喜欢（想要买）乌贼</p>
<p>Mi dispiace oggi non le abbiamo 对不起，我们今天没有</p>
<p>Però abbiamo i calamari, sono molto freschi 但我们有鱿鱼，它们非常新鲜</p>
<p>No, grazie non li prendo perché non li so cucinare 不，谢谢，我不接受它们，因为我不知道如何烹饪它们</p>
<p>Posso consigliare allora delle cozze da fare gratinate o per gli spaghetti alla marinara? 我可以推荐您买贝类，以制作焗烤或意大利面条吗？</p>
<p>Sì, buona idea le prendo 是的，我认为这是一个好主意</p>
<p>Faccia un chilo abbondante. Poi cosa posso comprare d’altro?  给我称一斤。 那么我还可以买些什么东西呢？</p>
<p>Abbiamo del pesce spada favoloso 我们有很棒的箭鱼</p>
<p>che si può fare alla griglia o alla livornese 可以烤或做成利沃诺风味</p>
<p>Va bene lo prendo 好的，我会接受的</p>
<p>Facciamo mezzo chilo, saranno tre o quattro fette, credo 我想我们制作半公斤，它将是三片或四片</p>
<p>Poi ho le sogliole, ma le ho vendute tutte tranne una 另外我这里还有些鳎鱼，但我把它们全部卖掉只剩一条了</p>
<p>Si può fare impanata. Molto saporito 它可以是面包屑（蘸面包屑）。 非常好吃</p>
<p>Ok! Mi ha convinto la prendo per mio marito 好了！ 你说服了我，我把它买给我的丈夫</p>
<p>e la faccio impanata con una spruzzatura di limone 然后在上面淋点柠檬汁洒上面包屑</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（一）：简单的问候</title>
    <url>/2019/06/30/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E9%97%AE%E5%80%99/</url>
    <content><![CDATA[<h1 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Anna：Buongiorno Professore! 老师您好！</p>
<p>Anna：Mi chiamo Anna. Anna Marchi 我叫Anna。Anna Marchi</p>
<p>Anna：Sono una studentessa italiana 我是一名意大利女学生</p>
<p>Professore：Buongiorno Anna 你好，Anna</p>
<p>Professore：Io sono il tuo professore di cinese 我是你们的中文老师</p>
<p>Professore：Benvenuto alla nostra facoltà’ 欢迎来到我们学院</p>
<h2 id="对话2"><a href="#对话2" class="headerlink" title="对话2"></a>对话2</h2><p>Teresa：Molto piacere. Sono Teresa 很高兴认识你。我是Teresa</p>
<p>Teresa：Sei nuovo qui？ 你是新生吗？</p>
<p>Mario：Si. Sono del primo anno 是的。我今年一年级</p>
<p>Teresa：Qual’e’ il tuo nome e qual’e’ il tuo cognome？你的姓和名分别是什么？</p>
<p>Mario：Il mio nome e’ Mario 我的名字是Mario</p>
<p>Mario：E Rossi e’ il mio cognome 姓Rossi</p>
<p>Teresa：E la tua ragazza？ 你的女朋友呢？</p>
<p>Mario：Si chiama Roberta, e’ cinese di Shanghai 她叫Roberta，她是中国人，来自上海</p>
<p>Mario：Parla pochissimo italiano 不过她只会说一点点意大利语</p>
<p>Mario：Pensa che sia una lingua difficile 她觉得意大利语非常难</p>
<p>Teresa：Pazienza！耐心点吧</p>
<p>Teresa：Chi ben comincia e’ già’ alla meta’ dell’opera 好的开始是成功的一半</p>
<h1 id="打招呼用语"><a href="#打招呼用语" class="headerlink" title="打招呼用语"></a>打招呼用语</h1><p>Ciao 打招呼，你好/再见</p>
<p>Buongiorno 你好，正式/一般场合</p>
<p>Buon pomeriggio 下午好，比较正式</p>
<p>Buonasera 晚上好</p>
<p>Buonasera! Benvenuto al nostro corso d’italiano! 晚上好！欢迎参加意大利语课程！</p>
<p>Salve! 你好！不分场合</p>
<p>Buonanotte 晚安（用于告别）</p>
<p>Buona serata 晚上再见</p>
<p>Buonanotte e sogni d’oro 晚安，做个好梦</p>
<p>Arrivederci 再见</p>
<p>Ci vediamo 回头见</p>
<p>Ci sentiamo 回头电话联系</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>常见结构化思考方法</title>
    <url>/2024/01/06/%E5%B8%B8%E8%A7%81%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E8%80%83%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>关键元素结构化思考（BEST：Basic Elements Structured Thinking）常见以下方法：</p>
<h1 id="用人渠道3B模型"><a href="#用人渠道3B模型" class="headerlink" title="用人渠道3B模型"></a>用人渠道3B模型</h1><ul>
<li>Buy 外部招聘</li>
<li>Build 内部培养</li>
<li>Borrow 人力外包</li>
</ul>
<h1 id="360评估角度"><a href="#360评估角度" class="headerlink" title="360评估角度"></a>360评估角度</h1><ul>
<li>自己评</li>
<li>上司评</li>
<li>下属评</li>
<li>同事评</li>
</ul>
<h1 id="4种读书方法"><a href="#4种读书方法" class="headerlink" title="4种读书方法"></a>4种读书方法</h1><ul>
<li>不求甚解</li>
<li>观其大略</li>
<li>熟读精思</li>
<li>主题阅读</li>
</ul>
<h1 id="4种市场竞争结构"><a href="#4种市场竞争结构" class="headerlink" title="4种市场竞争结构"></a>4种市场竞争结构</h1><ul>
<li>完全竞争</li>
<li>垄断竞争</li>
<li>寡头垄断</li>
<li>完全垄断</li>
</ul>
<h1 id="4种组织文化"><a href="#4种组织文化" class="headerlink" title="4种组织文化"></a>4种组织文化</h1><ul>
<li>部落文化</li>
<li>创新文化</li>
<li>市场文化</li>
<li>等级文化</li>
</ul>
<h1 id="解决冲突4种办法"><a href="#解决冲突4种办法" class="headerlink" title="解决冲突4种办法"></a>解决冲突4种办法</h1><ul>
<li>竞争</li>
<li>包容</li>
<li>妥协</li>
<li>合作</li>
</ul>
<h1 id="4种教养方式"><a href="#4种教养方式" class="headerlink" title="4种教养方式"></a>4种教养方式</h1><ul>
<li>权威型</li>
<li>专断型</li>
<li>放纵型</li>
<li>忽视型</li>
</ul>
<h1 id="6大写作冲突类型"><a href="#6大写作冲突类型" class="headerlink" title="6大写作冲突类型"></a>6大写作冲突类型</h1><ul>
<li>人对人</li>
<li>人对技术</li>
<li>人对自然</li>
<li>人对超自然</li>
<li>人对社会</li>
<li>人对自我</li>
</ul>
<h1 id="6种领导风格"><a href="#6种领导风格" class="headerlink" title="6种领导风格"></a>6种领导风格</h1><ul>
<li>指令型</li>
<li>愿景型</li>
<li>亲和型</li>
<li>民主型</li>
<li>领跑型</li>
<li>辅导型</li>
</ul>
<h1 id="企业业务结构"><a href="#企业业务结构" class="headerlink" title="企业业务结构"></a>企业业务结构</h1><ul>
<li>核心业务</li>
<li>成长业务</li>
<li>新型业务</li>
</ul>
<h1 id="职场关系摸型"><a href="#职场关系摸型" class="headerlink" title="职场关系摸型"></a>职场关系摸型</h1><ul>
<li>职业共同体</li>
<li>利益共同体</li>
<li>事业共同体</li>
<li>命运共同体</li>
</ul>
<h1 id="复盘4步法"><a href="#复盘4步法" class="headerlink" title="复盘4步法"></a>复盘4步法</h1><ul>
<li>回顾目标</li>
<li>评估结果</li>
<li>分析原因</li>
<li>总结经验</li>
</ul>
<h1 id="马斯洛需求理论"><a href="#马斯洛需求理论" class="headerlink" title="马斯洛需求理论"></a>马斯洛需求理论</h1><ul>
<li>自我实现</li>
<li>尊重需求</li>
<li>社交归属需求</li>
<li>安全需求</li>
<li>生理需求</li>
</ul>
<h1 id="项目管理生命周期"><a href="#项目管理生命周期" class="headerlink" title="项目管理生命周期"></a>项目管理生命周期</h1><ul>
<li>启动</li>
<li>规划</li>
<li>执行</li>
<li>监控</li>
<li>关闭</li>
</ul>
<h1 id="6sigma改进流程"><a href="#6sigma改进流程" class="headerlink" title="6sigma改进流程"></a>6sigma改进流程</h1><ul>
<li>定义</li>
<li>测量</li>
<li>分析</li>
<li>改进</li>
<li>控制</li>
</ul>
<h1 id="教育目标"><a href="#教育目标" class="headerlink" title="教育目标"></a>教育目标</h1><ul>
<li>记忆</li>
<li>理解</li>
<li>应用</li>
<li>分析</li>
<li>评价</li>
<li>创造</li>
</ul>
<h1 id="时间管理矩阵"><a href="#时间管理矩阵" class="headerlink" title="时间管理矩阵"></a>时间管理矩阵</h1><ul>
<li>重要</li>
<li>紧急</li>
</ul>
<h1 id="阿里员工评价矩阵"><a href="#阿里员工评价矩阵" class="headerlink" title="阿里员工评价矩阵"></a>阿里员工评价矩阵</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202401062225018.png"></p>
<h1 id="波士顿矩阵"><a href="#波士顿矩阵" class="headerlink" title="波士顿矩阵"></a>波士顿矩阵</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202401062226946.png"></p>
<h1 id="三环理论"><a href="#三环理论" class="headerlink" title="三环理论"></a>三环理论</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202401062228972.png"></p>
<h1 id="杨三角"><a href="#杨三角" class="headerlink" title="杨三角"></a>杨三角</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202401062229120.png"></p>
<h1 id="子绝四"><a href="#子绝四" class="headerlink" title="子绝四"></a>子绝四</h1><ul>
<li>勿意</li>
<li>勿必</li>
<li>勿固</li>
<li>勿我</li>
</ul>
<h1 id="营销4P"><a href="#营销4P" class="headerlink" title="营销4P"></a>营销4P</h1><ul>
<li>Product 产品</li>
<li>Price 价格</li>
<li>Place 渠道</li>
<li>Promotion 促销</li>
</ul>
<h1 id="PDCA"><a href="#PDCA" class="headerlink" title="PDCA"></a>PDCA</h1><ul>
<li>Plan 计划</li>
<li>Do 执行</li>
<li>Check 检查</li>
<li>Act 行动</li>
</ul>
<h1 id="人才管理"><a href="#人才管理" class="headerlink" title="人才管理"></a>人才管理</h1><ul>
<li>选</li>
<li>育</li>
<li>用</li>
<li>留</li>
</ul>
<h1 id="设计四原则"><a href="#设计四原则" class="headerlink" title="设计四原则"></a>设计四原则</h1><ul>
<li>对齐</li>
<li>对比</li>
<li>亲密</li>
<li>重复</li>
</ul>
<h1 id="购买行为AIDA法则"><a href="#购买行为AIDA法则" class="headerlink" title="购买行为AIDA法则"></a>购买行为AIDA法则</h1><ul>
<li>Attention 注意</li>
<li>Interest 兴趣</li>
<li>Desire 欲望</li>
<li>Action 行动</li>
</ul>
<h1 id="企业文化洋葱模型"><a href="#企业文化洋葱模型" class="headerlink" title="企业文化洋葱模型"></a>企业文化洋葱模型</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202401062233838.png"></p>
<h1 id="目标管理SMART法则"><a href="#目标管理SMART法则" class="headerlink" title="目标管理SMART法则"></a>目标管理SMART法则</h1><ul>
<li>Specific 具体</li>
<li>Measurable 可测量</li>
<li>Attainable 可实现</li>
<li>Relevant 相关</li>
<li>Time-bound 时限</li>
</ul>
<h1 id="演讲5元素"><a href="#演讲5元素" class="headerlink" title="演讲5元素"></a>演讲5元素</h1><ul>
<li>金句</li>
<li>案例</li>
<li>数据</li>
<li>比方</li>
<li>幽默</li>
</ul>
<h1 id="波特5力"><a href="#波特5力" class="headerlink" title="波特5力"></a>波特5力</h1><ul>
<li>现有竞争者竞争的能力</li>
<li>潜在竞争者进入的能力</li>
<li>替代品的替代能力</li>
<li>供应商议价能力</li>
<li>买家议价能力</li>
</ul>
<h1 id="高效能人士的7个习惯"><a href="#高效能人士的7个习惯" class="headerlink" title="高效能人士的7个习惯"></a>高效能人士的7个习惯</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/202401062235448.png"></p>
<h1 id="社群运营三近一反"><a href="#社群运营三近一反" class="headerlink" title="社群运营三近一反"></a>社群运营三近一反</h1><ul>
<li>地域相近</li>
<li>年龄相近</li>
<li>兴趣相近</li>
<li>性别相反</li>
</ul>
<h1 id="林彪打仗四快一慢"><a href="#林彪打仗四快一慢" class="headerlink" title="林彪打仗四快一慢"></a>林彪打仗四快一慢</h1><ul>
<li>向敌进军要快</li>
<li>攻击准备要快</li>
<li>扩张战果要快</li>
<li>追击要快</li>
<li>发起总攻要慢</li>
</ul>
<h1 id="麦肯锡信任公式"><a href="#麦肯锡信任公式" class="headerlink" title="麦肯锡信任公式"></a>麦肯锡信任公式</h1><p>$$<br>信任=\frac{自制能力 \times 可靠性 \times 亲近程度}{自我利益取向}<br>$$</p>
<h1 id="稻盛和夫人生成功公式"><a href="#稻盛和夫人生成功公式" class="headerlink" title="稻盛和夫人生成功公式"></a>稻盛和夫人生成功公式</h1><p>$$<br>人生成功=思维方式 \times 能力 \times 热情<br>$$</p>
<h1 id="团队业绩公式"><a href="#团队业绩公式" class="headerlink" title="团队业绩公式"></a>团队业绩公式</h1><p>$$<br>销售业绩=线索数量 \times 漏斗各级转化率 \times 平均客单价<br>$$</p>
<h1 id="SCP模型"><a href="#SCP模型" class="headerlink" title="SCP模型"></a>SCP模型</h1><ul>
<li>Specific 具体细节</li>
<li>Compare 比较</li>
<li>emPower 赋能于人</li>
</ul>
<h1 id="3V-4V模型"><a href="#3V-4V模型" class="headerlink" title="3V/4V模型"></a>3V/4V模型</h1><ul>
<li>Visual 视觉 55%</li>
<li>Volcal 听觉 38%</li>
<li>Verbal 语言 7%</li>
<li>(Value 价值)</li>
</ul>
<h1 id="55387模型"><a href="#55387模型" class="headerlink" title="55387模型"></a>55387模型</h1><p>见3V</p>
<h1 id="WOOP模型"><a href="#WOOP模型" class="headerlink" title="WOOP模型"></a>WOOP模型</h1><ul>
<li>Wish 愿望</li>
<li>Outcome 产出</li>
<li>Obstacle 障碍</li>
<li>Plan 计划</li>
</ul>
<h1 id="OKR模型"><a href="#OKR模型" class="headerlink" title="OKR模型"></a>OKR模型</h1><ul>
<li>Objective</li>
<li>Key result</li>
</ul>
<h1 id="5W2H模型"><a href="#5W2H模型" class="headerlink" title="5W2H模型"></a>5W2H模型</h1><ul>
<li>Why 为什么做</li>
<li>What 做什么</li>
<li>Who 谁来做</li>
<li>When 何时做</li>
<li>Where 何地做</li>
<li>How 怎么做</li>
<li>How much 多少钱</li>
</ul>
<h1 id="SWOT模型"><a href="#SWOT模型" class="headerlink" title="SWOT模型"></a>SWOT模型</h1><ul>
<li>S （strengths）是优势</li>
<li>W （weaknesses）是劣势</li>
<li>O （opportunities）是机会</li>
<li>T （threats）是威胁</li>
</ul>
<h1 id="PEST-PESTEL模型"><a href="#PEST-PESTEL模型" class="headerlink" title="PEST/PESTEL模型"></a>PEST/PESTEL模型</h1><ul>
<li>政治（Political）</li>
<li>经济（Economic）</li>
<li>社会（Social）</li>
<li>技术（Technological）</li>
<li>环境因素(Environmental)</li>
<li>法律因素(Legal)</li>
</ul>
]]></content>
      <tags>
        <tag>结构化思考</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（三）：现在几点了</title>
    <url>/2019/07/01/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%8E%B0%E5%9C%A8%E5%87%A0%E7%82%B9%E4%BA%86/</url>
    <content><![CDATA[<h1 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Francesca：Ciao Marco, scusami, sono in ritardo. C’è un traffico tremendo 你好Marco，不好意思，我来晚了。今天实在是太堵了</p>
<p>Marco：Ciao Francesca, tranquilla 你好Francesca，没关系</p>
<p>Francesca：Oggi è sabato, ci sono troppe foto in circolazione 今天是周六，路上车会很多</p>
<p>Francesca：Il mio orologio non funziona. Sai dirmi che ora è? 我的手表坏了。你知道现在几点了吗？</p>
<p>Marco：Aspetta, il mio è indietro di 5 minuti, quindi sono le quante e un quarto 稍等啊，我的手表大概晚5分钟，那么现在是4点一刻</p>
<p>Francesca：A che ora comincia il film? 电影几点开始？</p>
<p>Marco：Il film comincia alle 5, c’è ancora tempo per un caffè！ 电影5点开始。我们还有时间喝杯咖啡呢！</p>
<p>Francesca：Meno male! Ci vorrebbe proprio un caffè! Vieni con me？ 不错！我现在正需要一杯咖啡！走，咱们一起去？</p>
<p>Marco：Volentieri! 好呀！</p>
<h2 id="对话2"><a href="#对话2" class="headerlink" title="对话2"></a>对话2</h2><p>Marco：Scusi, buongiorno, mi potrebbe dire che ore sono? 不好意思，你好，您能告诉我现在几点了吗？</p>
<p>Francesca：Certo, è l’una meno un quarto 当然，现在1点差一刻</p>
<p>Marco：A che ora arriva il prossimo treno da Firenze? 下一班从佛罗伦萨来的火车几点到呢？</p>
<p>Francesca：Alle 14:45 14:45到</p>
<p>Marco：E a che ora parte l’intercity per Milano? 前往米兰的城际列车几点发车？</p>
<p>Francesca：Alle 16:30, si ricordi che la biglietteria chiude alle 2 16：30发车。还有，您记着，售票处中午2点关门</p>
<p>Marco：È aperta poi il pomeriggio? 下午还开吗？</p>
<p>Francesca：Penso di sì, credo dalle tre alle cinque 应该会开，没记错的话是从三点开到五点</p>
<p>Marco：Grazie mille, molto gentile! 非常感谢，你真好！</p>
<p>Francesca：Prego, buon viaggio! 不用谢，旅途愉快！</p>
<h2 id="问时间"><a href="#问时间" class="headerlink" title="问时间"></a>问时间</h2><p>Che ore sono? 现在几点？</p>
<p>È l’una 现在一点</p>
<p>È l’una e mezzo/mezza 现在一点半</p>
<p>Sono le due in punto 现在两点整</p>
<p>Sono le due precise 现在两点整</p>
<p>È mezzogiorno 现在正午十二点</p>
<p>È mezzanotte 现在半夜十二点</p>
<p>Sono le due e cinque 现在两点五分</p>
<p>Sono le quattro e un quarto 现在四点一刻</p>
<p>Sono le sette e mezzo/mezza 现在七点半</p>
<p>Sono le cinque e quarantacinque 现在五点四十五</p>
<p>Sono le cinque e tre quarti 现在五点三刻</p>
<p>Sono le sei meno un quarto 现在差一刻六点</p>
<p>Sono le dieci e cinquanta 现在十点五十</p>
<p>Sono le undici meno dieci 现在十一点差十分</p>
<p>Mancano dieci minuti alle undici 差十分钟十一点</p>
<p>Sono circa le cinque 现在大约五点</p>
<p>Sono intorno alle quattro 现在四点左右</p>
<p>Sono verso le undici 现在快十一点了</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（二）：Un nuovo inizio一个新的开端</title>
    <url>/2019/07/01/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AUn-nuovo-inizio%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%BC%80%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h1><p>Mario：Ciao Anna, Che sorpresa rivederti in Italia! Anna你好！在意大利见到你真高兴</p>
<p>Mario：Da tanto tempo non ci vediamo! 我们好久不见了！</p>
<p>Anna：Ciao Mario, e’ una sorpresa anche per me! Mario你好！我也很高兴！</p>
<p>Mario：Ma perche’ sei in Italia？ 你怎么会来意大利的？</p>
<p>Anna：Per frequentare il corso di specializzazione all’università’ di Padova 为了来帕多瓦大学上研究生课程</p>
<p>Mario：Sei proprio forte! 你真行</p>
<p>Mario：In bocca al lupo per i tuoi studi！ 祝你学习一切顺利</p>
<p>Anna：Grazie! E’ proprio un nuovo inizio per me! 感谢！对我来说，这的确是一个新的开始！</p>
<p>Mario：Come sono i tuoi compagni di classe 你的同学们怎么样</p>
<p>Mario：E In quanti siese？ 你们一个班多少人？</p>
<p>Anna：Nella mia classe ci sono una ventina di studenti, provenienti da diversi paesi del mondo 在我们班上有二十来个人，他们来自世界的不同国家</p>
<p>Anna：Sono simpatici e molto gentili 人都很好，很友善</p>
<p>Mario：E I tuoi professori? Sono tutti italiani? 你的老师们呢？他们都是意大利人么？</p>
<p>Anna：Si, sono tutti italiani 是的，他们都是意大利人</p>
<p>Anna：E una professoressa parla il cinese 而且有个女老师还会说汉语</p>
<p>Mario：Allora non hai difficolta’ nello studio 那么我估计你在学习上应该就没有什么困难了</p>
<p>Anna：Beh, a dire la verità, all’inizio si’ 哎，说实话，在一开始的时候还是有点难的</p>
<p>Anna：Pensa che di solito abbiamo 4 ore di lezione al giorno 你想想看，我们平时每天都有4节课 </p>
<h2 id="Che-cosa-e-questo-Questo-e-…"><a href="#Che-cosa-e-questo-Questo-e-…" class="headerlink" title="Che cosa è questo? Questo è …"></a>Che cosa è questo? Questo è …</h2><p>Anna：Che cosa è questo? È un panino? 这是什么？是面包么？</p>
<p>Mario：No, questo non è un panino, è una pizza 不，这不是面包，这是披萨</p>
<p>Anna：Che cosa è questa? È una penna? 这是什么？是钢笔吗？</p>
<p>Mario：No, questa non è una penna, è una matita 不，这不是钢笔，是铅笔</p>
<p>Anna：Che cosa è questo? È uno zaino? 这是什么？是背包么？</p>
<p>Mario：No, questo non è uno zaino, è una borsa 不，这不是背包，是挎包</p>
<p>Anna：Cosa è questa? È una poltrona? 这是什么？是扶手椅么？</p>
<p>Mario：No, questa non è uno poltrona. È un divano 不，这不是扶手椅，这是一个长沙发</p>
<p>Anna：Quelli sono dei quaderni? 那些是笔记本吗？</p>
<p>Mario：Sono delle sedie 那些是椅子</p>
<p>Anna：Che cosa sono quelli? 那些是什么？</p>
<p>Mario：Quelli sono dei quaderni 那些是笔记本</p>
<h2 id="Cosa-c’-e’-…-C’-e’-…"><a href="#Cosa-c’-e’-…-C’-e’-…" class="headerlink" title="Cosa c’ e’ … / C’ e’ …"></a>Cosa c’ e’ … / C’ e’ …</h2><p>Mario：Chi è quel ragazzo? 那个男孩是谁？</p>
<p>Anna：È uno studente italiano. 他是一个意大利学生</p>
<p>Mario：Chi è questa signora? 那位女士是谁？</p>
<p>Anna：È la professoressa d’italiano 她是位意大利语老师</p>
<p>Mario：Chi sono quei ragazzi? 那些男生是谁？</p>
<p>Anna：Sono gli studenti del primo anno 他们是一年级学生</p>
<p>Mario：Cosa c’e’ sul banco? 桌子上有什么？</p>
<p>Anna：C’e’ un dizionario 桌子上有一本字典</p>
<p>Mario：Cosa c’e’ nell’armadio? 衣橱里有什么？</p>
<p>Anna：Ci sono vestiti e cappelli 衣橱里有一些衣服和帽子</p>
<p>Mario：Che cosa c’e’ sullo scaffale? 书架上有什么？</p>
<p>Anna：Ci sono dei libri 书架上有一些书</p>
<p>Mario：Che cosa c’e’ nella tua borsa? 你的书包里有什么？</p>
<p>Anna：C’e’ un dizionario 有一本字典</p>
<p>Mario：Ci sono due porte e due finestre nella camera？ 房间里有两扇门，两扇窗么？</p>
<p>Anna：No, ci sono solo una porta e una finestra 不，只有一扇门，一扇窗</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（五）：我的家（中）</title>
    <url>/2019/07/01/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%88%91%E7%9A%84%E5%AE%B6%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Cristina：Ciao Alessandro, come va? 你好Alessandro！最近怎么样？</p>
<p>Alessandro：Oh, ciao Cristina, bene, grazie, e tu? 哦，Cristina你好，我们好，你呢？</p>
<p>Cristina：Al solito. Senti, domenica organizzo una festa a casa mia. Vieni? 我还是老样子。周日我要在家组织个小聚会。你来吗？</p>
<p>Alessandro：Domenica sera… Certo! Solo che non so dove abiti 周日晚上，当然！不过我还不知道你住在哪儿呢</p>
<p>Cristina：In via Nomentana, 891 我住在Nomentana路，891号</p>
<p>Alessandro：Via Nomentana, 891, dov’è? Nomentana路，891号，那是哪儿？</p>
<p>Alessandro：In centro, vicino al Colosseo? 是在市中心，离斗兽场很近？</p>
<p>Cristina：Oh dio no, la Via Nomentana è lunghissima 欧上帝不是的，Nomentana路特别长</p>
<p>Cristina：Abito alla periferia, vicino al Largo Pugliese 我住在郊区，离Pugliese湖很近</p>
<p>Cristina：Se vieni in autobus, prendi il 341 你要是做公交车的话，就坐341路</p>
<p>Alessandro：Ah, ok, il 341. Ma è una casa o un appartamento? 好的，341路。你住的是大房子还是公寓</p>
<p>Cristina：Un appartamento al sesto piano 公寓，6楼</p>
<p>Alessandro：Con ascensore, spero! 用电梯的，希望是！</p>
<p>Cristina：Certo, tranquillo! È un palazzo moderno! 当然啦，放心吧！这是一个现代化的公寓</p>
<p>Alessandro：Com’è questo appartamento? 这个公寓是什么样子的？</p>
<p>Cristina：Non troppo grande, ma direi molto luminoso 不算很大，不过采光很好</p>
<p>Cristina：Il balcone da su un giardino bellissimo 阳台正对着一个非常美的花园</p>
<p>Alessandro：Una bella vista! Beata te! 视野一定很好！你真幸福！</p>
<p>Alessandro：Anch’io penso di cambiare l’appartamento 我也想着换房子呢</p>
<p>Alessandro：Casa mia è troppo piccola. Pago 600 euro d’affitto 我的房子太小了。而且每个月租金要600欧</p>
<p>Alessandro：Tu paghi molto? 你的房租多吗？</p>
<p>Cristina：550 euro al mese 550欧每月</p>
<p>Cristina：Il palazzo è nuovo e l’appartamento è ben ammobiliato perciò ne vale la pena 因为房子是挺新的，而且公寓是精装修的所以还是挺值的</p>
<p>Cristina：Allora, siamo intesi, domenica sera? 好啦，我们说定了，周日晚上见？</p>
<p>Alessandro：D’accordo! Ci vediamo domenica! 好吧！周日见！</p>
<h2 id="短文1"><a href="#短文1" class="headerlink" title="短文1"></a>短文1</h2><p>Le città italiane sono quasi tutte molto antiche 意大利的城市基本上都很古老</p>
<p>e sono costruite intorno a un centro storico che 它们都是围着一个老城区建成的</p>
<p>mantiene in moltissimi casi 在大部分情况下</p>
<p>la vecchia struttura medievale o rinascimentale （这个历史城区保存着）中世纪或者文艺复兴时期的古老建筑</p>
<p>Nei centri storici di molte città 在许多城市的历史中心</p>
<p>sono ancora tante le case costruite negli ultimi secoli 有许多在过去的几个世纪里建成的房子</p>
<p>e che sono ancora abitate 仍然有人居住</p>
<p>Le città si sono sviluppate soprattutto nel secolo scorso 这些城市特别是在上个世纪发展起来的</p>
<p>quando a causa della forte industrializzazione 当时由于强大的工业化</p>
<p>le persone hanno cominciato a lasciare le campagne e a trasferirsi in città  人们开始离开农村，搬到城里</p>
<p>Sono così nate abitazioni sempre più moderne 因此，越来越多的现代住宅诞生了</p>
<p>Si tratta di palazzi con molti piani e tanti appartamenti 这些住房通常是高层建筑，里面有许多公寓</p>
<p>Il palazzo moderno è chiamato anche condominio 现代建筑也被称为共管公寓</p>
<p>Questa parola indica che la proprietà dell’edificio 这个词表示建筑物的所有权</p>
<p>è divisa tra gli abitanti degli appartamenti 在公寓的居民之间分配</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（八）：你住在哪里</title>
    <url>/2019/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E4%BD%A0%E4%BD%8F%E5%9C%A8%E5%93%AA%E9%87%8C/</url>
    <content><![CDATA[<h1 id="课文"><a href="#课文" class="headerlink" title="课文"></a>课文</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Mario：Come sei bella oggi! 你今天真漂亮！</p>
<p>Anna：Perché? Solo oggi sono bella, e il resto della settimana, sono brutta? 为什么呢？ 只有今天我才漂亮，本周余下的时间，我是丑陋的吗？</p>
<p>Mario：Ma intendo che oggi sei particolarmente bella, ti sei tagliata i capelli, vero? 但我的意思是，今天你特别漂亮，你剪了头发，不是吗？</p>
<p>Anna：Scherzavo… 只是在开玩笑…</p>
<p>Anna：Perché ho un appuntamento con il mio fidanzato 因为我跟男朋友约会了</p>
<p>Anna：È un’occasione speciale 这是一个特殊的场合</p>
<p>Mario：Ah, quel bell’uomo, con i suoi belli occhi azzurri? 啊，那个英俊的男人，有着美丽的蓝眼睛？</p>
<p>Mario：Beato lui! Ma da tempo non lo vedo. Come si chiama, a proposito? 祝福他！ 但是我很久没有见过他了。 他叫什么名字？</p>
<p>Anna：Luigi, si chiama Luigi Carruti 路易吉，他的名字是路易吉卡鲁蒂</p>
<p>Mario：Che ne pensi di venire da me questo weekend con lui?  你觉得这个周末和他一起来找我怎么样？</p>
<p>Anna：Ci fa molto piacere passare un po’ di tempo nella tua splendida villa 我们很高兴能在您美丽的别墅中度过一段美好时光</p>
<p>Mario：Grazie del complimento! Ma dai, anche il tuo appartamento è carino 谢谢你的赞美！ 不过，你的公寓也很好</p>
<p>Anna：Magari, però in quel condominio 也许，但在那栋楼里</p>
<p>Anna：il mio appartamentino sembra una vera prigione 我的小公寓看起来像一个真正的监狱</p>
<p>Anna：per non parlare che è anche in affitto! 更不用说它也是出租！</p>
<p>Mario：Ma non esagerare per carità! Allora siamo d’accordo, a che ora venite? 但是不要为了慈善而过火！（你这么讲就太夸张了！） 所以我们同意（说好了），你什么时候来？</p>
<p>Anna：Vengo alle tre, se ti va 我三点去吧，如果你方便的话</p>
<p>Mario：Va benissimo! 当然！</p>
<p>Mario：C’è la partita della Juventus! Non vedo l’ora di parlare di sport con Luigi! 是尤文图斯的比赛！（那会儿有尤文图斯的比赛！） 我迫不及待地想和Luigi一起谈运动！</p>
<p>Anna：L’uomo… Per me, è proprio un mistero, anche il calcio! 男人……对我来说真是个谜，还有足球！</p>
<p>Anna：Altro che passione, è una vera e propria pazzia! Mamma mia! 除了激情，这是一个真正的疯狂！ 妈妈咪！</p>
<h2 id="段落1"><a href="#段落1" class="headerlink" title="段落1"></a>段落1</h2><p>Ciao. Io sono Francesca e questa è la mia casa 你好。 我是弗朗西斯卡，这是我的家</p>
<p>Io abito fuori città in una villetta in campagna con  mio marito e miei due bambini 我和我的丈夫和两个孩子一起住在乡下的小屋里</p>
<p>Abbiamo una piccola casa a due piani, molto comoda e tranquilla 我们有一个两层楼的小房子，非常舒适安静</p>
<p>Davanti alla casa c’è un piccolo prato verde 房子前面有一个小绿草坪</p>
<p>Dietro alla casa c’è un giardino con i fiori 房子后面有一个种满鲜花的花园</p>
<p>Al pianterreno c’è la cucina, il salotto, la sala da pranzo il mio studio e un bagno 一楼设有厨房，起居室，餐厅，书房和浴室</p>
<p>Ci sono anche le scale che portano al secondo piano 还有通往二楼的楼梯</p>
<p>Il secondo piano è composto da tre camere da letto 二楼包括三间卧室</p>
<p>e un grande balcone dal quale posso ammirare un bel panorama 还有一个大阳台，我可以欣赏到美丽的全景</p>
<p>Abbiamo anche la soffitta nella quale mettiamo le cose vecchie 我们还有阁楼，我们把旧东西放在那里</p>
<p>Uscire! Non ci penso proprio, voglio passare più tempo a casa mia  滚出去！（出门！） 我不这么认为，我想在家里多呆一会儿</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（六）：你上课的时候做些什么</title>
    <url>/2019/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E4%BD%A0%E4%B8%8A%E8%AF%BE%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h1><h1 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h1><p>Mario：Uffa! Ho tanto da raccontare alla mia famiglia 嗨呀！我有很多要告诉我的家人</p>
<p>Mario：ma quando mi chiamano, io dormo 但是当他们打电话给我时，我睡觉</p>
<p>Mario：e quando posso chiamarli, loro sono in ufficio 当我打电话给他们时，他们在办公室</p>
<p>Anna：Perché non scrivi un’email? 你为什么不写电子邮件？</p>
<p>Mario：Hai ragione! È più conveniente! C’è un Internet bar qui vicino? 你是对的！ 它更方便！ 附近有网吧吗？</p>
<p>Anna：Certo! È proprio accanto alla caffetteria 当然！ 就在咖啡厅旁边</p>
<p>Mario：La caffetteria ll Greco? 是ll greco咖啡厅么？</p>
<p>Anna：Esatto 正是</p>
<p>Mario：Perfetto! Vieni con me? Prendiamo un caffè! 完美！ 你跟我一起去吗？ 我们来喝杯咖啡！</p>
<p>Anna：Ottima idea! A proposito. Come va il tuo studio di recente? Tutto a posto? 好主意！ 顺便说一下。 你的学习最近怎么样？ 一切都到位了么？</p>
<p>Mario：Il cinese non è mica facile. Io studio solo da un mese 中文并不容易。 我只学了一个月</p>
<p>Anna：Non mi ricordo dove studi, all’Università La Sapienza? 我不记得我在哪里学习,在La Sapienza大学？</p>
<p>Mario：Sì, ma non alla città universitaria 是的，但不是大学城</p>
<p>Mario：È un corso linguistico alla facoltà degli studi orientali 这是东方研究学院的语言课程</p>
<p>Anna：Allora abiti vicino a via Principe Amadeo? 你也住在Principe Amedeo路附近吗？</p>
<p>Mario：Purtroppo no, le case al Vittoriano costano troppo 不幸的是，Vittoriano的房子太贵了</p>
<p>Mario：Abito vicino al Ponte Mammolo 我在Ponte Mammolo附近居住</p>
<p>Mario：Prendo la metro linea B per arrivare alla scuola 我乘坐地铁B线去学校</p>
<p>Anna：Ho capito. I professori, come sono? Sono bravi? 我明白了。 教授们，他们怎么样？ 他们好吗？</p>
<p>Mario：Certo. Insegnano molto bene 当然。 他们教得很好</p>
<p>Mario：Ogni mattina, arrive all’aula molto presto 每天早上,很快到达教室</p>
<p>Mario：e leggo ad alta voce il testo 然后大声朗读课文</p>
<p>Mario：Durante la lezione, ascolto attentamente la spiegazione grammaticale 在课程中，我仔细聆听语法解释</p>
<p>Mario：prendo gli appunti, e partecipo attivamente alla discussione 我做笔记，并积极参与讨论</p>
<p>Mario：Dopo la lezione, faccio seriamente gli esercizi 课后，我认真地做练习</p>
<p>Anna：Bravo! Sono convinta che sei uno dei migliori studenti della classe! 好样的！ 我相信你是班上最好的学生之一！</p>
<p>Mario：Speriamo! Faccio tutto il possibile per migliorare la mia lingua 但愿！ 我尽我所能来改善我的语言</p>
<p>Mario：Come dice il proverbio, chi cerca, trova! 俗话说，那些寻求，找到！（有志者事竟成）</p>
<p>Anna：Avete il lettore cinese, immagino? 你们中有中国读者，对吗？</p>
<p>Mario：Si, c’è una lettrice cinese molto giovane, ha solo 24 anni 是的，有一个非常年轻的中国读者，她才24岁</p>
<p>Mario：Lei parla perfettamente italiano 她讲完美的意大利语</p>
<p>Mario：Quando incontro difficoltà 当我遇到困难时</p>
<p>Mario：chiedo spesso il suo aiuto nello studio, e mi aiuta volentieri 我经常在研究中寻求她的帮助，她心甘情愿地帮助我</p>
<h2 id="对话2"><a href="#对话2" class="headerlink" title="对话2"></a>对话2</h2><p>Quanti anni hai？ 你年纪多大了？</p>
<p>Ho 20 anni 我20岁</p>
<p>Ne ho 20 我有20</p>
<p>Quanti anni ha il ragazzo di Olivia? Olivia的男朋友多大年纪？</p>
<p>Non lo so. Sembra un trentenne 我不知道。大概30岁了</p>
<p>Quanti anni ha il tuo professore 你们老师多大年纪？</p>
<p>Ha 30 anni. È molto giovane. Ma ne dimostra di più 他今年30岁。 他很年轻。 但它显示更多（看起来更老）</p>
<p>Quanti anni ha tua sorella? 你妹妹多大年纪？</p>
<p>Ne ha solo 12. Ma ne dimostra di meno 她只有12岁。但是表现得更少（看起来更小一点）</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（十一）：在网吧</title>
    <url>/2019/07/03/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9C%A8%E7%BD%91%E5%90%A7/</url>
    <content><![CDATA[<h1 id="课文"><a href="#课文" class="headerlink" title="课文"></a>课文</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Mario：Buongiorno! 早上好！</p>
<p>Anna：Buongiorno. Vorrei usare internet 早上好。 我想使用互联网</p>
<p>Mario：Certo. Può usare il computer n°3 当然。 您可以使用计算机＃3</p>
<p>Anna：Come si usa? È la prima volta che vengo ad un internet point 怎么用？ 这是我第一次来到互联网点</p>
<p>Mario：Lei mi dà un documento di identità 给我一张身份证</p>
<p>Mario：io la registro e le do un username e una password 我会录制它并给你一个用户名和密码</p>
<p>Mario：Lei inserisce questi dati prima di accedere ad internet e quando ha finito, clicca su logout 您在访问互联网之前输入此数据，完成后点击注销</p>
<p>Anna：Quanto costa? 它需要多少钱？</p>
<p>Mario：Dipende da quanto tempo usa internet. Il minimo è mezz’ora e costa 1 euro 这取决于你使用互联网的时间。 最短为半小时，费用为1欧元</p>
<p>Anna：Ho visto che ci sono delle cabine telefoniche 我看到有电话亭</p>
<p>Anna：Quanto costa chiamare all’estero? 打电话到国外需要多少钱？</p>
<p>Mario：Dipende dal paese, signora 女士，取决于国家</p>
<p>Mario：Lei compra una scheda e ha un tot di minuti a disposizione 你买了一张卡，有几分钟可用</p>
<p>Anna：Quanto costa una scheda? Mia sorella non sta molto bene e devo telefonarle 一张卡多少钱？ 我姐姐（身体）不是很好，我得给她打电话</p>
<p>Mario：Quella da 60 minuti costa 5.50 euro, quella da 120, ne costa 20 60分钟的费用为5.50欧元，120分钟的费用为20分钟</p>
<p>Anna：Mi dia quella da 20 euro 给我那20欧元（的电话卡）</p>
<p>Mario：Bene, ecco a lei 嗯，这是给你的</p>
<p>Anna：Grazie. Qual è il numero del computer, scusi? 谢谢。 电脑编号是多少，对不起？</p>
<p>Mario：Il 3, da quella parte 3，在那一边</p>
<p>Anna：Grazie mille 非常感谢你</p>
<p>Mario：Prego 请（不客气）</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（十二）：租房子（上）</title>
    <url>/2019/07/03/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%A7%9F%E6%88%BF%E5%AD%90%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="课文"><a href="#课文" class="headerlink" title="课文"></a>课文</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Marta：Buongiorno, mi chiamo Marta, telefono per l’annuncio della camera in affitto 您好，我的名字是Marta，电话是看到了租房间的公告</p>
<p>Giulio：Buongiorno! 你好！</p>
<p>Giulio：Sì, la camera è ancora libera. Sei di Siena? 是的，房间仍然是空的。你是在锡耶纳吗？</p>
<p>Marta：No, di Pescare. Sono appena arrivata a Siena 不，我在Pescare。我刚刚抵达锡耶纳</p>
<p>Giulio：Lavori o studi? 工作还是学习？</p>
<p>Marta：Lavoro, faccio l’infermiera… 我工作，我是一名护士……</p>
<p>Giulio：Vuoi vedere la camera? 想看房间吗？</p>
<p>Marta：Sì certo, la vedo volentieri! È una camera singola, vero? 是的，当然，我心甘情愿地看到它！这是单人间，不是吗？</p>
<p>Marta：Prima vorrei sapere quanto costa 我首先想知道一个月租金多少</p>
<p>Marta：sto facendo un tirocinio in ospedale e non posso spendere molto 我在医院实习，而且我不能花太多钱</p>
<p>Giulio：250 euro. Per una singola non è molto! 250欧元。对于一个单间的它并不多！</p>
<p>Giulio：Sai che in città gli affitti sono abbastanza cari… 你知道在城市租金很贵……</p>
<p>Marta：Le spese sono incluse? 是否包括（全部其他）费用？</p>
<p>Giulio：Tutto incluso eccetto il telefono che è a parte 全包，但电话除外</p>
<p>Marta：Il prezzo va bene 价格还可以</p>
<p>Marta：L’annuncio dice che l’appartamento è vicino all’ospedale 公告称该公寓靠近医院</p>
<p>Marta：Puoi darmi altre informazioni? 你能给我更多信息吗？</p>
<p>Giulio：L’appartamento è vicino a Piazza Libertà a due minuti dall’ospedale 公寓靠近PiazzaLibertà，距医院仅2分钟路程</p>
<p>Giulio：È luminoso, carino 它很明亮，很舒适</p>
<p>Giulio：C’è anche la lavatrice 还配有一台洗衣机</p>
<p>Giulio：In casa ci abito io e una ragazza 我和一个女孩住在房子里</p>
<p>Giulio：che fa la cameriera in un hotel in centro 她是市中心酒店的女服务员</p>
<p>Giulio：È simpatica 她很好（人很好）</p>
<p>Marta：Bene, sembra tutto perfetto… ma cose negative? 好吧，一切看起来都很完美……但是缺点呢？</p>
<p>Giulio：Forse l’unico problema è il rumore del bar di fronte alle nostre finestre 也许唯一的问题是我们窗户前酒吧的噪音</p>
<p>Giulio：Alcune sere, in particolare d’estate 有些晚上，特别是在夏天</p>
<p>Giulio：ci sono ragazzi che parlano forte e a volte cantano fino a tardi… 有些人大声说话，有时候唱到很晚……</p>
<p>Marta：Comunque vorrei vedere l’appartamento 不过我想看看公寓</p>
<p>Marta：perché devo trovare presto una camera 因为我必须尽快找到一个房间</p>
<p>Marta：Ora sono ospite di una collega ma non posso restare a lungo 现在我是同事的客人（在我同事家住），但我不能待久</p>
<p>Marta：perché ci sono già troppe persone in quell’appartamento 因为那间公寓里的人已经太多了</p>
<p>Giulio：Io domani mattina sono a casa dalle 10 in poi. Tu quando sei libera? 明天早上我从上午10点开始回家。你什么时候有空？</p>
<p>Marta：Alle undici e mezza va bene? 十一点半可以吗？</p>
<p>Giulio：Allora ti aspetto in via Dante 37, interno 3 然后我在Dante 37号，3里面等</p>
<p>Marta：Okay, grazie mille, ci vediamo domani! Ma come ti chiami? 好的，非常感谢，明天见！但是你的名字是什么？</p>
<p>Giulio：Oh, scusa non mi sono presentato. Sono Giulio, Giulio Conti 哦对不起，我没有出现。我是Giulio，Giulio Conti</p>
<p>Marta：Ciao Giulio! A domani 好的Giulio！明天见</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（十）：购物2</title>
    <url>/2019/07/03/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A92/</url>
    <content><![CDATA[<h1 id="课文"><a href="#课文" class="headerlink" title="课文"></a>课文</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Anna：Buon giorno signore, desidera? 早上好，先生，想要（买东西）？</p>
<p>Mario：Posso vedere quella giacca Bianca esposta in vetrina? 我可以（看看）在窗口看到那件白色夹克吗？</p>
<p>Anna：Che taglia ha? 多大号？</p>
<p>Mario：La 44 44（号）</p>
<p>Anna：Adesso quarto, Signore, è fortunata: è propio la sua taglia 现在第四（我找找看），先生，很幸运：这是你的身材（尺寸）</p>
<p>Mario：Vediamo… Di che stoffa è? 让我们看看……它有什么材料？</p>
<p>Anna：Di lino: Pratico ed elegante 是亚麻的：实用而优雅</p>
<p>Mario：Mi piace molto. Posso provarla? 我非常喜欢它。 我可以试试吗？</p>
<p>Anna：Certamente, si accomodi in camerino 当然，坐在更衣室里</p>
<p>Mario：Questa giacca mi va benissimo e questo modello mi sta bene 这件夹克非常适合我，这一款式看起来很棒</p>
<p>Anna：Veramente le va a pennello 实际上非常合身</p>
<p>Mario：Quanto costa? 它需要多少钱？</p>
<p>Anna：Con lo sconto del 50%, paga solo 200 euro. Un vero affare! 享受50％的折扣，只需支付200欧元。 一个真正的讨价还价（非常实惠）！</p>
<p>Mario：Va bene la compro. Posso pagare con un assegno? 好吧我买了。 我可以用支票付款吗？</p>
<p>Anna：Senz’altro. Alla cassa prego 当然可以。 请在收银台（付款）</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（十三）：租房子（下）</title>
    <url>/2019/07/03/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E7%A7%9F%E6%88%BF%E5%AD%90%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="课文"><a href="#课文" class="headerlink" title="课文"></a>课文</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Giulio：Ciao Marta. Vieni, entra! 嗨玛塔。来吧，进来！</p>
<p>Marta：Grazie! Tu sei Giulio, vero? 谢谢！你是朱利奥，不是吗？</p>
<p>Giulio：Sì, in persona! Come stai? 是的，亲自（就是本人）！你好吗？</p>
<p>Marta：Tutto bene, grazie! Siena mi piace molto. Mi sembra una città molto vivace 好的，谢谢！我真的很喜欢锡耶纳。在我看来，这是一个非常活跃的城市</p>
<p>Giulio：Sono d’accordo con te! Anche a me piace abitare in questa città 我同意你的看法！我也喜欢住在这个城市</p>
<p>Giulio：Io sono di Sassari ma vivo a Siena da quattro anni 我来自萨萨里，但在锡耶纳住了四年</p>
<p>Giulio：e sempre in questo appartamento 而且总是在这间公寓里</p>
<p>Marta：Davvero? Allora ti trovi bene qui… 真的吗？那你在这里感到很舒服……</p>
<p>Giulio：Hai ragione, mi piace molto questa casa 你是对的，我真的很喜欢这个房子</p>
<p>Giulio：Vieni, ti faccio vedere la camera libera 来吧，我会告诉你空的房间</p>
<p>Marta：Okay, andiamo! 好的，我们走吧！</p>
<p>Giulio：Ecco, questa è la singola 在这里，这是单间</p>
<p>Giulio：C’è un letto da una piazza, un armadio, una scrivania 配有一张单人床，衣柜和书桌</p>
<p>Giulio：c’è una lampada sul comodino 床头柜上有一盏灯</p>
<p>Giulio：È una stanza luminosa perché ci sono due finestre! 这是一个明亮的房间，因为有两个窗户！</p>
<p>Marta：È vero, c’è molta luce anche oggi che il cielo è grigio 确实，即使在今天天空是灰色的时候也会有很多光</p>
<p>Marta：Secondo me fra poco comincia a piovere! 我想它很快就会下雨！</p>
<p>Marta：Senti, ma quanti bagni ci sono? 看，有多少间浴室？</p>
<p>Giulio：Solo uno. Però finora non ci sono stati problemi con gli altri coinquilini 只有一个。但到目前为止，其他室友没有遇到任何问题</p>
<p>Marta：Sì, poi basta avere un po’ di pazienza… C’è la doccia o la vasca da bagno? 是的，然后有点耐心……有淋浴或浴缸吗？</p>
<p>Giulio：La doccia. Vieni, è di qua, guarda! 淋浴。来吧，这就是它，看！</p>
<p>Marta：Bella! E anche il colore del bagno mi piace: io amo il blu! 美丽！我也喜欢浴室的颜色：我喜欢蓝色！</p>
<p>Giulio：E questa è la cucina. È un po’ piccola ma c’è tutto quello che serve: 这是厨房。它有点小，但有你需要的一切：</p>
<p>Giulio：piatti, bicchieri, pentole, frigo, fornelli, e forno ma non funziona bene 盘子，杯子，锅，冰箱，炉子和烤箱，但它不能很好地工作（不一定好用）</p>
<p>Giulio：Sai qui non siamo bravi cuochi… 你知道我们这里不是好厨师……</p>
<p>Giulio：Mangiamo molte insalate e pasta. Tu sai cucinare? 我们吃了很多沙拉和意大利面。你能做饭吗？</p>
<p>Marta：Mah… insomma. Mamma mi ha insegnato qualche ricetta ma… 嗯……简而言之。妈妈教我一些食谱，但……</p>
<p>Giulio：Okay, se vieni a abitare con noi le proveremo le ricette della tua mamma! 好的，如果你和我们住在一起，我们会尝试你妈妈的食谱！</p>
<p>Giulio：E questo è il soggiorno 这是起居室</p>
<p>Giulio：un tavolo con quattro sedie, il televisore, il divano e la poltrona 一张桌子有四把椅子，电视，沙发和扶手椅</p>
<p>Giulio：I mobili sono un po’ vecchi ma ancora in buone condizioni 家具有点旧，但仍然状况良好</p>
<p>Giulio：Insomma, di solito ci troviamo tutti qui per mangiare 总之，我们通常都在这里吃饭</p>
<p>Giulio：e rilassarci dopo il lavoro 下班后放松一下</p>
<p>Marta：Bella, anche questa stanza è luminosa 美丽，这个房间也很明亮</p>
<p>Giulio：Sì, anche qui c’è una finestra grande 是的，即使在这里也有一个大窗户</p>
<p>Marta：E la camera dell’altra ragazza? 而另一个女孩的房间？</p>
<p>Giulio：Anche Tania ha una singola 塔尼亚也有单间</p>
<p>Giulio：È la stanza in fondo al corridoio, quella vicina al bagno 是走廊尽头的房间，靠近浴室的房间</p>
<p>Marta：Senti, l’appartamento mi piace! 看，我喜欢这套公寓！</p>
<p>Giulio：Anche la zona è perfetta perché è molto vicino all’ospedale 该地区（位置）也很完美，因为它离医院很近</p>
<p>Marta：Sì, è vero. E l’atmosfera in casa è divertente! 是的，这是真的。房子里的气氛很有趣！</p>
<p>Marta：Benissimo, allora ho deciso, prendo in affitto la camera 很好，然后我决定，我租房间</p>
<p>Marta：Quando posso venire? 我什么时候能来？</p>
<p>Giulio：Sono contento! Vieni quando vuoi, anche domani 我很高兴！随时随地，即使是明天</p>
<p>Giulio：Intanto dico a Tania che abbiamo trovato una ragazza per la singola 与此同时，我告诉塔尼亚，我们为单间找到了一个女孩</p>
<p>Marta：Okay, allora vengo domani mattina alle 11 好的，所以我明天早上11点来</p>
<p>Marta：Sei in casa o ti devo telefonare un po’ prima? 你在家还是我早点打电话给你？</p>
<p>Giulio：Sarò a casa. Faccio i turni al lavoro e domani lavoro di notte 我会回家。我明天晚上轮流上班，晚上上班</p>
<p>Giulio：Stai tranquilla, ti aspetto qui! 放心，我会在这儿等你！</p>
<p>Marta：Grazie Giulio, sei davvero gentile! A domani… e non vedo l’ora! 谢谢朱利奥，你真的很善良！明天见！我等不及了！</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（零）：入门词汇</title>
    <url>/2019/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E8%AF%8D%E6%B1%87/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>至、到、对、于</td>
</tr>
<tr>
<td>abbiamo</td>
<td>我们、我们的</td>
</tr>
<tr>
<td>abitanti</td>
<td>人</td>
</tr>
<tr>
<td>abiti</td>
<td>衣服、居住、生活</td>
</tr>
<tr>
<td>abitiamo</td>
<td>生活、居住</td>
</tr>
<tr>
<td>abito</td>
<td>连衣裙、住</td>
</tr>
<tr>
<td>accanto</td>
<td>下面</td>
</tr>
<tr>
<td>accordo</td>
<td>协议、合同、协定</td>
</tr>
<tr>
<td>ad</td>
<td>到、至</td>
</tr>
<tr>
<td>aiuta</td>
<td>帮助</td>
</tr>
<tr>
<td>aiutiamo</td>
<td>帮助</td>
</tr>
<tr>
<td>aiuto</td>
<td>帮助</td>
</tr>
<tr>
<td>alla</td>
<td>一、一个</td>
</tr>
<tr>
<td>allegro</td>
<td>快活</td>
</tr>
<tr>
<td>allora</td>
<td>然后、那么、于是、也就是说</td>
</tr>
<tr>
<td>alta</td>
<td>高</td>
</tr>
<tr>
<td>anche</td>
<td>还</td>
</tr>
<tr>
<td>ancora</td>
<td>更、更多、仍然</td>
</tr>
<tr>
<td>ancora</td>
<td>更、进一步讲</td>
</tr>
<tr>
<td>andiamo</td>
<td>让我们去</td>
</tr>
<tr>
<td>anni</td>
<td>年龄、岁</td>
</tr>
<tr>
<td>anziani</td>
<td>老年的</td>
</tr>
<tr>
<td>appartamenti</td>
<td>公寓</td>
</tr>
<tr>
<td>appunti</td>
<td>笔记</td>
</tr>
<tr>
<td>arrivare</td>
<td>取得、到达</td>
</tr>
<tr>
<td>arrive</td>
<td>到达</td>
</tr>
<tr>
<td>ascolto</td>
<td>听</td>
</tr>
<tr>
<td>assistono</td>
<td>帮助</td>
</tr>
<tr>
<td>attentamente</td>
<td>小心地、仔细地</td>
</tr>
<tr>
<td>attivamente</td>
<td>积极地</td>
</tr>
<tr>
<td>aula</td>
<td>教室</td>
</tr>
<tr>
<td>avere</td>
<td>有</td>
</tr>
<tr>
<td>avete</td>
<td>你、你们</td>
</tr>
<tr>
<td>avvocato</td>
<td>律师</td>
</tr>
<tr>
<td>bambine</td>
<td>女孩、少女</td>
</tr>
<tr>
<td>bambini</td>
<td>孩子</td>
</tr>
<tr>
<td>belle</td>
<td>漂亮的</td>
</tr>
<tr>
<td>bene</td>
<td>良好</td>
</tr>
<tr>
<td>bene</td>
<td>良好</td>
</tr>
<tr>
<td>bravi</td>
<td>良好</td>
</tr>
<tr>
<td>calcio</td>
<td>足球</td>
</tr>
<tr>
<td>cambiando</td>
<td>改变</td>
</tr>
<tr>
<td>capito</td>
<td>了解、理解、明白</td>
</tr>
<tr>
<td>carattere</td>
<td>人物、性格</td>
</tr>
<tr>
<td>casalinga</td>
<td>家庭主妇</td>
</tr>
<tr>
<td>case</td>
<td>房子、住房</td>
</tr>
<tr>
<td>c’è</td>
<td>那里（有）</td>
</tr>
<tr>
<td>cerca</td>
<td>搜索、寻找</td>
</tr>
<tr>
<td>certo</td>
<td>当然</td>
</tr>
<tr>
<td>che</td>
<td>那、那个</td>
</tr>
<tr>
<td>chi</td>
<td>谁</td>
</tr>
<tr>
<td>chiamano</td>
<td>通话</td>
</tr>
<tr>
<td>chiamarli</td>
<td>通话</td>
</tr>
<tr>
<td>chiedo</td>
<td>我问、寻求</td>
</tr>
<tr>
<td>ci</td>
<td>那里（有）</td>
</tr>
<tr>
<td>ci</td>
<td>我们</td>
</tr>
<tr>
<td>cognato</td>
<td>姐夫</td>
</tr>
<tr>
<td>come</td>
<td>如何</td>
</tr>
<tr>
<td>con</td>
<td>同、和…一道</td>
</tr>
<tr>
<td>conosciamo</td>
<td>我们知道、我们认识</td>
</tr>
<tr>
<td>convinta</td>
<td>相信</td>
</tr>
<tr>
<td>coppie</td>
<td>对、成对的</td>
</tr>
<tr>
<td>corso</td>
<td>课程</td>
</tr>
<tr>
<td>cose</td>
<td>事</td>
</tr>
<tr>
<td>costano</td>
<td>成本</td>
</tr>
<tr>
<td>crescita</td>
<td>发展、增长</td>
</tr>
<tr>
<td>da</td>
<td>从</td>
</tr>
<tr>
<td>decidono</td>
<td>决定</td>
</tr>
<tr>
<td>degli</td>
<td>从</td>
</tr>
<tr>
<td>della</td>
<td>…中</td>
</tr>
<tr>
<td>demografica</td>
<td>人口</td>
</tr>
<tr>
<td>dice</td>
<td>他说</td>
</tr>
<tr>
<td>difficoltà</td>
<td>困难</td>
</tr>
<tr>
<td>dimostra</td>
<td>节目、表现、展示</td>
</tr>
<tr>
<td>discussione</td>
<td>讨论</td>
</tr>
<tr>
<td>disinvolto</td>
<td>随便、随和</td>
</tr>
<tr>
<td>divisa</td>
<td>分</td>
</tr>
<tr>
<td>divorziata</td>
<td>离婚</td>
</tr>
<tr>
<td>donne</td>
<td>妇女</td>
</tr>
<tr>
<td>dopo</td>
<td>…之后</td>
</tr>
<tr>
<td>dormo</td>
<td>睡觉</td>
</tr>
<tr>
<td>dove</td>
<td>哪里</td>
</tr>
<tr>
<td>durante</td>
<td>在…期间</td>
</tr>
<tr>
<td>economiche</td>
<td>经济</td>
</tr>
<tr>
<td>ed</td>
<td>和</td>
</tr>
<tr>
<td>edificio</td>
<td>建筑</td>
</tr>
<tr>
<td>elementare</td>
<td>初级、初等</td>
</tr>
<tr>
<td>energico</td>
<td>有活力</td>
</tr>
<tr>
<td>eravamo</td>
<td>我们</td>
</tr>
<tr>
<td>esatto</td>
<td>正是、准确、正好</td>
</tr>
<tr>
<td>esercizi</td>
<td>演习、练习</td>
</tr>
<tr>
<td>fa</td>
<td>前、之前</td>
</tr>
<tr>
<td>faccio</td>
<td>我、在下</td>
</tr>
<tr>
<td>facile</td>
<td>容易</td>
</tr>
<tr>
<td>facilmente</td>
<td>容易</td>
</tr>
<tr>
<td>facoltà</td>
<td>学院</td>
</tr>
<tr>
<td>figlio</td>
<td>儿子</td>
</tr>
<tr>
<td>formano</td>
<td>形式、形成</td>
</tr>
<tr>
<td>fra</td>
<td>中</td>
</tr>
<tr>
<td>fratello</td>
<td>兄弟</td>
</tr>
<tr>
<td>fuori</td>
<td>出</td>
</tr>
<tr>
<td>genitori</td>
<td>父母</td>
</tr>
<tr>
<td>già</td>
<td>已经</td>
</tr>
<tr>
<td>giovane</td>
<td>年轻</td>
</tr>
<tr>
<td>giovane</td>
<td>年轻</td>
</tr>
<tr>
<td>gli</td>
<td>该</td>
</tr>
<tr>
<td>grammaticale</td>
<td>语法的</td>
</tr>
<tr>
<td>grande</td>
<td>伟大、大</td>
</tr>
<tr>
<td>ha</td>
<td>它、它有</td>
</tr>
<tr>
<td>hai</td>
<td>您、你们</td>
</tr>
<tr>
<td>ho</td>
<td>我</td>
</tr>
<tr>
<td>i</td>
<td>该、在、对、将</td>
</tr>
<tr>
<td>i</td>
<td>该、在、对、将</td>
</tr>
<tr>
<td>immagino</td>
<td>我想象</td>
</tr>
<tr>
<td>importante</td>
<td>重要</td>
</tr>
<tr>
<td>incontro</td>
<td>会议、遇到</td>
</tr>
<tr>
<td>indica</td>
<td>指示、表示</td>
</tr>
<tr>
<td>infatti</td>
<td>其实</td>
</tr>
<tr>
<td>ingegnere</td>
<td>工程师</td>
</tr>
<tr>
<td>insegna</td>
<td>教书</td>
</tr>
<tr>
<td>insegnano</td>
<td>他们教</td>
</tr>
<tr>
<td>invece</td>
<td>代替为、更改为</td>
</tr>
<tr>
<td>la</td>
<td>该、在、对、将</td>
</tr>
<tr>
<td>lavora</td>
<td>工作的</td>
</tr>
<tr>
<td>lavorano</td>
<td>工作的</td>
</tr>
<tr>
<td>lavoro</td>
<td>工作的</td>
</tr>
<tr>
<td>le</td>
<td>该、在、对、将</td>
</tr>
<tr>
<td>leggere</td>
<td>阅读</td>
</tr>
<tr>
<td>leggo</td>
<td>我读</td>
</tr>
<tr>
<td>lei</td>
<td>您、你们</td>
</tr>
<tr>
<td>lei</td>
<td>她</td>
</tr>
<tr>
<td>letterature</td>
<td>文献、文学</td>
</tr>
<tr>
<td>lettore</td>
<td>读者</td>
</tr>
<tr>
<td>lettrice</td>
<td>读者</td>
</tr>
<tr>
<td>lezione</td>
<td>一课、教训</td>
</tr>
<tr>
<td>linea</td>
<td>线、线性</td>
</tr>
<tr>
<td>lingua</td>
<td>语言</td>
</tr>
<tr>
<td>linguistico</td>
<td>语言</td>
</tr>
<tr>
<td>litighiamo</td>
<td>我们吵架</td>
</tr>
<tr>
<td>lo</td>
<td>该、在、对、将</td>
</tr>
<tr>
<td>lontano</td>
<td>远</td>
</tr>
<tr>
<td>loro</td>
<td>他们的</td>
</tr>
<tr>
<td>lui</td>
<td>他</td>
</tr>
<tr>
<td>ma</td>
<td>但</td>
</tr>
<tr>
<td>marito</td>
<td>丈夫</td>
</tr>
<tr>
<td>materna</td>
<td>保育、养老</td>
</tr>
<tr>
<td>mattina</td>
<td>上午</td>
</tr>
<tr>
<td>me</td>
<td>我</td>
</tr>
<tr>
<td>medico</td>
<td>医生</td>
</tr>
<tr>
<td>meno</td>
<td>少、更少</td>
</tr>
<tr>
<td>mese</td>
<td>月</td>
</tr>
<tr>
<td>metro(metropolitana)</td>
<td>地铁</td>
</tr>
<tr>
<td>mezza</td>
<td>一半</td>
</tr>
<tr>
<td>mica facile</td>
<td>不容易</td>
</tr>
<tr>
<td>miei</td>
<td>我的</td>
</tr>
<tr>
<td>migliorare</td>
<td>提高</td>
</tr>
<tr>
<td>migliori</td>
<td>最好的</td>
</tr>
<tr>
<td>moglie</td>
<td>妻子</td>
</tr>
<tr>
<td>molte</td>
<td>许多、多于</td>
</tr>
<tr>
<td>molti</td>
<td>许多、多于</td>
</tr>
<tr>
<td>molto</td>
<td>很、许多</td>
</tr>
<tr>
<td>morti</td>
<td>死、去世</td>
</tr>
<tr>
<td>ne ho</td>
<td>我有</td>
</tr>
<tr>
<td>nella</td>
<td>在、在…中</td>
</tr>
<tr>
<td>nello</td>
<td>在…中</td>
</tr>
<tr>
<td>nipoti</td>
<td>孙子</td>
</tr>
<tr>
<td>non</td>
<td>不</td>
</tr>
<tr>
<td>nonna</td>
<td>祖母</td>
</tr>
<tr>
<td>nonni</td>
<td>祖父母、爷爷、奶奶等</td>
</tr>
<tr>
<td>numerose</td>
<td>众多、大量</td>
</tr>
<tr>
<td>nuovi</td>
<td>新</td>
</tr>
<tr>
<td>o</td>
<td>或</td>
</tr>
<tr>
<td>occupa</td>
<td>交易、涉及</td>
</tr>
<tr>
<td>oggi</td>
<td>今天</td>
</tr>
<tr>
<td>ogni</td>
<td>每</td>
</tr>
<tr>
<td>ora</td>
<td>小时（单）</td>
</tr>
<tr>
<td>ore</td>
<td>小时（复）</td>
</tr>
<tr>
<td>orientali</td>
<td>东方的</td>
</tr>
<tr>
<td>ottima</td>
<td>优秀、卓越</td>
</tr>
<tr>
<td>palazzo</td>
<td>宫殿、建筑</td>
</tr>
<tr>
<td>parenti</td>
<td>亲属</td>
</tr>
<tr>
<td>parla</td>
<td>说、说话</td>
</tr>
<tr>
<td>parlare</td>
<td>谈话</td>
</tr>
<tr>
<td>partecipo</td>
<td>我参加</td>
</tr>
<tr>
<td>passano</td>
<td>通过、度过</td>
</tr>
<tr>
<td>passato</td>
<td>过去</td>
</tr>
<tr>
<td>per</td>
<td>为了、对于</td>
</tr>
<tr>
<td>per perché</td>
<td>为、因为</td>
</tr>
<tr>
<td>perché</td>
<td>因为</td>
</tr>
<tr>
<td>perfettamente</td>
<td>完美、很好的</td>
</tr>
<tr>
<td>perfetto</td>
<td>完美</td>
</tr>
<tr>
<td>però</td>
<td>然而</td>
</tr>
<tr>
<td>piccolo</td>
<td>小</td>
</tr>
<tr>
<td>più</td>
<td>更、更多</td>
</tr>
<tr>
<td>possibile</td>
<td>可能</td>
</tr>
<tr>
<td>posso</td>
<td>我可以</td>
</tr>
<tr>
<td>posto</td>
<td>地方、位置、地位</td>
</tr>
<tr>
<td>prendiamo</td>
<td>拿、取、采、喝</td>
</tr>
<tr>
<td>prendo</td>
<td>拿、取、采、喝、乘坐</td>
</tr>
<tr>
<td>presto</td>
<td>不久、很快</td>
</tr>
<tr>
<td>proposito</td>
<td>目的、宗旨</td>
</tr>
<tr>
<td>proprietà</td>
<td>属性</td>
</tr>
<tr>
<td>proprio</td>
<td>自己、本身</td>
</tr>
<tr>
<td>proverbio</td>
<td>谚语</td>
</tr>
<tr>
<td>purtroppo</td>
<td>不幸、遗憾的是、可惜</td>
</tr>
<tr>
<td>quando</td>
<td>当</td>
</tr>
<tr>
<td>quanti</td>
<td>多少</td>
</tr>
<tr>
<td>quasi</td>
<td>几乎</td>
</tr>
<tr>
<td>qui</td>
<td>这，这里</td>
</tr>
<tr>
<td>raccontare</td>
<td>告诉</td>
</tr>
<tr>
<td>ragazzo</td>
<td>男孩、男朋友</td>
</tr>
<tr>
<td>ragione</td>
<td>理智、理性</td>
</tr>
<tr>
<td>ragioni</td>
<td>原因</td>
</tr>
<tr>
<td>rare</td>
<td>稀有</td>
</tr>
<tr>
<td>ricordo</td>
<td>记忆</td>
</tr>
<tr>
<td>sa</td>
<td>知道</td>
</tr>
<tr>
<td>scadente</td>
<td>坏的</td>
</tr>
<tr>
<td>scrivere</td>
<td>写</td>
</tr>
<tr>
<td>scrivi</td>
<td>写</td>
</tr>
<tr>
<td>scuola</td>
<td>学校</td>
</tr>
<tr>
<td>sembra</td>
<td>似乎、大概</td>
</tr>
<tr>
<td>sempre</td>
<td>曾经、以往、永远</td>
</tr>
<tr>
<td>seriamente</td>
<td>认真</td>
</tr>
<tr>
<td>siamo</td>
<td>我们</td>
</tr>
<tr>
<td>simpatico</td>
<td>可爱、讨人喜欢</td>
</tr>
<tr>
<td>so</td>
<td>我知道</td>
</tr>
<tr>
<td>società</td>
<td>公司</td>
</tr>
<tr>
<td>solo</td>
<td>只、仅仅</td>
</tr>
<tr>
<td>somiglio</td>
<td>我长得像</td>
</tr>
<tr>
<td>sono</td>
<td>他们是</td>
</tr>
<tr>
<td>sorelle</td>
<td>姐妹</td>
</tr>
<tr>
<td>speriamo</td>
<td>希望、但愿如此</td>
</tr>
<tr>
<td>spesso</td>
<td>常</td>
</tr>
<tr>
<td>spiegazione</td>
<td>说明、解释</td>
</tr>
<tr>
<td>sposata</td>
<td>已婚</td>
</tr>
<tr>
<td>sposati</td>
<td>已婚</td>
</tr>
<tr>
<td>stanno</td>
<td>它们是</td>
</tr>
<tr>
<td>stesso</td>
<td>相同</td>
</tr>
<tr>
<td>straniere</td>
<td>国外的</td>
</tr>
<tr>
<td>struttura</td>
<td>结构</td>
</tr>
<tr>
<td>studio</td>
<td>学习、研究、工作</td>
</tr>
<tr>
<td>suo</td>
<td>它的</td>
</tr>
<tr>
<td>tanti</td>
<td>许多</td>
</tr>
<tr>
<td>tanto</td>
<td>许多</td>
</tr>
<tr>
<td>telefoniamo</td>
<td>通话</td>
</tr>
<tr>
<td>tempo</td>
<td>时间</td>
</tr>
<tr>
<td>testo</td>
<td>文本、课文</td>
</tr>
<tr>
<td>tipo</td>
<td>这种、这样</td>
</tr>
<tr>
<td>tra</td>
<td>之间</td>
</tr>
<tr>
<td>troppo</td>
<td>太、太大、太高</td>
</tr>
<tr>
<td>trova</td>
<td>位于、定位</td>
</tr>
<tr>
<td>tuo</td>
<td>你的</td>
</tr>
<tr>
<td>tutti</td>
<td>所有</td>
</tr>
<tr>
<td>tutto</td>
<td>所有、一切</td>
</tr>
<tr>
<td>ufficio</td>
<td>办公室</td>
</tr>
<tr>
<td>unico</td>
<td>只、仅仅</td>
</tr>
<tr>
<td>unita</td>
<td>联合的、团结的</td>
</tr>
<tr>
<td>va</td>
<td>去</td>
</tr>
<tr>
<td>vanno</td>
<td>去</td>
</tr>
<tr>
<td>vecchi</td>
<td>老人</td>
</tr>
<tr>
<td>vediamo</td>
<td>我们看到</td>
</tr>
<tr>
<td>vicenda</td>
<td>事件、情况</td>
</tr>
<tr>
<td>vieni</td>
<td>来</td>
</tr>
<tr>
<td>vive</td>
<td>生活</td>
</tr>
<tr>
<td>vivere</td>
<td>生活、居住</td>
</tr>
<tr>
<td>vivono</td>
<td>生活、居住</td>
</tr>
<tr>
<td>voce</td>
<td>声音</td>
</tr>
<tr>
<td>volentieri</td>
<td>乐意、甘愿</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>数学符号和公式的英文读法</title>
    <url>/2020/09/18/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%85%AC%E5%BC%8F%E7%9A%84%E8%8B%B1%E6%96%87%E8%AF%BB%E6%B3%95/</url>
    <content><![CDATA[<h1 id="基本数学符号"><a href="#基本数学符号" class="headerlink" title="基本数学符号"></a>基本数学符号</h1><h2 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918155343.png"></p>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918155423.png"></p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918155548.png"></p>
<h2 id="级数表示"><a href="#级数表示" class="headerlink" title="级数表示"></a>级数表示</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918155614.png"></p>
<h2 id="微分和偏微分"><a href="#微分和偏微分" class="headerlink" title="微分和偏微分"></a>微分和偏微分</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918155716.png"></p>
<h2 id="其他数学符号"><a href="#其他数学符号" class="headerlink" title="其他数学符号"></a>其他数学符号</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918160746.png"></p>
<h1 id="进阶数学符号"><a href="#进阶数学符号" class="headerlink" title="进阶数学符号"></a>进阶数学符号</h1><h2 id="代数"><a href="#代数" class="headerlink" title="代数"></a>代数</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918160835.png"></p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918160853.png"></p>
<h2 id="指数对数"><a href="#指数对数" class="headerlink" title="指数对数"></a>指数对数</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918160923.png"></p>
<h2 id="带参函数"><a href="#带参函数" class="headerlink" title="带参函数"></a>带参函数</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918161002.png"></p>
<h2 id="专业课常用符号"><a href="#专业课常用符号" class="headerlink" title="专业课常用符号"></a>专业课常用符号</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918161034.png"></p>
<h2 id="高等数学符号"><a href="#高等数学符号" class="headerlink" title="高等数学符号"></a>高等数学符号</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918161152.png"></p>
<h2 id="线性代数中的矩阵和向量"><a href="#线性代数中的矩阵和向量" class="headerlink" title="线性代数中的矩阵和向量"></a>线性代数中的矩阵和向量</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918161321.png"></p>
<h2 id="其他常用表达式"><a href="#其他常用表达式" class="headerlink" title="其他常用表达式"></a>其他常用表达式</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20200918161352.png"></p>
<blockquote>
<p>Reference:<br><a href="https://mp.weixin.qq.com/s/80Kleej0oO5FNgB10OG8tg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/80Kleej0oO5FNgB10OG8tg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Trick</category>
      </categories>
      <tags>
        <tag>Trick</tag>
      </tags>
  </entry>
  <entry>
    <title>最优化问题简介</title>
    <url>/2021/01/17/%E6%9C%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最优化问题分为连续性的和离散性的。其中离散性的最优化问题又被称为<strong>组合最优化问题</strong>。</p>
<h1 id="数学表达"><a href="#数学表达" class="headerlink" title="数学表达"></a>数学表达</h1><p>$$\begin{split}<br>\min&amp; f(x) &amp;\leftarrow 目标函数 \\<br>s.t.&amp; g(x) \geq 0 &amp;\leftarrow 约束条件 \\<br>&amp; x \in D &amp;\leftarrow 定义域<br>\end{split}$$</p>
<h1 id="常用求解方法"><a href="#常用求解方法" class="headerlink" title="常用求解方法"></a>常用求解方法</h1><ol>
<li>各种规划方法（线性，非线性）</li>
<li><a href="https://imonce.github.io/2019/11/08/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95/">蚁群算法</a></li>
<li><a href="https://imonce.github.io/2019/11/07/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/">遗传算法</a></li>
<li><a href="https://imonce.github.io/2019/11/06/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/">退火算法</a></li>
<li><a href="https://imonce.github.io/2019/11/06/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95/">粒子群算法</a></li>
<li><a href="https://imonce.github.io/2016/12/14/Chainer%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B(%E4%B8%8A)%EF%BC%9A%E5%9C%A8Chainer%E4%B8%AD%E5%81%9A%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/">神经网络</a></li>
<li>搜索算法</li>
<li>拉格朗日松弛算法</li>
<li>近似算法</li>
<li>等</li>
</ol>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reading Note]构造类型论与计算机程序设计</title>
    <url>/2019/08/21/%E6%9E%84%E9%80%A0%E7%B1%BB%E5%9E%8B%E8%AE%BA%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<blockquote>
<p>Taken from：<br><a href="http://xueshu.baidu.com/usercenter/paper/show?paperid=baa0175c22e30823d9b1e14e01cf4141&amp;site=xueshu_se&amp;hitarticle=1" target="_blank" rel="noopener">http://xueshu.baidu.com/usercenter/paper/show?paperid=baa0175c22e30823d9b1e14e01cf4141&amp;site=xueshu_se&amp;hitarticle=1</a></p>
</blockquote>
<h1 id="背景及简介"><a href="#背景及简介" class="headerlink" title="背景及简介"></a>背景及简介</h1><p>构造类型论为计算机科学家提供了一个框架, 以一种优雅和灵活的方式把逻辑和程序设计语言结合起来: 在同一形式系统中, 可以同时表达规约和(函数式语言)程序, 从证明规则可以导出正确的程序, 并验证程序具有某种性质, 从而在同一系统内完成程序的开发和验证。</p>
<h2 id="构造类型轮的理论基础及相互关系"><a href="#构造类型轮的理论基础及相互关系" class="headerlink" title="构造类型轮的理论基础及相互关系"></a>构造类型轮的理论基础及相互关系</h2><h3 id="构造类型论三大理论基石"><a href="#构造类型论三大理论基石" class="headerlink" title="构造类型论三大理论基石"></a>构造类型论三大理论基石</h3><ul>
<li>直觉类型论和构造数学：构造类型论的直接基础是Martin-Lof的直觉类型论，它为构造数学提供直觉解释。它是一个逻辑框架，可以表达和解释其他逻辑或理论，从他的规范化证明立即得出其所表达理论的规范化。与此作用相同的还有T.Coquand和Giared的构造演算。</li>
<li>lambda演算和函数式语言程序设计与实现。lambda演算是函数式语言理论的基础，是函数式程序设计语言的纯理论部分的范式(canonical form)，是由函数抽象和函数应用组成的系统，而这两个特点也是程序设计语言所具有的的共同之处。</li>
<li>证明论和Curry-Howard同态。证明轮中直觉注意逻辑的Gentzen自然演绎、一些自动演绎技术及定理证明技术是构造类型轮实现系统主要使用的技术。</li>
</ul>
<h3 id="相互关系"><a href="#相互关系" class="headerlink" title="相互关系"></a>相互关系</h3><p>Curry-Howard同态是Martin-Lof直觉类型轮的基础：把命题解释称类型（propositions-a-types），或命题作为集合（propositions=as=sets）。利用命题与集合之间的等价，推导的规范化与计算机表示该推导的证明项的值对应。</p>
<p>直觉主义（构造）逻辑和有类型lambda演算在Curry-Howard同态下可以相互转化：直觉逻辑自然演绎的证明可用某种有类型lambda项表示，并且自然演绎的证明规范化与lambda演算的beta变换对应。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190822150526.png"></p>
<h2 id="构造类型轮与程序设计的对应关系"><a href="#构造类型轮与程序设计的对应关系" class="headerlink" title="构造类型轮与程序设计的对应关系"></a>构造类型轮与程序设计的对应关系</h2><p>构造数学和计算机科学有一些基本概念是共同的。Bishop认为构造数学可以作为计算机科学的灵感的重要来源。</p>
<h3 id="构造性证明与计算机程序概念的关系"><a href="#构造性证明与计算机程序概念的关系" class="headerlink" title="构造性证明与计算机程序概念的关系"></a>构造性证明与计算机程序概念的关系</h3><p>构造性的证明与计算机程序概念有密切关系：为构造地证明命题 $(\forall x \in A)(\exists y \in B)P(x,y)$ ，必须要给出函数f，使f应用于A中元素a时，产生B中元素b，使P(a,b)满足。如果P(a,b)描述了一个规约，则证明该命题的函数f就是满足该规约的一个程序。所以，可以吧构造证明本身看成是一个计算机程序，程序的计算过程与证明的规范化对应。正因为构造性证明的这一计算内容，可把类型轮用作一种程序设计语言，而且，由于程序是从他的说明的证明中得到的，类型轮还可以用作程序设计逻辑。</p>
<h3 id="Martin-Lof直觉类型论和计算机程序概念的关系"><a href="#Martin-Lof直觉类型论和计算机程序概念的关系" class="headerlink" title="Martin-Lof直觉类型论和计算机程序概念的关系"></a>Martin-Lof直觉类型论和计算机程序概念的关系</h3><p>类型轮不是基于谓词逻辑，它不再使用Tarski的真值语义，而是利用命题和集合之间的Curry-Howard同态——“命题作为集合”的直觉主义语义来解释逻辑常数。这里，命题被解释称一个集合，若他的元素则被解释称命题的一个证明。根据Kolmogorov对直觉命题的解释，还可以吧集合看成是问题的描述，尤其是把集合看成是程序要解决问题的规约时，集合的元素就是满足该规约的程序。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190822151629.png"></p>
<p>用类型轮进行程序构造的好处是，可以在同一形式系统中表达规约和程序。同时，因为可以从证明规则到处正确的程序，并验证程序具有的性质，所以程序开发的验证也是在同一系统用中完成的。</p>
<h2 id="构造类型轮的一些实现"><a href="#构造类型轮的一些实现" class="headerlink" title="构造类型轮的一些实现"></a>构造类型轮的一些实现</h2><p>类型论的一个主要应用是作为变成逻辑，在其中能够从规约推导出程序。近年来，有几种类型轮的实现：</p>
<ol>
<li>Conell大学的Nurpl</li>
<li>Edinburgh大学的LCF</li>
<li>INRIA的Coq</li>
<li>Edinburgh大学的LEGO</li>
<li>Goteborg的ALF</li>
</ol>
<p>其中，Coq和LEGO是基于构造演算CoC，与Martin-Lof直觉类型论的作用类似，也是提供了一种逻辑框架，利用了把命题解释成集合的思想。两者的区别是：Martin-Lof是直谓的（predicative），而CoC是非直谓的（impredicative）。所谓非直谓的，就是指可以对所有命题的类型Prop进行全称量化来构造类型。因此Martin-Lof直觉类型论只能够结实谓词逻辑，不能解释二姐逻辑，而CoC则能够解释高阶逻辑。</p>
<h1 id="直觉主义（构造）逻辑和经典逻辑"><a href="#直觉主义（构造）逻辑和经典逻辑" class="headerlink" title="直觉主义（构造）逻辑和经典逻辑"></a>直觉主义（构造）逻辑和经典逻辑</h1><p>直觉注意逻辑更多的从证明论和模型论的角度展现逻辑：也就是说，它是一个构造的逻辑（constructive logic）。所谓构造性（constructivity）是指：与经典逻辑只关心公式的真值不同，构造逻辑关注的是实际的证明对象本身。“构造”可以指一个过程以及执行该过程的结果。</p>
<p>两者的主要不同在于语义基础不同。经典逻辑的基础是真值函数的语义：每个命题都为真或者假，这是Tarski语义的本质。而在直觉主义（构造）逻辑中，命题的定义就是把该命题的证明写下来，只有当存在一个与该命题对应的证明对象时，命题才为真，这是Brouwer-Heyting-Kolmogorov基于证明论语义的本质。因此从构造逻辑的角度来说，命题的真等价于命题的可证明性。其余区别见表：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190822154358.png"></p>
<h1 id="Curry-Howard同态"><a href="#Curry-Howard同态" class="headerlink" title="Curry-Howard同态"></a>Curry-Howard同态</h1><p>Curry-Howard同态在有类型的lambda演算和直觉命题逻辑之间建立了密切的关系。</p>
<p>用 $t:\sigma$ 表示项t具有类型 $\sigma$ 。在有类型lambda演算中项的构造有三种：变量（用x，y，z等表示）；抽象（用 $\lambda x.t$ 表示）；应用（用tu表示）。构造项的规则用自然演绎的方式描述如下：</p>
<p>变量形成规则： $\frac{}{x:\sigma \to x:\sigma}$ </p>
<p>抽象形成规则： $\frac{\Gamma,x:\sigma \to t:r}{\Gamma \mapsto (\lambda x.t):\sigma \to r}$ </p>
<p>变量形成规则： $\frac{\Gamma \mapsto t:\sigma \to r \Delta \mapsto u:\sigma}{\Gamma,\Delta \mapsto (tu):\sigma}$ </p>
<p>对上边的规则形式进行改造：</p>
<ol>
<li>把其中的项都去掉</li>
<li>用蕴含符号 $\Rightarrow$ 取代函数符号 $\to$ </li>
<li>用逻辑共识取代项</li>
</ol>
<p>则可以得到直觉逻辑的自然演绎表示</p>
<p>公理： $\frac{}{A\mapsto A}$ </p>
<p>引入规则： $\frac{\Gamma, A \mapsto B}{\Gamma \mapsto A\Rightarrow B}(\Rightarrow I)$ </p>
<p>消除规则： $\frac{\Gamma \mapsto A\Rightarrow B\Delta \mapsto A}{\Gamma,\Delta \mapsto B}(\Rightarrow E)$ </p>
<p>这三条规则分别是直觉逻辑的自然演绎系统的定理、蕴含引入和蕴含消除规则。这就是Curry=Howard同态。</p>
<p>总结：</p>
<ol>
<li>lambda演算的项（或函数式语言程序）的类型与直觉逻辑的公式之间的对应：公式作为类型（formula-as-types）</li>
<li>lambda演算的项与逻辑的证明对应：变量与公理对应，抽象与 $\Rightarrow$ 引入规则对应，应用与 $\Rightarrow$ 消除规则对应。而lambda演算的项就是函数式语言的程序，这就是：证明作为程序（proofs-as-programs）</li>
<li>lambda演算与beta规约的过程与逻辑中的规范化过程对应，这就是计算作为规范化（computation-as-normalization）</li>
</ol>
<h1 id="Martin-Lof直觉类型论概述"><a href="#Martin-Lof直觉类型论概述" class="headerlink" title="Martin-Lof直觉类型论概述"></a>Martin-Lof直觉类型论概述</h1><h2 id="对命题的直觉解释：命题作为集合"><a href="#对命题的直觉解释：命题作为集合" class="headerlink" title="对命题的直觉解释：命题作为集合"></a>对命题的直觉解释：命题作为集合</h2><p>类型论不是基于谓词演算，它的逻辑常熟市通过命题和集合之间的Curry-Howard同态解释的：命题被解释称集合，集合的元素代表了该命题的证明。</p>
<p>1）逻辑蕴含： $A \supset B$ </p>
<ul>
<li>$A \supset B$ 的证明是一个函数（方法，证明）。对A的每一证明，给出B的一个证明。</li>
<li>$A \supset B$ 等价于 $A \to B$ ，是从A到B的函数的集合。</li>
<li>集合 $A \to B$ 中元素都是函数，形式为 $\lambda x.b$ ，其中 $b\in B$ ，并且b可能依赖于 $x \in A$ 。</li>
</ul>
<p>2）逻辑合取： $A \wedge B$ </p>
<ul>
<li>$A \wedge B$ 的证明是一个有序组，其中第一分量是A的每一证明，第二分量是B的一个证明。</li>
<li>$A \wedge B$ 等价于 $A \times B$ ，是A与B的笛卡尔积。</li>
<li>集合 $A \times B$ 中元素的形式为(a,b)，其中 $a\in A, b \in B$ 。</li>
</ul>
<p>3）逻辑析取： $A \vee B$ </p>
<ul>
<li>一个析取是构造地真，当且仅当我们能够证明析取式之一。所以， $A \vee B$ 的证明包括：A或者B的一个证明，加上有关到底是A还是B的证明的信息。</li>
<li>$A\vee B$ 等价于 A + B，是A与B的不想交并。</li>
<li>集合A+B中的元素的形式为inl(a)或inr(b)，其中 $a\in A, b \in B$ .</li>
</ul>
<p>4）逻辑非： $\not A$ </p>
<ul>
<li>命题A的反可以定义为： $\not A \equiv A \supset \perp$ 。其中 $\perp$ 代表荒谬（absurdity）。即一个没有证明的命题。如果用 $\Phi$ 代表空集，则利用逻辑蕴含的解释，有 </li>
<li>$\not A$ 等价于 $A \to \Phi$ 。</li>
</ul>
<p>为了对用两次定义的命题进行解释，我们来定义在集合族上的操作，即集合B依赖于集合A中的元素x。用 $B[x\leftarrow a]$ 表示把B中所有自由出现的x都用a替换后得到的表达式。</p>
<p>5）存在量词： $(\exists x \in A)B$ </p>
<ul>
<li>$(\exists x \in A)B$ 的证明包括：集合A的一个元素的构造，以及 $B[x\leftarrow a]$ 的一个证明。因此， $(\exists x \in A)B$ 的证明是一有序对，其第一分量是集合A的一个元素，第二分量是  $B[x\leftarrow a]$ 的一个证明。</li>
<li>$(\exists x \in A)B$ 等价于 $(\Sigma x\in A)B$ ， $(\Sigma x\in A)B$ 是一集合族的不相交并（disjoint union）。</li>
<li>集合中 $(\Sigma x\in A)B$ 中元素的形式为序偶  &lt;a,b&gt; ，其中 $a\in A, b \in B[x \leftarrow a]$。</li>
</ul>
<p>6）全称量词： $(\forall x\in A)B$ </p>
<ul>
<li>$(\forall x \in A)B$ 的证明是一个函数（方法，程序），对于集合A中的每一个元素a给出 $B[x\leftarrow a]$ 的一个证明。因此，</li>
<li>$(\forall x \in A)B$ 等价于 $(\prod x\in A)B$ ， $(\prod x\in A)B$ 是一集合族的笛卡尔积。</li>
<li>集合中 $(\prod x\in A)B$ 中元素都是函数，当应用与集合A中元素a时，给出集合 $B[x\leftarrow a]$ 中的一个元素。该集合中的元素形式为 $\lambda x.b$ ，其中 $b\in B$ ，并且b和B都可能依赖于 $x\in A$ 。</li>
</ul>
<h2 id="类型的概念"><a href="#类型的概念" class="headerlink" title="类型的概念"></a>类型的概念</h2><p>类型轮中最基本的概念是类型的概念。对类型的直觉解释需要两方面的内容：</p>
<ol>
<li>说明类型的对象是什么</li>
<li>说明该类型的两个对象相等的意义</li>
</ol>
<p>类型论中有四种断言形式，对他们的直觉解释如下：</p>
<ol>
<li>A type，A是一个类型。</li>
<li>A=B，A和B是相等的类型。</li>
<li>$a\in A$ ，a是类型A中的一个对象。</li>
<li>$a=b\in A$ ，a和b是类型A中的相等对象</li>
</ol>
<h2 id="假言断言"><a href="#假言断言" class="headerlink" title="假言断言"></a>假言断言</h2><p>前边的四种断言不依赖于任何假设，假言断言（hypothetical judgement）通常都有一个上下文（context）.</p>
<p>下面我们只对当上下文的长度为1分别对前面4中断言的假言形式进行解释，其他可以通过归纳解释得到：上下文长度为0时，就是上一节的情况。以下使C是任意不依赖于任何假设的类型。</p>
<ol>
<li>A type $[x\in C]$ ，当 $[x\in C]$ 时，A是一类型</li>
<li>A = B $[x\in C]$ ，A和B是类型C上相等的类型族</li>
<li>$a\in A[x\in C]$ ，a是依赖于 $[x\in C]$ 的类型A中的一个对象</li>
<li>$a=b\in A[x\in C]$ ，a和b是依赖于 $[x\in C]$ 的类型A中的相等对象</li>
</ol>
<h2 id="类型组成"><a href="#类型组成" class="headerlink" title="类型组成"></a>类型组成</h2><ul>
<li>产生基本类型的方式<ul>
<li>类型Set</li>
<li>如果 $A\in Set$ ，A中元素的类型： $\frac{A\in Set}{El(A)type}$ </li>
</ul>
</li>
<li>引入其他类型的方式<ul>
<li>函数类型： $\frac{AtypeBtype[x\in A]}{(x\in A)Btype}$ ，相等函数类型 $\frac{A=A’B=B’[x\in A]}{(x\in A)B=(x\in A’)B’}$ <ul>
<li>把函数应用于对象： $\frac{c\in (x\in A)Ba\in A}{c(a)\in B[x\leftarrow a]}$ ， $\frac{c\in (x\in A)Ba=b\in A}{c(a)=c(b)\in B[x\leftarrow a]}$   </li>
<li>引入函数的基本方法是对表达式共的一个变量进行抽象。： $\frac{b\in B[x\in A]}{[x]b\in (x\in A)B}$ </li>
</ul>
</li>
<li>归纳定义的集合</li>
</ul>
</li>
</ul>
<h2 id="常数的引入"><a href="#常数的引入" class="headerlink" title="常数的引入"></a>常数的引入</h2><p>新的常数：</p>
<ul>
<li>定义常数（defined constant）：用其他对象来定义的<ul>
<li>显示定义常数：给出明确定义，实际上是某个类型中对象的简写</li>
<li>隐式定义常数：用于说明当把它应用于它的参数后，得到什么定义者</li>
</ul>
</li>
<li>原始常数（primitive constant），值就是常数本身，只有一个类型，没有定义，也成为构造子（constructor），如自然数集合的定义就是通过声明以下常数：<ul>
<li>$N\in Set$ </li>
<li>$succ\in (N)N$ </li>
<li>$0\in N$ </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Type Theory</tag>
        <tag>类型论</tag>
      </tags>
  </entry>
  <entry>
    <title>浙大邮箱第三方登录设置方法</title>
    <url>/2019/03/05/%E6%B5%99%E5%A4%A7%E9%82%AE%E7%AE%B1%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>第三方邮箱客户端（outlook、foxmail、各种手机自带邮箱APP等）可以选择IMAP或者POP3两种协议中的任意一种进行设置，设置方法如下：</p>
<h1 id="客户端使用IMAP协议设置方法："><a href="#客户端使用IMAP协议设置方法：" class="headerlink" title="客户端使用IMAP协议设置方法："></a>客户端使用IMAP协议设置方法：</h1><p>接收邮件服务器：imap.zju.edu.cn 端口：143  使用SSL端口：993</p>
<p>发送邮件服务器：smtp.zju.edu.cn 端口：25   使用SSL端口：994</p>
<p>  </p>
<h1 id="客户端使用POP3协议设置方法："><a href="#客户端使用POP3协议设置方法：" class="headerlink" title="客户端使用POP3协议设置方法："></a>客户端使用POP3协议设置方法：</h1><p>接收邮件服务器：pop3.zju.edu.cn 端口：110  使用SSL端口：995</p>
<p>发送邮件服务器：smtp.zju.edu.cn 端口：25   使用SSL端口：994</p>
<blockquote>
<p><strong>note:</strong> 如果一种不行就试一下另一种，再不行重启试试<br>怎么都不行的时候可能是网络问题，本人的mac用实验室的wifi可以上网却连不上邮箱，但是手机热点就可以</p>
</blockquote>
]]></content>
      <tags>
        <tag>浙大邮箱</tag>
        <tag>第三方登录</tag>
        <tag>设置方法</tag>
      </tags>
  </entry>
  <entry>
    <title>米兰攻略（一）：缘起、准备</title>
    <url>/2019/07/08/%E7%B1%B3%E5%85%B0%E6%94%BB%E7%95%A5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BC%98%E8%B5%B7%E3%80%81%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>现在的年轻人大多更加讲究效率，对于为什么、怎么回事问的少了，只为了更加关注于事情本身，任何细节都不愿放过：即便要靠脑补来填充。而很多故事的有趣之处，其实也就是在缘起之处，这里是万事之始，这里种下了一切的因缘。</p>
<p>本人男，直博二年级在读，学校姑且叫Z大好了。博士毕业，无非三点：论文、论文、还有论文。第一个论文是SCI（主要是期刊论文），第二个论文是EI（主要是会议论文），第三个论文叫做“优秀的、有一定影响力的工作”。为了能够按时毕业，我投稿了专业领域的一个知名会议：E会。投稿的另一个原因是，E会2019年的会址在米兰，我还未曾去过。我的导师也未曾去过。</p>
<p>不幸的是，由于动机不纯导致文章灌水灌的有失水准，我的文章被reject。故事本应结束，导师却凌空一指：转投E会旗下的workshop。所谓workshop，可以看作一个会议旗下的子会，虽然没什么影响力，又对博士毕业、教授职称之类的没什么帮助，好在与E会共享会址和所有安排，于外可以交流学习、于内可以交差报销。于是，我的文章经过一轮大修，不出意外的中了一个workshop，H子会。</p>
<p>中了之后我的第一反应是：可惜了我的文章。第一次被拒我是认的，写的仓促，实在垃圾。大修之后我感觉这篇文章火候已经小成，只中一篇workshop，未免有些可惜了。</p>
<p>算了，为了米兰，算了。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>说来惭愧，从进入大学开始，便一直叫嚣要出国旅游一趟，却由于种种原因一直未能成行。</p>
<p>这句话我原本深信不疑，直到我真的要出国了，我才发觉其中的问题。种种原因其实只有一个：怂。没错，要出国了，要去意大利了，要去米兰了，我怂了。</p>
<p>有人说欧洲资本主义国家先进发达，吐槽国内保守落后，但是真的要出国了，才觉得国内真乃世外桃源。手机支付暂且不谈，主要是安全问题，意大利的治安在欧洲算是一般，但依然不安全。问起身边的人才知道，国内的两位老师日前去意大利访学，在街头被公然抢包；学生旅游，被偷包偷钱的更是不胜枚举。离别之时才想起家里的好，多年在外求学，如今终于要念起乡愁了。</p>
<p>再者就是意大利并不怎么说英语，主要还是讲意大利语。这就麻烦了，都说学好英国话，走遍天下都不怕，意大利与英国不远，语言却已然不同。好在我天赋异禀，出行一周前，只花了4天便入门了意大利语，又花了3天将其忘得一干二净。到了意大利，英语，真香。</p>
<p>为了这8天7夜的<del>旅游</del>交流学习，经过一通调查，我带了</p>
<ul>
<li>剃须刀</li>
<li>两部手机及充电器：一部手机放国外的流量卡</li>
<li>充电宝</li>
<li>一个意标插口转换器</li>
<li>国标插线板</li>
<li>几套衣服</li>
<li>拖鞋、牙刷牙膏护肤品：意大利很多酒店都不提供，最好还是自己带上</li>
<li>护照、身份证+护照申请各项材料：入境的时候可能会看</li>
<li>国外信用卡：大部分地方都是可以刷信用卡的</li>
<li>400欧元：所有地方都收现金，不需要给小费</li>
</ul>
<p>申请签证就不细讲了，意大利大使馆官网上有一个清单，照着准备就是。大学生可以不准备父母的关系证明，但是银行卡上要存个2、3万，让签证官相信你有钱回来。</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>米兰</tag>
        <tag>攻略</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学三大相关性系数:Pearson,Spearman,Kendall</title>
    <url>/2020/08/04/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%89%E5%A4%A7%E7%9B%B8%E5%85%B3%E6%80%A7%E7%B3%BB%E6%95%B0-pearson-spearman-kendall/</url>
    <content><![CDATA[<h1 id="Pearson"><a href="#Pearson" class="headerlink" title="Pearson"></a>Pearson</h1><p>要理解Pearson相关系数，首先要理解协方差（Covariance），协方差是一个反映两个随机变量相关程度的指标，如果一个变量跟随着另一个变量同时变大或者变小，那么这两个变量的协方差就是正值，反之相反，公式如下： </p>
<p>$$<br>\operatorname{cov}(x, y)=\frac{\sum_{i=1}^{n}\left(x_{i}-x_{\mu}\right)\left(y_{i}-y_{\mu}\right)}{n-1}<br>$$</p>
<p>虽然协方差能反映两个随机变量的相关程度（协方差大于0的时候表示两者正相关，小于0的时候表示两者负相关），但是协方差值的大小并不能很好地度量两个随机变量的关联程度。</p>
<p>为了更好的度量两个随机变量的相关程度，引入了Pearson相关系数，其在协方差的基础上除以了两个随机变量的标准：</p>
<p>$$<br>\delta^{2}=\frac{\sum_{i=1}^{n}\left(x_{i}-x_{\mu}\right)}{n}<br>$$</p>
<p>容易得出，pearson是一个介于-1和1之间的值，当两个变量的线性关系增强时，相关系数趋于1或-1；当一个变量增大，另一个变量也增大时，表明它们之间是正相关的，相关系数大于0；如果一个变量增大，另一个变量却减小，表明它们之间是负相关的，相关系数小于0；如果相关系数等于0，表明它们之间不存在线性相关关系。</p>
<p>$$<br>p_{x, y}=\operatorname{cor}(x, y)=\frac{\operatorname{cov}(x, y)}{\delta x \delta y}=\frac{E\left[\left(x-x_{\mu}\right)\left(y-y_{\mu}\right)\right]}{\delta x \delta y}<br>$$</p>
<h1 id="Spearman"><a href="#Spearman" class="headerlink" title="Spearman"></a>Spearman</h1><p>斯皮尔曼相关性系数，通常也叫斯皮尔曼秩相关系数。“秩”，可以理解成就是一种顺序或者排序，那么它就是根据原始数据的排序位置进行求解，这种表征形式就没有了求皮尔森相关性系数时那些限制。下面来看一下它的计算公式：</p>
<p>$$<br>\rho_{s}=1-\frac{6 \sum d_{i}^{2}}{n\left(n^{2}-1\right)}<br>$$</p>
<p>计算过程就是：<br>对两个变量（X，Y）的数据进行排序（统一用升序或降序），每个变量在排序之后的位置即为其秩次（X’, Y’），原始位置相同的X，Y的秩次X’, Y’的差值即为 $d_i$ 。n是变量的个数（或者对数）。</p>
<h1 id="Kendall"><a href="#Kendall" class="headerlink" title="Kendall"></a>Kendall</h1><p>Kendall相关系数是对于定类变量的统计，之前讲pearson是对定距变量的统计，而spearman是对定序变量的统计。</p>
<p>Kendall相关系数的计算公式：</p>
<p>$$<br>Kendall1=\frac{C-D}{\frac{1}{2} N\left(N-1\right)}<br>$$</p>
<p>另一个计算公式：</p>
<p>$$<br>Kendall2=\frac{C-D}{\sqrt{\left(N_{3}-N_{1}\right)\left(N_{3}-N_{2}\right)}}<br>$$</p>
<p>其中C表示的是两变量中一致性元素的对数，D是不一致性元素的对数。<br>举例来讲，如果要计算相关性的数据是一个nx2的矩阵M，那么如果 $m_{i,1}$ &gt; $m_{j,1}$ 且 $m_{i,2} &gt; m_{j,2}$，或 $m_{i,1} &lt; m_{j,1}$ 且 $m_{i,2} &lt; m_{j,2}$ ，则称 $m_i$ 和 $m_j$ 构成一个一致性元素对。反之则为不一致性元素对。</p>
<p>第一个和第二个公式的区别在于，当两变量任何一个中都不存在相同元素时用公式1，两变量中任何一个中存在相同元素用2。</p>
<p>其中N为样本数量。再说N3，N2，N1。</p>
<p>$$<br>\mathrm{N} 3=\frac{1}{2} N(N-1)<br>$$</p>
<p>N2、N1就比较复杂，它们各指向一个变量，但是计算方法一致：</p>
<p>$$<br>\mathrm{N} 2=\sum_{i=1}^{s} \frac{1}{2} v_{i}\left(v_{j}-1\right)<br>$$</p>
<p>s是指该变量中拥有相同元素的小集合的个数，v就是每个集合中元素的个数。</p>
<blockquote>
<p>Reference:<br><a href="https://blog.csdn.net/ichuzhen/article/details/79535226" target="_blank" rel="noopener">https://blog.csdn.net/ichuzhen/article/details/79535226</a><br><a href="https://blog.csdn.net/zmqsdu9001/article/details/82840332?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight" target="_blank" rel="noopener">https://blog.csdn.net/zmqsdu9001/article/details/82840332?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight</a><br><a href="https://www.jianshu.com/p/93fd5ab408ae" target="_blank" rel="noopener">https://www.jianshu.com/p/93fd5ab408ae</a></p>
</blockquote>
]]></content>
      <categories>
        <category>统计学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
        <tag>相关性分析</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机应用数学学习笔记（一）：背景知识</title>
    <url>/2019/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h1><p>计算机科学现在面临的最大挑战是大数据，所有的大公司都在收集数据。为了构建数据化的世界和生活，需要做许多枯燥乏味的工作。需要处理现有的数据然后在此基础上构造新的数据。</p>
<h1 id="纯步骤合成vs纯数据"><a href="#纯步骤合成vs纯数据" class="headerlink" title="纯步骤合成vs纯数据"></a>纯步骤合成vs纯数据</h1><p>纯步骤合成：紧凑，但依赖人造，很少在实践中使用</p>
<p>纯数据：质量更高，但是灵活性更低</p>
<h1 id="贝叶斯推理"><a href="#贝叶斯推理" class="headerlink" title="贝叶斯推理"></a>贝叶斯推理</h1><ul>
<li>不确定性的原理建模</li>
<li>非结构化数据的通用模型</li>
<li>不确定性下数据拟合与分析的有效算法</li>
</ul>
<p>但目前它一直被用作黑盒</p>
<h1 id="数据驱动建模"><a href="#数据驱动建模" class="headerlink" title="数据驱动建模"></a>数据驱动建模</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190610154019.png"></p>
<h1 id="数据驱动的相关技术"><a href="#数据驱动的相关技术" class="headerlink" title="数据驱动的相关技术"></a>数据驱动的相关技术</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190610154122.png"></p>
<h1 id="数据驱动系统"><a href="#数据驱动系统" class="headerlink" title="数据驱动系统"></a>数据驱动系统</h1><p>学习系统不是直接编程来解决问题，而是根据以下内容开发自己的程序：</p>
<ul>
<li>他们应该如何表现的例子</li>
<li>从尝试解决问题的试错经验中</li>
</ul>
<p>与标准CS不同，要实现未知功能，只需要访问样本输入输出对（训练样本）</p>
<h1 id="学习问题的主要分类"><a href="#学习问题的主要分类" class="headerlink" title="学习问题的主要分类"></a>学习问题的主要分类</h1><p>根据培训示例中的可用信息，学习场景会有所不同</p>
<ul>
<li>监督学习：纠正输出可用<ul>
<li>分类：1-of-N output（语音识别，对象识别，医学诊断）</li>
<li>回归：实际值输出（预测市场价格、温度）</li>
</ul>
</li>
<li>无监督学习：无反馈，需要构建良好输出的度量<ul>
<li>聚类：将参考技术的数据分类为连贯的“聚类”</li>
<li>新颖性检测：检测新的偏离正常的数据点</li>
</ul>
</li>
<li>强化学习：尺度反馈，可能是临时的</li>
</ul>
<h1 id="更多的应用场景"><a href="#更多的应用场景" class="headerlink" title="更多的应用场景"></a>更多的应用场景</h1><ul>
<li>时间序列分析</li>
<li>降维</li>
<li>模型选择</li>
<li>通用方法</li>
<li>图形化模型</li>
</ul>
<h1 id="为什么需要数据驱动的方法"><a href="#为什么需要数据驱动的方法" class="headerlink" title="为什么需要数据驱动的方法"></a>为什么需要数据驱动的方法</h1><ul>
<li>开发增强型计算机系统<ul>
<li>自动适应用户，自定义</li>
<li>经常很难获得必要的知识</li>
<li>在大型数据库中离线发现模式（数据挖掘）</li>
</ul>
</li>
<li>提高对人类、生物学习的理解<ul>
<li>计算分析提供了具体的理论，预测</li>
<li>发掘在学习过程中分析大脑活动的方法</li>
</ul>
</li>
<li>时机不错<ul>
<li>越来越多的可用数据</li>
<li>廉价而强大的计算机</li>
<li>一套算法，理论已经发展</li>
</ul>
</li>
</ul>
<h1 id="成功的数据驱动算法会是什么"><a href="#成功的数据驱动算法会是什么" class="headerlink" title="成功的数据驱动算法会是什么"></a>成功的数据驱动算法会是什么</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190610155242.png"></p>
]]></content>
      <categories>
        <category>计算机应用数学</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机应用数学</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]知识图谱应用需要了解的16个知识</title>
    <url>/2019/08/08/%E8%BD%AC-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%BA%94%E7%94%A8%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%8416%E4%B8%AA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="1、知识图谱系统的关键特性有哪些？"><a href="#1、知识图谱系统的关键特性有哪些？" class="headerlink" title="1、知识图谱系统的关键特性有哪些？"></a>1、知识图谱系统的关键特性有哪些？</h1><p>1.当然是可视化展示，知识图谱的魅力之一就是让人直观的看到多实体之间的关系，能用图标示的就不要哔哔</p>
<p>2.多种服务提供方式，有些服务使用方，不需要图，那么可能通过api或者批量文件的方式比较合适。所以从系统建设角度来看，最好能提供多样的服务对接方式，满足前端服务使用方的不同需要，发挥系统价值，是值得考虑的地方。</p>
<p>3.查询速度，在用户进行图操作，例如实体查询、关系推演扩展时，系统响应时间应该较低，避免大并发情况下用户体验的降低。</p>
<p>数据建模、批量时间相对来说，外界感知不到，因此不那么重要。</p>
<h1 id="2、知识图谱适用场景有哪些？"><a href="#2、知识图谱适用场景有哪些？" class="headerlink" title="2、知识图谱适用场景有哪些？"></a>2、知识图谱适用场景有哪些？</h1><p>主要涉及关系分析的场景，利用账户、自然人或者资金交易形成的关系来判定结果是否可用时，比如担保圈、分析实际控制人、实际受益人、识别冒名贷款。而且通常，数据分析的深度在3度到5度，才能体现出优势。</p>
<p>分析深度小于3度，与传统关系型数据库没有太大差别，大于5度有可能引入较多的噪音数据。当然不排除某些场景下分析5度以上数据的可能性。</p>
<h1 id="3、有没有业务场景是只能用知识图谱实现的？而其他技术方法无法实现？"><a href="#3、有没有业务场景是只能用知识图谱实现的？而其他技术方法无法实现？" class="headerlink" title="3、有没有业务场景是只能用知识图谱实现的？而其他技术方法无法实现？"></a>3、有没有业务场景是只能用知识图谱实现的？而其他技术方法无法实现？</h1><p>从技术角度考虑，应该没有，有的是效率孰高孰低、开发成本孰高孰低。</p>
<h1 id="4、知识图谱应用时会面临哪些主要的困难，如何解决？"><a href="#4、知识图谱应用时会面临哪些主要的困难，如何解决？" class="headerlink" title="4、知识图谱应用时会面临哪些主要的困难，如何解决？"></a>4、知识图谱应用时会面临哪些主要的困难，如何解决？</h1><p>主要是确认需求，一方面是适不适合用知识图谱这个工具，另一方面做好与其他系统的对接工作，如何能将知识图谱这个服务以简便快捷的方式输出给其他系统。前者可以和多方面行内外专家交流，后者主要还是要与业务部门进行沟通，确认业务部门的期望，技术实现大多时候不是难点，难的是如何满足欲壑难填的需求。</p>
<h1 id="5、知识图谱系统的建设核心是什么？该如何选型？"><a href="#5、知识图谱系统的建设核心是什么？该如何选型？" class="headerlink" title="5、知识图谱系统的建设核心是什么？该如何选型？"></a>5、知识图谱系统的建设核心是什么？该如何选型？</h1><p>建设核心是图数据的存储和分析方法。不同的核心，外围使用的方法也不同。</p>
<p>以titan为例，它是集成在hadoop上的。数据的分析加工主要在使用sparksql和graphx，结果会存放在titan中，数量较多的明细流水会放在hbase中，常用的查询关键字，姓名、手机号码等会放在elasticsearch中，三者通过key相互关联。</p>
<p>如果换一种图数据库，比如neo4j，整个外围都会跟着调整。所以图数据库的选型不能进场图数据本身考虑，而应该结合整体规划，建设成本，多系统间的关联关系层面进行统筹考虑，甚至可能会为了大局牺牲一些效率。</p>
<h1 id="6、图形数据库应该怎么选型？选的时候需要考虑哪些问题？"><a href="#6、图形数据库应该怎么选型？选的时候需要考虑哪些问题？" class="headerlink" title="6、图形数据库应该怎么选型？选的时候需要考虑哪些问题？"></a>6、图形数据库应该怎么选型？选的时候需要考虑哪些问题？</h1><p>从系统自身考虑的话，包括高可靠性，读写效率、扩展性，与其他系统相同。</p>
<p>除此之外，还应该从整体规划和这个系统所处的位置进行考虑，为了满足整体规划，牺牲一些性能或者成本也是必要的。比如为了避免海量数据的多系统存储分析，就选用了以hadoop为基础的图数据库，这样所有的数据只需一份，可以供平台上的多个子系统进行使用。</p>
<h1 id="7、为满足关键特性系统的架构或组件选择是怎样的？（主要针对hadoop架构）"><a href="#7、为满足关键特性系统的架构或组件选择是怎样的？（主要针对hadoop架构）" class="headerlink" title="7、为满足关键特性系统的架构或组件选择是怎样的？（主要针对hadoop架构）"></a>7、为满足关键特性系统的架构或组件选择是怎样的？（主要针对hadoop架构）</h1><p>1.可视化需要开发一个专门的知识图谱展示界面，将知识图谱中的实体、关系属性等以美观已操作的方式展示出来，因为颜值即正义。可以借用当前比较流行的bootstrap等前端开发语言。</p>
<p>2.为满足快速查询，可以将部分索引关键字放在索引es中，索引命中后在使用key去titian中查询。</p>
<p>3.多种服务方式，需要从设计时就进行考虑，至少满足三种api、可视化界面、批量文件。批量文件主要从hive中进行导出，而api接口则需要开发一个服务层，将所有图数据库的命令行操作转换为对应的api接口，轻量级的开发一个java服务放在tomcat中，有条件的可以使用微服务框架。</p>
<h1 id="8、知识图谱的建设都有哪些重要的环节，需要注意什么？"><a href="#8、知识图谱的建设都有哪些重要的环节，需要注意什么？" class="headerlink" title="8、知识图谱的建设都有哪些重要的环节，需要注意什么？"></a>8、知识图谱的建设都有哪些重要的环节，需要注意什么？</h1><p>从自身项目实施来看，有三个地方：</p>
<p>1.建模时多系统数据的融合，比如客户的信息存在多个系统中，核心、信贷、理财等，因为系统建设时间不一、多次升级等问题，导致数据不一致，数据质量较差，这样就需要花费很大精力去处理数据质量问题，还可能导致程序返工。</p>
<p>2.模型开发过中，选择哪些业务场景也很重要，知识图谱不是万金油，有些场景比较费力。应该选择那些跟关联关系分析相关的，有明确结果，业务人员能够明确正确与否的应用场景，便于展示这个工具的优越性。</p>
<p>3.交付前的测试也很重要。因为知识图谱基本上都是需要融合各个业务系统的数据，涉及面较广。因此要给测试过程留够时间，便于测试人员发现一些数据处理上的遗漏。</p>
<h1 id="9、知识图谱与智能客服如何对接？"><a href="#9、知识图谱与智能客服如何对接？" class="headerlink" title="9、知识图谱与智能客服如何对接？"></a>9、知识图谱与智能客服如何对接？</h1><p>主要是通过API接口，在接入的同时系统自动调出客户当前的资产负债状况，最近的交易明细，购买产品的状况。在提问的时候，通过nlp系统解析问题中的关键字，识别询问的实体、关系等，找到关联的问题，引导客户按照提问已有的问题。使用知识图谱的好处在于，可以快速的查询出客户周边的所有数据。如果使用传统关系型数据库，则需要按照业务种类，逐个表进行查询，分模块展示。在图谱中则可以一起展示出来，因为是从客户出发按照关联关系进行查询的，并且可以用一张图进行直观的展示。</p>
<h1 id="10、部署时需要满足怎样的性能要求，qps或tps？如果建设面向外部客户的大规模知识图谱，有哪些可以优化的方向？"><a href="#10、部署时需要满足怎样的性能要求，qps或tps？如果建设面向外部客户的大规模知识图谱，有哪些可以优化的方向？" class="headerlink" title="10、部署时需要满足怎样的性能要求，qps或tps？如果建设面向外部客户的大规模知识图谱，有哪些可以优化的方向？"></a>10、部署时需要满足怎样的性能要求，qps或tps？如果建设面向外部客户的大规模知识图谱，有哪些可以优化的方向？</h1><p>性能的需求应该是与业务场景强相关的，如果是面向外部客户那就要考虑扩容节点提升整体性能，明细数据可以从hbase迁移到es中，加快查询速度，限制部分查询内容或者只能查看经过分析的子图。</p>
<p>对于行内系统，从数据安全角度来看，只有少部分人能看到所有数据，绝大多数人只能看到部分数据，而且应该是具有特定业务含义的数据，比如某个预警模型的结果。在这种情况下，权限范围内的数据量就很小了，那么在查询的过程中，效率也会相应提升，不会全表扫描。</p>
<h1 id="11、有没有合适的企业级的分布式知识图谱技术架构？"><a href="#11、有没有合适的企业级的分布式知识图谱技术架构？" class="headerlink" title="11、有没有合适的企业级的分布式知识图谱技术架构？"></a>11、有没有合适的企业级的分布式知识图谱技术架构？</h1><p>横向涉猎不多，答错勿怪。</p>
<p>titian就是分布式的，因为它是基于hbase的。</p>
<p>Neo4j 好像就不支持，不像hbase这么简单就可以进行扩展。</p>
<h1 id="12、知识图谱存储会不会引起数据膨胀？"><a href="#12、知识图谱存储会不会引起数据膨胀？" class="headerlink" title="12、知识图谱存储会不会引起数据膨胀？"></a>12、知识图谱存储会不会引起数据膨胀？</h1><p>图数据库本身不会，但是知识图谱这个系统会，一份数据至少存在于hive加工区和hbase查询区，还有少量的elasticsearch索引区。</p>
<h1 id="13、关于实体、属性、关系的识别和存储？"><a href="#13、关于实体、属性、关系的识别和存储？" class="headerlink" title="13、关于实体、属性、关系的识别和存储？"></a>13、关于实体、属性、关系的识别和存储？</h1><p>大多数情况下实体关系属性都是比较明确的，因为知识图谱的建模是与现实世界相符的。</p>
<p>比如银行来说客户就是实体，姓名，身 份 证 号码，手机号都是属性。</p>
<p>关系相对稍微复杂一点，不过常见的关系也都比较明确，比如客户经理和贷款户，机构和对公客户，合同和借款人等等。</p>
<p>银行这边的实体基本上都是自然人、账号，机构，合同、押品等，关系就是实体之间的关系，比如账号和自然人的归属关系。</p>
<p>实体、关系和属性都是存在titan里的，交易明细存在hbase里。</p>
<h1 id="14、脏数据的处理机制是什么？"><a href="#14、脏数据的处理机制是什么？" class="headerlink" title="14、脏数据的处理机制是什么？"></a>14、脏数据的处理机制是什么？</h1><p>知识图谱作为下游系统其实没有好的办法处理脏数据，基本上有两种策略：</p>
<p>第一：确定一个优先级，某个属性以哪个系统为准，当两个系统不一致时，不管对错永远以某个系统为准。</p>
<p>第二：前一种方法不适用的，就将这些数据打入“冷宫”，放到一张表里，定期拿出来，找原系统进行数据修正，这是一个比较漫长的过程。</p>
<p>不过好在，80%以上的数据是正常的，脏数据多数由于客户长期未发生业务，渠道无法强制客户更新数据。</p>
<h1 id="15、如何解决外部数据源准确性？"><a href="#15、如何解决外部数据源准确性？" class="headerlink" title="15、如何解决外部数据源准确性？"></a>15、如何解决外部数据源准确性？</h1><p>我个人无法从根本上解决，因为我们只是数据的使用方，准确性是需要从产生的根源上解决的问题。</p>
<p>不过在使用的时候可以进行多数据源的交叉验证，来提高准确性，完全消除是难以实现的。</p>
<h1 id="16、用知识图谱做传统的风控行业，局限性在哪里？利用大数据挖掘，除知识图谱外，还有哪些比较好的风控模型？"><a href="#16、用知识图谱做传统的风控行业，局限性在哪里？利用大数据挖掘，除知识图谱外，还有哪些比较好的风控模型？" class="headerlink" title="16、用知识图谱做传统的风控行业，局限性在哪里？利用大数据挖掘，除知识图谱外，还有哪些比较好的风控模型？"></a>16、用知识图谱做传统的风控行业，局限性在哪里？利用大数据挖掘，除知识图谱外，还有哪些比较好的风控模型？</h1><p>1.知识图谱是一种工具，是一种与关系型数据库相对的数据组织方式，有其擅长的领域，但不能手里拿着锤子，看哪里都是钉子。知识图谱也有不擅长的领域。</p>
<p>2.除大数据外，基于传统的关系型数据库开发一些机器学习或深度学习模型也可以做到风控。</p>
<blockquote>
<p>原文链接：<br><a href="https://mp.weixin.qq.com/s/kAxnYpW16fc-JvwhAA8onA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/kAxnYpW16fc-JvwhAA8onA</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>知识图谱</tag>
        <tag>Knowledge Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构及常用的架构风格</title>
    <url>/2019/08/07/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<p>前言：本来只想做一个“什么是微服务架构”，后来发现有许多基础的知识如果不做会很难看懂，因此把软件架构和常用的架构风格也一并讲了。大佬们的请直接移步第三部分。</p>
<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><h2 id="软件架构的定义"><a href="#软件架构的定义" class="headerlink" title="软件架构的定义"></a>软件架构的定义</h2><p>要理解微服务架构，首先要理解什么是软件架构。</p>
<blockquote>
<p>计算机系统的软件架构是构建这个系统所需要的一组结构，包括软件元素、它们之间的关系以及两者的属性。————卡耐基梅隆大学 Len Bass</p>
</blockquote>
<p>这句话，本质上就是在讲：应用程序的架构是将软件分解为元素（element），这些元素之间的关系（relation），以及这些元素自有的属性（property）。</p>
<h2 id="软件架构的意义"><a href="#软件架构的意义" class="headerlink" title="软件架构的意义"></a>软件架构的意义</h2><p>应用程序有两个层面的需求。第一类是功能性需求，这些需求决定一个应用程序做什么。这些通常都包含在用例（use case）或者用户故事（user story）中。应用的架构其实跟这些功能性需求没什么关系。功能性需求可以通过任意的架构来实现，甚至是非常糟糕的大泥球架构。</p>
<p>架构的重要性在于，它帮助应用程序满足了第二类需求：非功能性需求。我们把这类需求也称之为质量属性需求，或者简称为“能力”。这些非功能性需求决定一个应用程序在运行时的质量，比如可扩展性和可靠性。它们也决定了开发阶段的质量，包括可维护性、可测试性、可扩展性和可部署性。为应用程序所选择的架构将决定这些质量属性。</p>
<p>也可以从以下几点来讲软件架构的意义：</p>
<ul>
<li>它促进了劳动和知识的分工。它使具有特定专业知识的人们（或多个团队）能够就应用程序高效地协同工作。</li>
<li>它定义了软件元素的交互方式。</li>
<li>将软件分解成元素以及定义这些元素之间的关系，决定了软件的能力。</li>
</ul>
<h2 id="软件架构的4-1视图模型"><a href="#软件架构的4-1视图模型" class="headerlink" title="软件架构的4+1视图模型"></a>软件架构的4+1视图模型</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190807212744.png"></p>
<p>每个视图的目的如下：</p>
<p>逻辑视图：开发人员创建的软件元素。在面向对象的语言中，这些元素是类和包。它们之间的关系是类和包之间的关系，包括继承、关联和依赖。</p>
<p>实现视图：构建编译系统的输出。此视图由表示打包代码的模块和组件组成，组件是由一个或多个模块组成的可执行或可部署单元。在Java中，模块是JAR文件，组件通常是WAR文件或可执行JAR文件。它们之间的关系包括模块之间的依赖关系以及组件和模块之间的组合关系。</p>
<p>进程视图：运行时的组件。每个元素都是一个进程，进程之间的关系代表进程间通信。</p>
<p>部署视图：进程如何映射到机器。此视图中的元素由（物理或虚拟）计算机和进程组成。机器之间的关系代表网络。该视图还描述了进程和机器之间的关系。</p>
<p>除了这四个视图以外，4+1中的+1是指场景，它负责把视图串联在一起。每个场景负责描述在一个视图中的多个架构元素如何协作，以完成一个请求。例如，在逻辑视图中的场景，展现了类是如何协作的。同样，在进程视图中的场景，展现了进程是如何协作的。</p>
<h1 id="常用的架构风格"><a href="#常用的架构风格" class="headerlink" title="常用的架构风格"></a>常用的架构风格</h1><p>架构风格的定义如下：</p>
<blockquote>
<p>架构风格根据结构组织模式定义了一系列此类系统。更具体地说，架构风格确定可以在该风格的实例中使用的组件和连接器的词汇表，以及关于如何组合它们的一组约束。————David Garlan and Mary Shaw</p>
</blockquote>
<p>特定的架构风格提供了有限的元素（组件）和关系（连接器），你可以从中定义应用程序架构的视图。应用程序通常使用多种架构风格的组合。例如，单体架构可以通过不同的风格通的实现视图构造为单个（可执行与可部署）组件的架构样式。微服务架构将应用程序构造为一组松散耦合的服务，也可以通过不同的风格进行表示。</p>
<h2 id="分层式架构风格"><a href="#分层式架构风格" class="headerlink" title="分层式架构风格"></a>分层式架构风格</h2><p>架构的典型例子是分层架构。分层架构将软件元素按“层”的方式组织。每个层都有明确定义的职责。分层架构还限制了层之间的依赖关系。每一层只能依赖于紧邻其下方的层（如果严格分层）或其下面的任何层。</p>
<p>可以将分层架构应用于前面讨论的四个视图中的任何一个。流行的三层架构是应用于逻辑视图的分层架构。它将应用程序的类组织到以下层中：</p>
<ul>
<li>表现层：包含实现用户界面或外部API的代码。</li>
<li>业务逻辑层：包含业务逻辑。</li>
<li>数据持久化层：实现与数据库交互的逻辑。</li>
</ul>
<p>分层架构是架构风格的一个很好的例子，但它确实有一些明显的弊端：</p>
<ul>
<li>单个表现层：它无法展现应用程序可能不仅仅由单个系统调用的事实。</li>
<li>单一数据持久化层：它无法展现应用程序可能与多个数据库进行交互的事实。</li>
<li>将业务逻辑层定义为依赖于数据持久化层：理论上，这样的依赖性会妨碍你在没有数据库的情况下测试业务逻辑。</li>
</ul>
<p>此外，分层架构错误地表示了精心设计的应用程序中的依赖关系。业务逻辑通常定义数据访问方法的接口或接口库。数据持久化层则定义了实现存储库接口的DAO类。换句话说，依赖关系与分层架构所描述的相反。</p>
<h2 id="六边形架构风格"><a href="#六边形架构风格" class="headerlink" title="六边形架构风格"></a>六边形架构风格</h2><p>六边形架构是分层架构风格的替代品。如图所示，六边形架构风格选择以业务逻辑为中心的方式组织逻辑视图。应用程序具有一个或多个入站适配器，而不是表示层，它通过调用业务逻辑来处理来自外部的请求。同样，应用程序具有一个或多个出站适配器，而不是数据持久化层，这些出站适配器由业务逻辑调用并调用外部应用程序。此架构的一个关键特性和优点是业务逻辑不依赖于适配器。相反，各种适配器都依赖业务逻辑。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190807215342.png"></p>
<p>业务逻辑具有一个或多个端口（port）。端口定义了一组操作，关于业务逻辑如何与外部交互。例如，在Java中，端口通常是Java接口。有两种端口：入站和出站端口。入站端口是业务逻辑公开的API，它使外部应用程序可以调用它。入站端口的一个实例是服务接口，它定义服务的公共方法。出站端口是业务逻辑调用外部系统的方式。出站端口的一个实例是存储库接口，它定义数据访问操作的集合。</p>
<p>业务逻辑的周围是适配器。与端口一样，有两种类型的适配器：入站和出站。入站适配器通过调用入站端口来处理来自外部世界的请求。入站适配器的一个实例是Spring MVC Controller，它实现一组REST接口（endpoint）或一组Web页面。另一个实例是订阅消息的消息代理客户端。多个入站适配器可以调用相同的入站端口。</p>
<p>出站适配器实现出站端口，并通过调用外部应用程序或服务处理来自业务逻辑的请求。出站适配器的一个实例是实现访问数据库的操作的数据访问对象（DAO）类。另一个实例是调用远程服务的代理类。出站适配器也可以发布事件。</p>
<p>六边形架构风格的一个重要好处是它将业务逻辑与适配器中包含的表示层和数据访问层的逻辑分离开来。业务逻辑不依赖于表示层逻辑或数据访问层逻辑。</p>
<p>由于这种分离，单独测试业务逻辑要容易得多。另一个好处是它更准确地反映了现代应用程序的架构。可以通过多个适配器调用业务逻辑，每个适配器实现特定的API或用户界面。业务逻辑还可以调用多个适配器，每个适配器调用不同的外部系统。六边形架构是描述微服务架构中每个服务的架构的好方法。</p>
<blockquote>
<p>reference:<br><a href="https://mp.weixin.qq.com/s/r9eKHhEKWo5TovFN87HtPw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/r9eKHhEKWo5TovFN87HtPw</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件架构和服务架构</category>
      </categories>
      <tags>
        <tag>软件架构</tag>
        <tag>Software Architecture</tag>
        <tag>架构风格</tag>
        <tag>Architecture Style</tag>
      </tags>
  </entry>
  <entry>
    <title>边缘计算：愿景和挑战</title>
    <url>/2019/06/07/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%EF%BC%9A%E6%84%BF%E6%99%AF%E5%92%8C%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<pre><code>边缘计算有可能解决响应时间要求、电池寿命限制、带宽成本节约以及数据安全和隐私等问题。本文首先介绍了边缘计算的定义，然后介绍了从云卸载到智能家居和城市，以及协同边缘到实现边缘计算概念的几个案例研究。最后，我们提出了边缘计算领域的一些挑战和机遇，希望本文能引起社会的关注，并对这一方向的研究有所启发。</code></pre>
<h1 id="为什么要研究边缘计算"><a href="#为什么要研究边缘计算" class="headerlink" title="为什么要研究边缘计算"></a>为什么要研究边缘计算</h1><p>到2019年，由人、机器和事物产生的数据将达到500 zettabytes，正如思科全球云指数所估计的那样，但是到那时全球数据中心IP流量将仅达到10.4 zettabytes。到2019年，45%的物联网创建数据将存储、处理、分析，并在网络附近或边缘采取行动。思科互联网业务解决方案集团（Cisco Internet Business Solutions Group）预测，到2020年，将有500亿台设备连接到互联网上。有些物联网应用可能需要很短的响应时间，有些可能涉及到私有数据，有些可能产生大量的数据，这对网络来说可能是一个沉重的负担。云计算的效率不足以支持这些应用程序。</p>
<h1 id="什么是边缘计算"><a href="#什么是边缘计算" class="headerlink" title="什么是边缘计算"></a>什么是边缘计算</h1><p>数据在网络边缘的生成越来越多，因此，在网络边缘处理数据也会更有效。以前的工作，如微型数据中心、Cloudlet和雾计算，已经引入到社区，因为当数据在网络边缘生成时，云计算并不总是有效的数据处理。在这一部分中，我们列出了一些原因，为什么对于某些计算服务，边缘计算比云计算更有效，然后我们给出了我们对边缘计算的定义和理解。</p>
<h2 id="为什么需要边缘计算"><a href="#为什么需要边缘计算" class="headerlink" title="为什么需要边缘计算"></a>为什么需要边缘计算</h2><h3 id="来自云计算的推动"><a href="#来自云计算的推动" class="headerlink" title="来自云计算的推动"></a>来自云计算的推动</h3><p>随着边缘数据生成量的不断增加，数据传输速度正成为云计算范式的瓶颈。例如，波音787每秒将生成大约5千兆字节的数据，但飞机与地面卫星或基站之间的带宽不足以传输数据。</p>
<h3 id="来自物联网的拉动"><a href="#来自物联网的拉动" class="headerlink" title="来自物联网的拉动"></a>来自物联网的拉动</h3><p>可以肯定的是，网络边缘的事物数量在几年内将发展到数十亿以上。因此，它们产生的原始数据将是巨大的，使得传统的云计算效率不足以处理所有这些数据。这意味着物联网产生的大部分数据将永远不会传输到云，而是将在网络边缘消耗。</p>
<h3 id="从数据消费者到生产者的改变"><a href="#从数据消费者到生产者的改变" class="headerlink" title="从数据消费者到生产者的改变"></a>从数据消费者到生产者的改变</h3><p>从数据消费者到数据生产者/消费者的变化需要在边缘放置更多的函数。例如，今天人们拍照或录像，然后通过云服务（如YouTube、Facebook、Twitter或Instagram）共享数据，这是很正常的。</p>
<p>此外，每一分钟内，YouTube用户上传72小时的新视频内容；Facebook用户分享近250万条内容；Twitter用户推特推特推特推特推特推特近30万次；Instagram用户发布近22万张新照片。</p>
<h2 id="边缘计算是什么"><a href="#边缘计算是什么" class="headerlink" title="边缘计算是什么"></a>边缘计算是什么</h2><p>边缘计算是指允许在网络边缘、代表云服务的下游数据和代表物联网服务的上游数据进行计算的启用技术。在这里，我们将“边缘”定义为数据源和云数据中心之间的任何计算和网络资源。</p>
<p>边缘计算可以与雾计算互换，但是边缘计算更多地集中在事物方面，而雾计算更多地集中在基础设施方面。</p>
<h2 id="边缘计算的优势"><a href="#边缘计算的优势" class="headerlink" title="边缘计算的优势"></a>边缘计算的优势</h2><p>在边缘计算中，我们希望将计算放在数据源附近。与传统的基于云的计算模式相比，这有几个好处。在这里，我们使用社区的一些早期结果来展示潜在的好处。研究人员建立了一个概念验证平台，用于运行人脸识别应用程序，通过将计算从云端移动到边缘，将响应时间从900 ms缩短到169ms。Ha等人使用Cloudlet卸载可穿戴认知辅助的计算任务，结果表明，响应时间在80-200ms之间，而且Cloudlet卸载还可以减少30%-40%的能耗。clonecloud在移动与云的结合分区、迁移与合并、按需实例化分区等方面，其原型可以为测试应用减少20倍的运行时间和能源。</p>
<h1 id="案例研究"><a href="#案例研究" class="headerlink" title="案例研究"></a>案例研究</h1><h2 id="云卸载"><a href="#云卸载" class="headerlink" title="云卸载"></a>云卸载</h2><p>在传统的内容交付网络中，只有数据缓存在边缘服务器上。这是基于内容提供商在互联网上提供数据的事实，这在过去几十年中是正确的。在物联网中，数据在边缘产生和消耗。因此，在边缘计算范式中，不仅应该在边缘缓存数据，还应该缓存应用于数据上的操作。</p>
<p>应用：</p>
<ul>
<li>导航应用程序可以将导航或搜索服务移动到局部区域的边缘，在这种情况下，只涉及几个地图块。</li>
<li>可以在边缘节点上进行内容过滤/聚合，以减少要传输的数据量。</li>
<li>视觉辅助娱乐游戏、增强现实、互联健康等实时应用可以通过边缘节点快速响应。</li>
</ul>
<h2 id="视频分析"><a href="#视频分析" class="headerlink" title="视频分析"></a>视频分析</h2><p>由于数据传输延迟和隐私问题，云计算不再适用于需要视频分析的应用程序。</p>
<p>与单独的云计算相比，可以在每台边缘设备上利用数据和计算能力，并更快地获得结果。</p>
<h2 id="智能家居"><a href="#智能家居" class="headerlink" title="智能家居"></a>智能家居</h2><p>下图显示了智能家居环境中Edgeos的一个变体的结构。Edgeos需要通过Wi-Fi、蓝牙、ZigBee或蜂窝网络等多种通信方式从移动设备和各种事物收集数据。来自不同来源的数据需要在数据抽象层中进行融合和按摩。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190606235255.png"></p>
<h2 id="智慧城市"><a href="#智慧城市" class="headerlink" title="智慧城市"></a>智慧城市</h2><ul>
<li>大数据分析：到2019年，拥有100万人口的城市每天将产生180 PB的数据。</li>
<li>低延迟</li>
<li>位置感知</li>
</ul>
<h2 id="边缘协作"><a href="#边缘协作" class="headerlink" title="边缘协作"></a>边缘协作</h2><p>协作边缘将地理上分布的多个利益相关者的边缘连接起来，尽管这些利益相关者的物理位置和网络结构不同。这些特殊的连接边缘为利益相关者提供了共享和合作数据的机会。</p>
<p>例如医院会总结并分享某次流感爆发的信息，如平均成本、症状和人口等。理论上，患者会按照处方从药房获得药片。一种可能是病人没有接受治疗。然后医院必须承担再入院的责任，因为它不能得到病人没有服用药物的证据。现在，通过协作边缘，药房可以向医院提供患者的购买记录，这大大简化了医疗保健责任。</p>
<h1 id="挑战和机遇"><a href="#挑战和机遇" class="headerlink" title="挑战和机遇"></a>挑战和机遇</h1><h2 id="可编程性"><a href="#可编程性" class="headerlink" title="可编程性"></a>可编程性</h2><p>通常，程序是用一种编程语言编写的，并为特定的目标平台编译，因为程序只在云中运行。然而，在边缘计算中，计算是从云上卸载的，边缘节点很可能是异构平台。在这种情况下，这些节点的运行时是不同的，程序员编写一个可能部署在边缘计算范式中的应用程序面临着巨大的困难。</p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>在边缘计算中，一个重要的假设是事物的数量是巨大的。在边缘节点的顶部，有许多应用程序在运行，每个应用程序都有其自己的结构，说明如何提供服务。与所有计算机系统一样，边缘计算中的命名方案对于编程、寻址、事物识别和数据通信都非常重要。然而，边缘计算范式的有效命名机制尚未建立和标准化。边缘从业者通常需要学习各种通信和网络协议，以便与系统中的异构事物进行通信。边缘计算的命名方案需要处理事物的移动性、高度动态的网络拓扑、隐私和安全保护，以及针对大量不可靠事物的可扩展性。</p>
<h2 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h2><p>通过服务管理层的空气位置指示器，各种应用程序可以运行在消耗数据或提供服务的EDGEOS上。在无线传感器网络和云计算范式中，数据抽象已经得到了很好的讨论和研究。然而，在边缘计算中，这个问题变得更具挑战性。有了物联网，网络中会有大量的数据生成器，这里我们以一个智能家庭环境为例。在智能家居中，几乎所有的东西都会向Edgeos报告数据，更不用说在家里部署了大量的东西。然而，网络边缘的大多数东西，只定期向网关报告感应到的数据。</p>
<ul>
<li>来自不同事物的报告数据具有不同的格式</li>
<li>有时很难确定数据抽象的程度</li>
<li>数据抽象的另一个问题是对事物的适用操作</li>
</ul>
<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><ul>
<li>差异化：随着物联网部署的快速增长，我们预计将在网络边缘部署多种服务，如智能家居。</li>
<li>可扩展性：可扩展性在网络边缘可能是一个巨大的挑战，与移动系统不同，物联网中的东西可能是非常动态的。</li>
<li>隔离：隔离是网络边缘的另一个问题。</li>
<li>可靠性：最后但不是最不重要的，可靠性也是网络边缘的一个关键挑战。我们可以从服务、系统和数据的不同角度来识别可靠性方面的挑战。</li>
</ul>
<h2 id="隐私和安全"><a href="#隐私和安全" class="headerlink" title="隐私和安全"></a>隐私和安全</h2><ul>
<li>社区的隐私和安全意识。</li>
<li>从Edge上收集的数据的所有权。</li>
<li>缺少有效的工具来保护网络边缘的数据隐私和安全。</li>
</ul>
<h2 id="优化指标"><a href="#优化指标" class="headerlink" title="优化指标"></a>优化指标</h2><ul>
<li>延迟：延迟是评估性能的最重要指标之一，特别是在交互应用程序/服务中。</li>
<li>带宽：从延迟的角度来看，高带宽可以减少传输时间，特别是对于大数据（如视频等）。</li>
<li>能源：能源是网络边缘最宝贵的资源。</li>
<li>成本：从服务提供商的角度，如YouTube、Amazon等，边缘计算为他们提供了更少的延迟和能源消耗，潜在的增加投入和改进的用户体验。</li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>现在，越来越多的服务被从云推到网络的边缘，因为在边缘处理数据可以确保更短的响应时间和更好的可靠性。此外，如果可以在边缘处理更大的数据部分，而不是上传到云端，那么也可以节省带宽。物联网和通用移动设备的迅速发展改变了EDGE在计算范式中的角色，从数据消费者转变为数据生产者/消费者。在网络边缘处理或按摩数据会更有效。</p>
<blockquote>
<p>论文原文：<a href="http://www.cs.wayne.edu/~weisong/papers/shi15-edge_computing.pdf" target="_blank" rel="noopener">Edge Computing: Vision and Challenges</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Reading Notes</category>
        <category>Service Computing</category>
      </categories>
      <tags>
        <tag>Service Computing</tag>
        <tag>Edge Computing</tag>
      </tags>
  </entry>
  <entry>
    <title>远程连接mysql报错：1130 - Host &#39;192.168.2.204&#39; is not allowed to connect to this MySQL server</title>
    <url>/2017/04/24/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5mysql%E6%8A%A5%E9%94%99%EF%BC%9A1130%20-%20Host%20&#39;192.168.2.204&#39;%20is%20not%20allowed%20to%20connect%20to%20this%20MySQL%20server/</url>
    <content><![CDATA[<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>MySQL自带配置数据库mysql中的表user中，User=root一栏，Host的值为localhost，导致root用户只能通过本地登录。</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>将User=root对应行的Host一栏的值修改为<code>%</code>，允许任意ip登录root。</p>
<h2 id="具体解决方案"><a href="#具体解决方案" class="headerlink" title="具体解决方案"></a>具体解决方案</h2><p>在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称’%’即可 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql -u root -p  </span><br><span class="line">mysql&gt;use mysql;  </span><br><span class="line">mysql&gt;update user set host = '%' where user ='root';  </span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Trick</tag>
        <tag>Mysql</tag>
        <tag>远程连接报错</tag>
      </tags>
  </entry>
  <entry>
    <title>远程连接mysql报错：error 2003 （hy000）:can&#39;t connect to mysql server on &#39;localhost&#39; (10061)</title>
    <url>/2017/04/24/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5mysql%E6%8A%A5%E9%94%99%EF%BC%9Aerror%202003%20%EF%BC%88hy000%EF%BC%89-can&#39;t%20connect%20to%20mysql%20server%20on%20&#39;localhost&#39;%20(10061)/</url>
    <content><![CDATA[<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>mysql配置文件中有一句：</p>
<p><code>bind-address = 127.0.0.1</code></p>
<p>导致mysql只能从本地进行连接。</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>找到mysql的配置文件，将这一行注释掉。</p>
<h2 id="具体解决方案"><a href="#具体解决方案" class="headerlink" title="具体解决方案"></a>具体解决方案</h2><p>去两个配置文件中找这个配置项：</p>
<ol>
<li>/etc/mysql/my.cnf</li>
<li>/etc/mysql/mysqld.cnf</li>
</ol>
<p>在这两个文件的任意一个中找到</p>
<p><code>bind-address = 127.0.0.1</code></p>
<p>后，将其修改成：</p>
<p><code>#bind-address = 127.0.0.1</code></p>
<p>然后执行 <code>service mysql restart</code>重新启动mysql服务使配置生效即可。</p>
]]></content>
      <tags>
        <tag>Trick</tag>
        <tag>Mysql</tag>
        <tag>远程连接报错</tag>
      </tags>
  </entry>
  <entry>
    <title>通过TensorFlow实现word embedding</title>
    <url>/2019/10/21/%E9%80%9A%E8%BF%87TensorFlow%E5%AE%9E%E7%8E%B0word-embedding/</url>
    <content><![CDATA[<p>word2vec的方法主要分为CBOW（Continuous Bag Of Words）和skip-gram（n-gram）两大类。</p>
<p>两种方法互为镜像。简单来说，CBOW是通过上下文预测中间值来进行训练的，skip-gram是通过中间值预测上下文来进行训练的。</p>
<p>这里，我们使用skip-gram的方法。</p>
<h1 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h1><p>IDE: jupyter notebook</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> TSNE</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicPatternEmbedding</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'http://mattmahoney.net/dc/'</span></span><br><span class="line">        self.data_index = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        self.vocabulary_size = <span class="number">5000</span></span><br><span class="line">        </span><br><span class="line">        self.batch_size = <span class="number">128</span></span><br><span class="line">        self.embedding_size = <span class="number">128</span>  <span class="comment"># Dimension of the embedding vector.</span></span><br><span class="line">        self.skip_window = <span class="number">1</span>       <span class="comment"># How many words to consider left and right.</span></span><br><span class="line">        self.num_skips = <span class="number">2</span>         <span class="comment"># How many times to reuse an input to generate a label.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># We pick a random validation set to sample nearest neighbors. Here we limit the</span></span><br><span class="line">        <span class="comment"># validation samples to the words that have a low numeric ID, which by</span></span><br><span class="line">        <span class="comment"># construction are also the most frequent.</span></span><br><span class="line">        self.valid_size = <span class="number">16</span>     <span class="comment"># Random set of words to evaluate similarity on.</span></span><br><span class="line">        self.valid_window = <span class="number">100</span>  <span class="comment"># Only pick dev samples in the head of the distribution.</span></span><br><span class="line">        <span class="comment"># choose 16 numbers from 0 to 99 randomly</span></span><br><span class="line">        self.valid_examples = np.random.choice(self.valid_window, self.valid_size, replace=<span class="keyword">False</span>)</span><br><span class="line">        self.num_sampled = <span class="number">64</span>    <span class="comment"># Number of negative examples to sample.</span></span><br><span class="line">        self.num_steps = <span class="number">10001</span></span><br><span class="line">        </span><br><span class="line">        self.final_embedding = <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        self.graph = tf.Graph()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># download and verify the dataset file</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maybe_download</span><span class="params">(self, filename, expected_bytes)</span>:</span></span><br><span class="line">        <span class="comment"># If the dataset file is not under the current path, download it directly</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">            filename, _ = urllib.request.urlretrieve(self.url + filename, filename)</span><br><span class="line">        <span class="comment"># get dataset file infomationn</span></span><br><span class="line">        statinfo = os.stat(filename)</span><br><span class="line">        <span class="comment"># verify file size</span></span><br><span class="line">        <span class="keyword">if</span> statinfo.st_size == expected_bytes:</span><br><span class="line">            print(<span class="string">'Found and verified'</span>, filename)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(statinfo.st_size)</span><br><span class="line">            <span class="keyword">raise</span> Exception(</span><br><span class="line">                <span class="string">'Failed to verify '</span> + filename + <span class="string">'. Can you get to it with a browser?'</span>)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># read the data from zip into a list of strings</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(self, filename)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(filename) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># separate by default separators, that is, all null characters, including spaces, newlines (\n), tabs (\t), etc.</span></span><br><span class="line">            data = tf.compat.as_str(f.read(f.namelist()[<span class="number">0</span>])).split()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># process raw inputs into a dataset</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">(self, words)</span>:</span></span><br><span class="line">        <span class="comment"># add unknown words into count list</span></span><br><span class="line">        count = [[<span class="string">'UNK'</span>, <span class="number">-1</span>]]</span><br><span class="line">        <span class="comment"># count the words list and add the pairs (word_name, number) into count list</span></span><br><span class="line">        count.extend(collections.Counter(words).most_common(self.vocabulary_size - <span class="number">1</span>))</span><br><span class="line">        dictionary = dict()</span><br><span class="line">        <span class="comment"># create a dictionary of the words with serial number</span></span><br><span class="line">        <span class="keyword">for</span> word, _ <span class="keyword">in</span> count:</span><br><span class="line">            dictionary[word] = len(dictionary)</span><br><span class="line">        data = list()</span><br><span class="line">        unk_count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># convert the word list into a number list, 0 for unknown words</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> dictionary:</span><br><span class="line">                index = dictionary[word]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = <span class="number">0</span></span><br><span class="line">                unk_count += <span class="number">1</span></span><br><span class="line">            data.append(index)</span><br><span class="line">        <span class="comment"># update the number of UNK</span></span><br><span class="line">        count[<span class="number">0</span>][<span class="number">1</span>] = unk_count</span><br><span class="line">        <span class="comment"># generate a new dictionary by exchanging key and value</span></span><br><span class="line">        reversed_dictionary = dict(zip(dictionary.values(), dictionary.keys()))</span><br><span class="line">        <span class="keyword">return</span> data, count, dictionary, reversed_dictionary</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># function to generate a training batch for the skip-gram model</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_batch</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># make sure the data length is OK</span></span><br><span class="line">        <span class="keyword">assert</span> self.batch_size % self.num_skips == <span class="number">0</span></span><br><span class="line">        <span class="keyword">assert</span> self.num_skips &lt;= <span class="number">2</span> * self.skip_window</span><br><span class="line"></span><br><span class="line">        batch = np.ndarray(shape=(self.batch_size), dtype=np.int32)</span><br><span class="line">        labels = np.ndarray(shape=(self.batch_size, <span class="number">1</span>), dtype=np.int32)</span><br><span class="line">        span = <span class="number">2</span> * self.skip_window + <span class="number">1</span>  <span class="comment"># [ skip_window target skip_window ]</span></span><br><span class="line">        <span class="comment"># create a new double-ended queue to store the buffer</span></span><br><span class="line">        buffer = collections.deque(maxlen=span)</span><br><span class="line">        <span class="comment"># data_index indicates the end point of the current window</span></span><br><span class="line">        <span class="keyword">if</span> self.data_index + span &gt; len(data):</span><br><span class="line">            data_index = <span class="number">0</span></span><br><span class="line">        buffer.extend(data[self.data_index:self.data_index + span])</span><br><span class="line">        self.data_index += span</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.batch_size // self.num_skips):</span><br><span class="line">            target = self.skip_window  <span class="comment"># target label at the center of the buffer</span></span><br><span class="line">            targets_to_avoid = [self.skip_window]</span><br><span class="line">            <span class="comment"># sample num_skips batches and labels, optimizable</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_skips):</span><br><span class="line">                <span class="keyword">while</span> target <span class="keyword">in</span> targets_to_avoid:</span><br><span class="line">                    target = random.randint(<span class="number">0</span>, span - <span class="number">1</span>)</span><br><span class="line">                <span class="comment"># avoid sampling to the same target</span></span><br><span class="line">                targets_to_avoid.append(target)</span><br><span class="line">                <span class="comment"># each batch item stands for input</span></span><br><span class="line">                batch[i * self.num_skips + j] = buffer[self.skip_window]</span><br><span class="line">                <span class="comment"># each label item stands for ground truth</span></span><br><span class="line">                labels[i * self.num_skips + j, <span class="number">0</span>] = buffer[target]</span><br><span class="line">            <span class="keyword">if</span> self.data_index == len(data):</span><br><span class="line">                buffer[:] = data[:span]</span><br><span class="line">                self.data_index = span</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                buffer.append(data[self.data_index])</span><br><span class="line">                self.data_index += <span class="number">1</span></span><br><span class="line">        <span class="comment"># Backtrack a little bit to avoid skipping words in the end of a batch</span></span><br><span class="line">        self.data_index = self.data_index - span</span><br><span class="line">        <span class="keyword">return</span> batch, labels</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, data, reverse_dictionary)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.graph.as_default():</span><br><span class="line">            train_inputs = tf.placeholder(tf.int32, shape=[self.batch_size])</span><br><span class="line">            train_labels = tf.placeholder(tf.int32, shape=[self.batch_size, <span class="number">1</span>])</span><br><span class="line">            valid_dataset = tf.constant(self.valid_examples, dtype=tf.int32)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Ops and variables pinned to the CPU</span></span><br><span class="line">            <span class="keyword">with</span> tf.device(<span class="string">'/cpu:0'</span>):</span><br><span class="line">                <span class="comment"># Look up embeddings for inputs.</span></span><br><span class="line">                embeddings = tf.Variable(tf.random_uniform([self.vocabulary_size, self.embedding_size], <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">                <span class="comment"># according to embeddings, the 128-dimensional vector corresponding to the input word(train inputs) was extracted</span></span><br><span class="line">                embed = tf.nn.embedding_lookup(embeddings, train_inputs)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Construct the variables for the NCE loss</span></span><br><span class="line">                nce_weights = tf.Variable(tf.truncated_normal([self.vocabulary_size, self.embedding_size], stddev=<span class="number">1.0</span> / math.sqrt(self.embedding_size)))</span><br><span class="line">                nce_biases = tf.Variable(tf.zeros([self.vocabulary_size]))</span><br><span class="line">            <span class="comment"># Compute the average NCE loss for the batch.</span></span><br><span class="line">            <span class="comment"># tf.nce_loss automatically draws a new sample of the negative labels each</span></span><br><span class="line">            <span class="comment"># time we evaluate the loss.</span></span><br><span class="line">            loss = tf.reduce_mean(</span><br><span class="line">                tf.nn.nce_loss(weights=nce_weights,</span><br><span class="line">                             biases=nce_biases,</span><br><span class="line">                             labels=train_labels,</span><br><span class="line">                             inputs=embed,</span><br><span class="line">                             num_sampled=self.num_sampled,</span><br><span class="line">                             num_classes=self.vocabulary_size))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Construct the SGD optimizer using a learning rate of 1.0.</span></span><br><span class="line">            optimizer = tf.train.GradientDescentOptimizer(<span class="number">1.0</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Compute the cosine similarity between minibatch examples and all embeddings.</span></span><br><span class="line">            norm = tf.sqrt(tf.reduce_sum(tf.square(embeddings), <span class="number">1</span>, keep_dims=<span class="keyword">True</span>))</span><br><span class="line">            normalized_embeddings = embeddings / norm</span><br><span class="line">            valid_embeddings = tf.nn.embedding_lookup(normalized_embeddings, valid_dataset)</span><br><span class="line">            similarity = tf.matmul(valid_embeddings, normalized_embeddings, transpose_b=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Add variable initializer.</span></span><br><span class="line">            init = tf.global_variables_initializer()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">with</span> tf.Session(graph = self.graph) <span class="keyword">as</span> session:</span><br><span class="line">            init.run()</span><br><span class="line">            average_loss = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> step <span class="keyword">in</span> xrange(self.num_steps):</span><br><span class="line">                batch_inputs, batch_labels = self.generate_batch(data)</span><br><span class="line">                feed_dict = &#123;train_inputs: batch_inputs, train_labels: batch_labels&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># we perform one update step by evaluating the optimizer op (including it</span></span><br><span class="line">                <span class="comment"># in the list of returned values for session.run()</span></span><br><span class="line">                _, loss_val = session.run([optimizer, loss], feed_dict=feed_dict)</span><br><span class="line">                average_loss += loss_val</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> step % <span class="number">2000</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> step &gt; <span class="number">0</span>:</span><br><span class="line">                        average_loss /= <span class="number">2000</span></span><br><span class="line">                    <span class="comment"># the average loss is an estimate of the loss over the last 2000 batches.</span></span><br><span class="line">                    print(<span class="string">'Average loss at step '</span>, step, <span class="string">': '</span>, average_loss)</span><br><span class="line">                    average_loss = <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># output the most similar eight words to the screen</span></span><br><span class="line">                <span class="keyword">if</span> step % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">                    sim = similarity.eval()</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(self.valid_size):</span><br><span class="line">                        valid_word = reverse_dictionary[self.valid_examples[i]]</span><br><span class="line">                        top_k = <span class="number">8</span>  <span class="comment"># number of nearest neighbors</span></span><br><span class="line">                        nearest = (-sim[i, :]).argsort()[<span class="number">1</span>:top_k + <span class="number">1</span>]</span><br><span class="line">                        log_str = <span class="string">'Nearest to %s:'</span> % valid_word</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> xrange(top_k):</span><br><span class="line">                            close_word = reverse_dictionary[nearest[k]]</span><br><span class="line">                            log_str = <span class="string">'%s %s,'</span> % (log_str, close_word)</span><br><span class="line">                        print(log_str)</span><br><span class="line">                        </span><br><span class="line">            self.final_embeddings = normalized_embeddings.eval()</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># visualize the embeddings</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_with_labels</span><span class="params">(self, low_dim_embs, labels, filename=<span class="string">'tsne.png'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> low_dim_embs.shape[<span class="number">0</span>] &gt;= len(labels), <span class="string">'More labels than embeddings'</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">18</span>, <span class="number">18</span>))  <span class="comment"># in inches</span></span><br><span class="line">        <span class="keyword">for</span> i, label <span class="keyword">in</span> enumerate(labels):</span><br><span class="line">            x, y = low_dim_embs[i, :]</span><br><span class="line">            plt.scatter(x, y)</span><br><span class="line">            plt.annotate(label,</span><br><span class="line">                            xy=(x, y),</span><br><span class="line">                            xytext=(<span class="number">5</span>, <span class="number">2</span>),</span><br><span class="line">                            textcoords=<span class="string">'offset points'</span>,</span><br><span class="line">                            ha=<span class="string">'right'</span>,</span><br><span class="line">                            va=<span class="string">'bottom'</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment">#plt.savefig(filename)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bpe = BasicPatternEmbedding()</span><br><span class="line">        filename = bpe.maybe_download(<span class="string">'text8.zip'</span>,<span class="number">31344016</span>)</span><br><span class="line">        vocabulary = bpe.read_data(filename)</span><br><span class="line">        print(<span class="string">'Data size'</span>, len(vocabulary))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'vocabulary:'</span>, vocabulary[:<span class="number">10</span>])</span><br><span class="line">        </span><br><span class="line">        data, count, dictionary, reverse_dictionary = bpe.build_dataset(vocabulary)</span><br><span class="line">        <span class="keyword">del</span> vocabulary  <span class="comment"># Hint to reduce memory.</span></span><br><span class="line">        print(<span class="string">'Most common words (+UNK)'</span>, count[:<span class="number">5</span>])</span><br><span class="line">        print(<span class="string">'Sample data'</span>, data[:<span class="number">10</span>], [reverse_dictionary[i] <span class="keyword">for</span> i <span class="keyword">in</span> data[:<span class="number">10</span>]])</span><br><span class="line">        </span><br><span class="line">        batch, labels = bpe.generate_batch(data)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            print(batch[i], reverse_dictionary[batch[i]], <span class="string">'-&gt;'</span>, labels[i, <span class="number">0</span>], reverse_dictionary[labels[i, <span class="number">0</span>]])</span><br><span class="line">        <span class="keyword">print</span> (dictionary[<span class="string">'a'</span>], dictionary[<span class="string">'as'</span>], dictionary[<span class="string">'term'</span>])</span><br><span class="line">        </span><br><span class="line">        bpe.train(data, reverse_dictionary)</span><br><span class="line">        </span><br><span class="line">        tsne = TSNE(perplexity=<span class="number">30</span>, n_components=<span class="number">2</span>, init=<span class="string">'pca'</span>, n_iter=<span class="number">5000</span>, method=<span class="string">'exact'</span>)</span><br><span class="line">        plot_only = <span class="number">300</span></span><br><span class="line">        low_dim_embs = tsne.fit_transform(bpe.final_embeddings[:plot_only, :])</span><br><span class="line"></span><br><span class="line">        labels = [reverse_dictionary[i] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(plot_only)]</span><br><span class="line">        bpe.plot_with_labels(low_dim_embs, labels)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        print(<span class="string">'Please install sklearn, matplotlib, and scipy to show embeddings.'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Found and verified text8.zip
Data size 17005207
vocabulary: [&#39;anarchism&#39;, &#39;originated&#39;, &#39;as&#39;, &#39;a&#39;, &#39;term&#39;, &#39;of&#39;, &#39;abuse&#39;, &#39;first&#39;, &#39;used&#39;, &#39;against&#39;]
Most common words (+UNK) [[&#39;UNK&#39;, 2735459], (&#39;the&#39;, 1061396), (&#39;of&#39;, 593677), (&#39;and&#39;, 416629), (&#39;one&#39;, 411764)]
Sample data [0, 3081, 12, 6, 195, 2, 3134, 46, 59, 156] [&#39;UNK&#39;, &#39;originated&#39;, &#39;as&#39;, &#39;a&#39;, &#39;term&#39;, &#39;of&#39;, &#39;abuse&#39;, &#39;first&#39;, &#39;used&#39;, &#39;against&#39;]
3081 originated -&gt; 12 as
3081 originated -&gt; 0 UNK
12 as -&gt; 6 a
12 as -&gt; 3081 originated
6 a -&gt; 195 term
6 a -&gt; 12 as
195 term -&gt; 2 of
195 term -&gt; 6 a
6 12 195
Average loss at step  0 :  185.77481079101562
Nearest to it: confidence, doesn, theatre, came, gulf, cultural, sites, corps,
Nearest to use: buried, grave, observation, dust, batman, security, hungarian, opens,
Nearest to at: warrior, total, rivers, yards, reaction, extinction, exclusively, eu,
Nearest to if: emergency, present, developing, dates, life, for, pennsylvania, genesis,
Nearest to between: grant, execution, generally, power, official, interpreted, hiv, binary,
Nearest to people: unlikely, mainly, prussian, dedicated, shot, spending, dangerous, pick,
Nearest to states: forward, racing, begins, printed, follow, vacuum, study, mythology,
Nearest to by: rulers, protestant, marvel, republic, zero, letters, researchers, amiga,
Nearest to american: hit, stores, managed, practiced, intermediate, retrieved, moreover, unique,
Nearest to world: leadership, decay, culture, false, vii, et, dialogue, gave,
Nearest to but: denominations, passing, according, germans, medical, emperors, working, grant,
Nearest to an: removed, marxist, experts, ac, eugene, bones, tree, ne,
Nearest to were: coat, facing, grammar, storage, teach, covering, solomon, circuit,
Nearest to to: plant, supporting, pay, pp, shell, problem, acids, post,
Nearest to be: judah, photo, films, both, senate, woman, villages, eating,
Nearest to used: legislative, hero, private, organ, spaces, vice, top, trivia,
Average loss at step  2000 :  22.257665908694268
Average loss at step  4000 :  5.249317247629166
Average loss at step  6000 :  4.652066127896309
Average loss at step  8000 :  4.529780765414238
Average loss at step  10000 :  4.432040006399155
Nearest to it: he, came, votes, matters, doesn, whole, confidence, continues,
Nearest to use: alien, buried, security, hungarian, grave, dust, batman, amount,
Nearest to at: in, killed, appearance, extinction, mathbf, rivers, eu, pronunciation,
Nearest to if: life, molecules, emergency, dates, present, pennsylvania, for, rates,
Nearest to between: eight, execution, vs, of, hiv, grant, official, documentary,
Nearest to people: UNK, mainly, dedicated, selection, unlikely, shot, fact, dangerous,
Nearest to states: forward, racing, cover, arithmetic, study, vacuum, vs, begins,
Nearest to by: and, as, in, infant, co, manufacturer, with, campaign,
Nearest to american: hit, importance, austin, entry, depending, retrieved, vs, intermediate,
Nearest to world: culture, leadership, UNK, false, mathbf, skills, et, titled,
Nearest to but: and, medical, working, was, connecticut, vs, europeans, denominations,
Nearest to an: the, ac, plant, challenge, experts, necessary, lake, marxist,
Nearest to were: jpg, are, facing, covering, manual, circuit, opposite, test,
Nearest to to: ends, and, plant, in, office, into, supporting, agave,
Nearest to be: iso, shorter, judah, self, painter, also, dependent, assistance,
Nearest to used: opposition, hero, private, illinois, legislative, regime, breaking, repeated,</code></pre>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20191021100559.png"></p>
<h1 id="相关函数说明"><a href="#相关函数说明" class="headerlink" title="相关函数说明"></a>相关函数说明</h1><h2 id="Tensor-eval"><a href="#Tensor-eval" class="headerlink" title="Tensor.eval()"></a>Tensor.eval()</h2><p>.eval() 其实就是tf.Tensor的Session.run() 的另外一种写法，但两者有差别</p>
<ol>
<li>eval(): 将字符串string对象转化为有效的表达式参与求值运算返回计算结果</li>
<li>eval()也是启动计算的一种方式。基于Tensorflow的基本原理，首先需要定义图，然后计算图，其中计算图的函数常见的有run()函数，如sess.run()。同样eval()也是此类函数，</li>
<li>要注意的是，eval()只能用于tf.Tensor类对象，也就是有输出的Operation，写作Tensor.eval()。对于没有输出的Operation, 可以用.run()或者Session.run()；Session.run()没有这个限制。</li>
</ol>
<h2 id="np-argsort"><a href="#np-argsort" class="headerlink" title="np.argsort()"></a>np.argsort()</h2><p>argsort函数返回的是数组值从小到大的索引值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argsort(x)</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h2 id="tf-reduce-sum"><a href="#tf-reduce-sum" class="headerlink" title="tf.reduce_sum()"></a>tf.reduce_sum()</h2><p>reduce_sum( ) 是求和函数，在 tensorflow 里面，计算的都是 tensor，可以通过调整 axis =0,1 的维度来控制求和维度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = tf.constant([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.reduce_sum(x)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.reduce_sum(x, <span class="number">0</span>)</span><br><span class="line">[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.reduce_sum(x, <span class="number">1</span>)</span><br><span class="line">[<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.reduce_sum(x, <span class="number">1</span>, keepdims=<span class="keyword">True</span>)</span><br><span class="line">[[<span class="number">3</span>],[<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tf.reduce_sum(x, [<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-nn-nce-loss"><a href="#tf-nn-nce-loss" class="headerlink" title="tf.nn.nce_loss()"></a>tf.nn.nce_loss()</h2><p>假设nce_loss之前的输入数据是K维的，一共有N个类，那么</p>
<p>weight.shape = (N, K)</p>
<p>bias.shape = (N)</p>
<p>inputs.shape = (batch_size, K)</p>
<p>labels.shape = (batch_size, num_true)</p>
<p>num_true : 实际的正样本个数</p>
<p>num_sampled: 采样出多少个负样本</p>
<p>num_classes = N</p>
<p>sampled_values: 采样出的负样本，如果是None，就会用不同的sampler去采样。待会儿说sampler是什么。</p>
<p>remove_accidental_hits: 如果采样时不小心采样到的负样本刚好是正样本，要不要干掉</p>
<p>partition_strategy：对weights进行embedding_lookup时并行查表时的策略。TF的embeding_lookup是在CPU里实现的，这里需要考虑多线程查表时的锁的问题</p>
<p>nce_loss的实现逻辑如下：</p>
<p>_compute_sampled_logits: 通过这个函数计算出正样本和采样出的负样本对应的output和label</p>
<p>sigmoid_cross_entropy_with_logits: 通过 sigmoid cross entropy来计算output和label的loss，从而进行反向传播。这个函数把最后的问题转化为了num_sampled+num_real个两类分类问题，然后每个分类问题用了交叉熵的损伤函数，也就是logistic regression常用的损失函数。TF里还提供了一个softmax_cross_entropy_with_logits的函数，和这个有所区别。</p>
<p>在训练过程中，作为input的embed也会被自动更新</p>
<h2 id="tf-nn-embedding-lookup"><a href="#tf-nn-embedding-lookup" class="headerlink" title="tf.nn.embedding_lookup()"></a>tf.nn.embedding_lookup()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Signature:</span></span><br><span class="line">tf.nn.embedding_lookup(params, ids, partition_strategy=<span class="string">'mod'</span>, name=<span class="keyword">None</span>, validate_indices=<span class="keyword">True</span>, max_norm=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># Docstring:</span></span><br><span class="line"><span class="comment"># Looks up `ids` in a list of embedding tensors.</span></span><br></pre></td></tr></table></figure>

<p>是根据 ids 中的id，寻找 params 中的第id行。比如 ids=[1,3,5]，则找出params中第1，3，5行，组成一个tensor返回。</p>
<p>embedding_lookup不是简单的查表，params 对应的向量是可以训练的，训练参数个数应该是 feature_num * embedding_size，即前文表述的embedding层权重矩阵，就是说 lookup 的是一种全连接层。</p>
<p>partition_strategy 为张量编号方式，在张量存在多维时起作用，编号的方式有两种，”mod”（默认） 和 “div”。</p>
<p>假设：一共有三个tensor [a,b,c] 作为params 参数，所有tensor的第 0 维上一共有 10 个项目（id 0 ~ 9）。</p>
<p>“mod” : (id) mod len(params) 得到 多少就把 id 分到第几个tensor里面</p>
<ul>
<li>a 依次分到id： 0 3 6 9</li>
<li>b 依次分到id： 1 4 7</li>
<li>c 依次分到id： 2 5 8</li>
</ul>
<p>“div” : (id) div len(params) 可以理解为依次排序，但是这两种切分方式在无法均匀切分的情况下都是将前(max_id+1)%len(params)个 partition 多分配一个元素.</p>
<ul>
<li>a 依次分到id： 0 1 2 3</li>
<li>b 依次分到id： 4 5 6</li>
<li>c 依次分到id： 7 8 9</li>
</ul>
<h2 id="tf-SparseTensor"><a href="#tf-SparseTensor" class="headerlink" title="tf.SparseTensor()"></a>tf.SparseTensor()</h2><p>构造稀疏向量矩阵，每一行为一个样本</p>
<p>SparseTensor(indices, values, dense_shape)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SparseTensor(indices=[[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>]], values=[<span class="number">1</span>, <span class="number">2</span>], dense_shape=[<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># represents the dense tensor</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>reference:<br><a href="https://blog.csdn.net/qoopqpqp/article/details/76037334" target="_blank" rel="noopener">https://blog.csdn.net/qoopqpqp/article/details/76037334</a><br><a href="https://segmentfault.com/a/1190000015287066?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015287066?utm_source=tag-newest</a><br><a href="https://blog.csdn.net/u012193416/article/details/83349138" target="_blank" rel="noopener">https://blog.csdn.net/u012193416/article/details/83349138</a><br><a href="https://blog.csdn.net/qq_36092251/article/details/79684721" target="_blank" rel="noopener">https://blog.csdn.net/qq_36092251/article/details/79684721</a><br><a href="https://gshtime.github.io/2018/06/01/tensorflow-embedding-lookup-sparse/" target="_blank" rel="noopener">https://gshtime.github.io/2018/06/01/tensorflow-embedding-lookup-sparse/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
        <tag>word2vec</tag>
        <tag>n-gram</tag>
        <tag>skip-gram</tag>
        <tag>Embedding</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Python进行数据分析(一)</title>
    <url>/2019/04/14/%E9%80%9A%E8%BF%87python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="Introductory-examples"><a href="#Introductory-examples" class="headerlink" title="Introductory examples"></a>Introductory examples</h1><h2 id="1-usa-gov-data-from-bit-ly"><a href="#1-usa-gov-data-from-bit-ly" class="headerlink" title="1.usa.gov data from bit.ly"></a>1.usa.gov data from bit.ly</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前路径</span></span><br><span class="line">%pwd</span><br></pre></td></tr></table></figure>

<pre><code>&#39;/Users/imonce/OneDrive/learning/dataAnalyze/pydata-book-master&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回到上一层（..）又回到当前文件夹（pydata-book-master）</span></span><br><span class="line">%cd ../pydata-book-master</span><br></pre></td></tr></table></figure>

<pre><code>/Users/imonce/OneDrive/learning/dataAnalyze/pydata-book-master</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建变量并赋值，这里path是数据所在路径</span></span><br><span class="line">path = <span class="string">'ch02/usagov_bitly_data2012-03-16-1331923249.txt'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># open：打开path路径代表的文件</span></span><br><span class="line"><span class="comment"># open().readline()：读取文件的第一行，并把指针下移一行（再执行一次读取的就是文件的第二行了，以此类推）</span></span><br><span class="line">open(path).readline()</span><br></pre></td></tr></table></figure>

<pre><code>&#39;{ &quot;a&quot;: &quot;Mozilla\\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\\/535.11 (KHTML, like Gecko) Chrome\\/17.0.963.78 Safari\\/535.11&quot;, &quot;c&quot;: &quot;US&quot;, &quot;nk&quot;: 1, &quot;tz&quot;: &quot;America\\/New_York&quot;, &quot;gr&quot;: &quot;MA&quot;, &quot;g&quot;: &quot;A6qOVH&quot;, &quot;h&quot;: &quot;wfLQtf&quot;, &quot;l&quot;: &quot;orofrog&quot;, &quot;al&quot;: &quot;en-US,en;q=0.8&quot;, &quot;hh&quot;: &quot;1.usa.gov&quot;, &quot;r&quot;: &quot;http:\\/\\/www.facebook.com\\/l\\/7AQEFzjSi\\/1.usa.gov\\/wfLQtf&quot;, &quot;u&quot;: &quot;http:\\/\\/www.ncbi.nlm.nih.gov\\/pubmed\\/22415991&quot;, &quot;t&quot;: 1331923247, &quot;hc&quot;: 1331822918, &quot;cy&quot;: &quot;Danvers&quot;, &quot;ll&quot;: [ 42.576698, -70.954903 ] }\n&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入json包</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 创建变量并赋值，这里path是数据所在路径</span></span><br><span class="line">path = <span class="string">'ch02/usagov_bitly_data2012-03-16-1331923249.txt'</span></span><br><span class="line"><span class="comment"># json.loads()：以json格式读取数据，读取出来是key：value对，可以像字典一样查询</span></span><br><span class="line"><span class="comment"># for line in open(path)：逐行遍历path文件中的数据</span></span><br><span class="line"><span class="comment"># [json.loads(line) for line in open(path)]：逐行遍历path文件中的数据，通过按照json格式读取，然后每一行的作为一个item组成list（就是外边那个方括号的作用）</span></span><br><span class="line">records = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> open(path)]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出第一个item（第一行读取的内容）看一下</span></span><br><span class="line"><span class="comment"># 这个语句本身没有打印作用，但是在jupyter里边直接放变量会给你打印出来</span></span><br><span class="line"><span class="comment"># 标准写法应该为print(records[0])</span></span><br><span class="line">records[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<pre><code>{&#39;a&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.78 Safari/535.11&#39;,
 &#39;al&#39;: &#39;en-US,en;q=0.8&#39;,
 &#39;c&#39;: &#39;US&#39;,
 &#39;cy&#39;: &#39;Danvers&#39;,
 &#39;g&#39;: &#39;A6qOVH&#39;,
 &#39;gr&#39;: &#39;MA&#39;,
 &#39;h&#39;: &#39;wfLQtf&#39;,
 &#39;hc&#39;: 1331822918,
 &#39;hh&#39;: &#39;1.usa.gov&#39;,
 &#39;l&#39;: &#39;orofrog&#39;,
 &#39;ll&#39;: [42.576698, -70.954903],
 &#39;nk&#39;: 1,
 &#39;r&#39;: &#39;http://www.facebook.com/l/7AQEFzjSi/1.usa.gov/wfLQtf&#39;,
 &#39;t&#39;: 1331923247,
 &#39;tz&#39;: &#39;America/New_York&#39;,
 &#39;u&#39;: &#39;http://www.ncbi.nlm.nih.gov/pubmed/22415991&#39;}</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询第一个item中，key为'a'的value</span></span><br><span class="line">records[<span class="number">0</span>][<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.78 Safari/535.11&#39;</code></pre>
<h3 id="Counting-time-zones-in-pure-Python"><a href="#Counting-time-zones-in-pure-Python" class="headerlink" title="Counting time zones in pure Python"></a>Counting time zones in pure Python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果查询不存在的key的话会报错</span></span><br><span class="line">records[<span class="number">0</span>][<span class="string">'cc'</span>]</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-8-992e1ec28c8d&gt; in &lt;module&gt;()
      1 # 如果查询不存在的key的话会报错
----&gt; 2 records[0][&#39;cc&#39;]


KeyError: &#39;cc&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for rec in records：吧records这个list里边的item逐个取出，每次取出都用rec命名</span></span><br><span class="line"><span class="comment"># [rec['tz'] for rec in records]：把rec中key为‘tz’的value取出来，作为item构建list</span></span><br><span class="line"><span class="comment"># 直接运行会报错，因为有的行里边是没有‘tz’这个key的</span></span><br><span class="line">time_zones = [rec[<span class="string">'tz'</span>] <span class="keyword">for</span> rec <span class="keyword">in</span> records]</span><br></pre></td></tr></table></figure>

<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-9-abb6a4fa53e3&gt; in &lt;module&gt;()
      2 # [rec[&#39;tz&#39;] for rec in records]：把rec中key为‘tz’的value取出来，作为item构建list
      3 # 直接运行会报错，因为有的行里边是没有‘tz’这个key的
----&gt; 4 time_zones = [rec[&#39;tz&#39;] for rec in records]


&lt;ipython-input-9-abb6a4fa53e3&gt; in &lt;listcomp&gt;(.0)
      2 # [rec[&#39;tz&#39;] for rec in records]：把rec中key为‘tz’的value取出来，作为item构建list
      3 # 直接运行会报错，因为有的行里边是没有‘tz’这个key的
----&gt; 4 time_zones = [rec[&#39;tz&#39;] for rec in records]


KeyError: &#39;tz&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因此这一句在上一句的基础上，增加if 'tz' in rec，意为只把tz的rec中的value构成list</span></span><br><span class="line"><span class="comment"># 因此time_zones的长度小于records</span></span><br><span class="line">time_zones = [rec[<span class="string">'tz'</span>] <span class="keyword">for</span> rec <span class="keyword">in</span> records <span class="keyword">if</span> <span class="string">'tz'</span> <span class="keyword">in</span> rec]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出两个list的长度看一下</span></span><br><span class="line"><span class="comment"># records中有120个item是没有‘tz’这个key的</span></span><br><span class="line">print(len(records),len(time_zones))</span><br></pre></td></tr></table></figure>

<pre><code>3560 3440</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个函数的参数sequence应该是一个list</span></span><br><span class="line"><span class="comment"># 这个函数的输出是一个dict，其中key是sequence中的item，value是item出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_counts</span><span class="params">(sequence)</span>:</span></span><br><span class="line">    <span class="comment"># 创建空字典counts</span></span><br><span class="line">    counts = &#123;&#125;</span><br><span class="line">    <span class="comment"># 遍历sequence中的item，命名为x</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> sequence:</span><br><span class="line">        <span class="comment"># 如果x在counts中作为key出现过</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> counts:</span><br><span class="line">            <span class="comment"># 将当前x对应的value的值+1</span></span><br><span class="line">            counts[x] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># counts的key中没有x</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 创建x这个key，并将其对应的value设置为1</span></span><br><span class="line">            counts[x] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 返回counts这个字典</span></span><br><span class="line">    <span class="keyword">return</span> counts</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从collections这个包里导入defaultdict这个函数</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数的参数sequence应该是一个list</span></span><br><span class="line"><span class="comment"># 这个函数的输出是一个dict，其中key是sequence中的item，value是item出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_counts2</span><span class="params">(sequence)</span>:</span></span><br><span class="line">    <span class="comment"># 创建空字典，字典中的value默认为int类型的变量</span></span><br><span class="line">    <span class="comment"># 意义在于，每次插入一个新的key时，对应的value会自动设置为0，不需要先赋值一次</span></span><br><span class="line">    counts = defaultdict(int) <span class="comment"># values will initialize to 0</span></span><br><span class="line">    <span class="comment"># 遍历sequence中的item，命名为x</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> sequence:</span><br><span class="line">        <span class="comment"># counts的key中有x就直接+1</span></span><br><span class="line">        <span class="comment"># 没有就插入x这个key，（自动初始化value为0），然后+1</span></span><br><span class="line">        counts[x] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 返回counts这个字典</span></span><br><span class="line">    <span class="keyword">return</span> counts</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用刚刚定义的函数，统计一下time_zones这个list中每个时区出现的次数</span></span><br><span class="line">counts = get_counts(time_zones)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># counts是一个dict，因此可以直接通过key查询value的值</span></span><br><span class="line"><span class="comment"># 看看'America/New_York'这个key对应的value时多少</span></span><br><span class="line">counts[<span class="string">'America/New_York'</span>]</span><br></pre></td></tr></table></figure>

<pre><code>1251</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># counts.items()：把counts这个字典中的key和value成对取出</span></span><br><span class="line"><span class="comment"># [(count, tz) for tz, count in counts.items()]：把键值对以二元组的形式构成list</span></span><br><span class="line">[(count, tz) <span class="keyword">for</span> tz, count <span class="keyword">in</span> counts.items()]</span><br></pre></td></tr></table></figure>

<pre><code>[(1251, &#39;America/New_York&#39;),
 (191, &#39;America/Denver&#39;),
 (33, &#39;America/Sao_Paulo&#39;),
 (16, &#39;Europe/Warsaw&#39;),
 (521, &#39;&#39;),
 (382, &#39;America/Los_Angeles&#39;),
 (10, &#39;Asia/Hong_Kong&#39;),
 (27, &#39;Europe/Rome&#39;),
 (2, &#39;Africa/Ceuta&#39;),
 (35, &#39;Europe/Madrid&#39;),
 (3, &#39;Asia/Kuala_Lumpur&#39;),
 (1, &#39;Asia/Nicosia&#39;),
 (74, &#39;Europe/London&#39;),
 (36, &#39;Pacific/Honolulu&#39;),
 (400, &#39;America/Chicago&#39;),
 (2, &#39;Europe/Malta&#39;),
 (8, &#39;Europe/Lisbon&#39;),
 (14, &#39;Europe/Paris&#39;),
 (5, &#39;Europe/Copenhagen&#39;),
 (1, &#39;America/Mazatlan&#39;),
 (3, &#39;Europe/Dublin&#39;),
 (4, &#39;Europe/Brussels&#39;),
 (12, &#39;America/Vancouver&#39;),
 (22, &#39;Europe/Amsterdam&#39;),
 (10, &#39;Europe/Prague&#39;),
 (14, &#39;Europe/Stockholm&#39;),
 (5, &#39;America/Anchorage&#39;),
 (6, &#39;Asia/Bangkok&#39;),
 (28, &#39;Europe/Berlin&#39;),
 (25, &#39;America/Rainy_River&#39;),
 (5, &#39;Europe/Budapest&#39;),
 (37, &#39;Asia/Tokyo&#39;),
 (6, &#39;Europe/Vienna&#39;),
 (20, &#39;America/Phoenix&#39;),
 (3, &#39;Asia/Jerusalem&#39;),
 (3, &#39;Asia/Karachi&#39;),
 (3, &#39;America/Bogota&#39;),
 (20, &#39;America/Indianapolis&#39;),
 (9, &#39;America/Montreal&#39;),
 (9, &#39;Asia/Calcutta&#39;),
 (1, &#39;Europe/Skopje&#39;),
 (4, &#39;Asia/Beirut&#39;),
 (6, &#39;Australia/NSW&#39;),
 (6, &#39;Chile/Continental&#39;),
 (4, &#39;America/Halifax&#39;),
 (6, &#39;America/Edmonton&#39;),
 (3, &#39;Europe/Bratislava&#39;),
 (2, &#39;America/Recife&#39;),
 (3, &#39;Africa/Cairo&#39;),
 (9, &#39;Asia/Istanbul&#39;),
 (1, &#39;Asia/Novosibirsk&#39;),
 (10, &#39;Europe/Moscow&#39;),
 (1, &#39;Europe/Sofia&#39;),
 (1, &#39;Europe/Ljubljana&#39;),
 (15, &#39;America/Mexico_City&#39;),
 (10, &#39;Europe/Helsinki&#39;),
 (4, &#39;Europe/Bucharest&#39;),
 (4, &#39;Europe/Zurich&#39;),
 (10, &#39;America/Puerto_Rico&#39;),
 (1, &#39;America/Monterrey&#39;),
 (6, &#39;Europe/Athens&#39;),
 (4, &#39;America/Winnipeg&#39;),
 (2, &#39;Europe/Riga&#39;),
 (1, &#39;America/Argentina/Buenos_Aires&#39;),
 (4, &#39;Asia/Dubai&#39;),
 (10, &#39;Europe/Oslo&#39;),
 (1, &#39;Asia/Yekaterinburg&#39;),
 (1, &#39;Asia/Manila&#39;),
 (1, &#39;America/Caracas&#39;),
 (1, &#39;Asia/Riyadh&#39;),
 (1, &#39;America/Montevideo&#39;),
 (1, &#39;America/Argentina/Mendoza&#39;),
 (5, &#39;Asia/Seoul&#39;),
 (1, &#39;Europe/Uzhgorod&#39;),
 (1, &#39;Australia/Queensland&#39;),
 (2, &#39;Europe/Belgrade&#39;),
 (1, &#39;America/Costa_Rica&#39;),
 (1, &#39;America/Lima&#39;),
 (1, &#39;Asia/Pontianak&#39;),
 (2, &#39;America/Chihuahua&#39;),
 (2, &#39;Europe/Vilnius&#39;),
 (3, &#39;America/Managua&#39;),
 (1, &#39;Africa/Lusaka&#39;),
 (2, &#39;America/Guayaquil&#39;),
 (3, &#39;Asia/Harbin&#39;),
 (2, &#39;Asia/Amman&#39;),
 (1, &#39;Africa/Johannesburg&#39;),
 (1, &#39;America/St_Kitts&#39;),
 (11, &#39;Pacific/Auckland&#39;),
 (1, &#39;America/Santo_Domingo&#39;),
 (1, &#39;America/Argentina/Cordoba&#39;),
 (1, &#39;Asia/Kuching&#39;),
 (1, &#39;Europe/Volgograd&#39;),
 (1, &#39;America/La_Paz&#39;),
 (1, &#39;Africa/Casablanca&#39;),
 (3, &#39;Asia/Jakarta&#39;),
 (1, &#39;America/Tegucigalpa&#39;)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># count_dict是待统计的字典，n是要取出n项，默认为10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_counts</span><span class="params">(count_dict, n=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="comment"># counts.items()：把counts这个字典中的key和value成对取出</span></span><br><span class="line">    <span class="comment"># [(count, tz) for tz, count in counts.items()]：把键值对以二元组的形式构成list</span></span><br><span class="line">    value_key_pairs = [(count, tz) <span class="keyword">for</span> tz, count <span class="keyword">in</span> count_dict.items()]</span><br><span class="line">    <span class="comment"># 调用python中的list自带的sort()方法，默认按照第一维从小到达排序</span></span><br><span class="line">    value_key_pairs.sort()</span><br><span class="line">    <span class="comment"># [-n:]意思为从倒数第n项一直取到最后一项，也就是说返回的是最大的n个</span></span><br><span class="line">    <span class="keyword">return</span> value_key_pairs[-n:]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看看counts中出现最多的时区</span></span><br><span class="line">top_counts(counts)</span><br></pre></td></tr></table></figure>

<pre><code>[(33, &#39;America/Sao_Paulo&#39;),
 (35, &#39;Europe/Madrid&#39;),
 (36, &#39;Pacific/Honolulu&#39;),
 (37, &#39;Asia/Tokyo&#39;),
 (74, &#39;Europe/London&#39;),
 (191, &#39;America/Denver&#39;),
 (382, &#39;America/Los_Angeles&#39;),
 (400, &#39;America/Chicago&#39;),
 (521, &#39;&#39;),
 (1251, &#39;America/New_York&#39;)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其实有现成的包可以用</span></span><br><span class="line"><span class="comment"># 导入collections包中的Counter函数</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过Counter对time_zones这个list进行统计</span></span><br><span class="line">counts = Counter(time_zones)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用Counter对象的方法most_common(n)可以直接调出最多的n项</span></span><br><span class="line">counts.most_common(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[(&#39;America/New_York&#39;, 1251),
 (&#39;&#39;, 521),
 (&#39;America/Chicago&#39;, 400),
 (&#39;America/Los_Angeles&#39;, 382),
 (&#39;America/Denver&#39;, 191),
 (&#39;Europe/London&#39;, 74),
 (&#39;Asia/Tokyo&#39;, 37),
 (&#39;Pacific/Honolulu&#39;, 36),
 (&#39;Europe/Madrid&#39;, 35),
 (&#39;America/Sao_Paulo&#39;, 33)]</code></pre>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Python进行数据分析(二)</title>
    <url>/2019/04/15/%E9%80%9A%E8%BF%87python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="Counting-time-zones-with-pandas"><a href="#Counting-time-zones-with-pandas" class="headerlink" title="Counting time zones with pandas"></a>Counting time zones with pandas</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %matplotlib主要是在使用jupyter notebook 或者 jupyter qtconsole的时候才会用到</span></span><br><span class="line"><span class="comment"># 具体作用是当你调用matplotlib.pyplot的绘图函数plot()进行绘图的时候，可以直接在你的python console里面生成图像</span></span><br><span class="line"><span class="comment"># 默认是弹出一个绘图窗口</span></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python有多个版本，Python 2.7到Python 3.x，Python提供了__future__模块，把3.x新版本的特性导入到当前版本</span></span><br><span class="line"><span class="comment"># 这一句的意思是除法按照python3来：</span></span><br><span class="line"><span class="comment"># 区别就是python2里边10/3=3，python3里边10/3=3.3333333333333335</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="comment"># 导入numpy中的随机函数randn</span></span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</span><br><span class="line"><span class="comment"># 到处numpy包，并命名为np</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 导入os包</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 导入matplotlib.pyplot，并命名为plt，主要用于绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 导入pandas包，并命名为pd</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 利用rc方法，plt.rc('figure',figsize=(10,6))全局默认图像大小为10X6</span></span><br><span class="line">plt.rc(<span class="string">'figure'</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"><span class="comment"># numpy set print options 小数点后4位</span></span><br><span class="line">np.set_printoptions(precision=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入json包</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 赋值</span></span><br><span class="line">path = <span class="string">'ch02/usagov_bitly_data2012-03-16-1331923249.txt'</span></span><br><span class="line"><span class="comment"># 逐行遍历path文件中的数据，通过按照json格式读取，然后每一行的作为一个item组成list</span></span><br><span class="line">lines = open(path).readlines()</span><br><span class="line">records = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入pandas的两个方法</span></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame, Series</span><br><span class="line"><span class="comment"># 导入pandas包，并命名为pd</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 建立DataFrame对象，把key作为列名，value作为值填到一张表中，没有的键值对会用NaN（空值）填充</span></span><br><span class="line"><span class="comment"># 并自动生成索引，就是左边的0 1 2 3...</span></span><br><span class="line">frame = DataFrame(records)</span><br><span class="line"><span class="comment"># 打印出来看一下（这是一个pandas对象）</span></span><br><span class="line">print(frame)</span><br></pre></td></tr></table></figure>

<pre><code>       _heartbeat_                                                  a  \
0              NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
1              NaN                             GoogleMaps/RochesterNY   
2              NaN  Mozilla/4.0 (compatible; MSIE 8.0; Windows NT ...   
3              NaN  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8)...   
4              NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
5              NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
6              NaN  Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1...   
7              NaN  Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/2...   
8              NaN  Opera/9.80 (X11; Linux zbov; U; en) Presto/2.1...   
9              NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
10             NaN  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.2)...   
11             NaN  Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4...   
12             NaN  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.2)...   
13    1.331923e+09                                                NaN   
14             NaN  Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US...   
15             NaN  Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1...   
16             NaN  Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1...   
17             NaN  Mozilla/5.0 (Macintosh; Intel Mac OS X 10.5; r...   
18             NaN                             GoogleMaps/RochesterNY   
19             NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
20             NaN  Mozilla/5.0 (compatible; MSIE 9.0; Windows NT ...   
21             NaN  Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6...   
22             NaN  Mozilla/4.0 (compatible; MSIE 8.0; Windows NT ...   
23             NaN  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3)...   
24             NaN  Mozilla/5.0 (Windows; U; Windows NT 5.1; es-ES...   
25             NaN  Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1...   
26             NaN  Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1...   
27             NaN  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8)...   
28             NaN  Mozilla/5.0 (iPad; CPU OS 5_0_1 like Mac OS X)...   
29             NaN  Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X...   
...            ...                                                ...   
3530           NaN  Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1...   
3531           NaN  Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6...   
3532           NaN  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.2)...   
3533           NaN  Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) A...   
3534           NaN  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8)...   
3535           NaN  Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/...   
3536           NaN  Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; e...   
3537           NaN  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.2)...   
3538           NaN  Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Ma...   
3539           NaN    Mozilla/5.0 (compatible; Fedora Core 3) FC3 KDE   
3540           NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
3541           NaN  Mozilla/5.0 (X11; U; OpenVMS AlphaServer_ES40;...   
3542           NaN  Mozilla/5.0 (compatible; MSIE 9.0; Windows NT ...   
3543  1.331927e+09                                                NaN   
3544           NaN  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0.1) ...   
3545           NaN  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.2)...   
3546           NaN  Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Ma...   
3547           NaN  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8)...   
3548           NaN  Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Ma...   
3549           NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
3550           NaN  Mozilla/4.0 (compatible; MSIE 8.0; Windows NT ...   
3551           NaN  Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKi...   
3552           NaN  Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US...   
3553           NaN  Mozilla/4.0 (compatible; MSIE 7.0; Windows NT ...   
3554           NaN  Mozilla/4.0 (compatible; MSIE 7.0; Windows NT ...   
3555           NaN  Mozilla/4.0 (compatible; MSIE 9.0; Windows NT ...   
3556           NaN  Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1...   
3557           NaN                             GoogleMaps/RochesterNY   
3558           NaN                                     GoogleProducer   
3559           NaN  Mozilla/4.0 (compatible; MSIE 8.0; Windows NT ...   

                                          al     c                cy       g  \
0                             en-US,en;q=0.8    US           Danvers  A6qOVH   
1                                        NaN    US             Provo  mwszkS   
2                                      en-US    US        Washington  xxr3Qb   
3                                      pt-br    BR              Braz  zCaLwp   
4                             en-US,en;q=0.8    US        Shrewsbury  9b6kNl   
5                             en-US,en;q=0.8    US        Shrewsbury  axNK8c   
6        pl-PL,pl;q=0.8,en-US;q=0.6,en;q=0.4    PL             Luban  wcndER   
7                    bg,en-us;q=0.7,en;q=0.3  None               NaN  wcndER   
8                                  en-US, en  None               NaN  wcndER   
9        pt-BR,pt;q=0.8,en-US;q=0.6,en;q=0.4  None               NaN  zCaLwp   
10                            en-us,en;q=0.5    US           Seattle  vNJS4H   
11                            en-us,en;q=0.5    US        Washington  wG7OIH   
12                            en-us,en;q=0.5    US        Alexandria  vNJS4H   
13                                       NaN   NaN               NaN     NaN   
14                            en-us,en;q=0.5    US          Marietta  2rOUYc   
15       zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4    HK  Central District  nQvgJp   
16       zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4    HK  Central District   XdUNr   
17                            en-us,en;q=0.5    US         Buckfield  zH1BFf   
18                                       NaN    US             Provo  mwszkS   
19       it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4    IT            Venice  wcndER   
20                                     es-ES    ES             Alcal  zQ95Hi   
21                            en-us,en;q=0.5    US     Davidsonville  wcndER   
22                                     en-us    US         Hockessin  y3ZImz   
23                                     en-us    US            Lititz  wWiOiD   
24       es-es,es;q=0.8,en-us;q=0.5,en;q=0.3    ES            Bilbao  wcndER   
25    en-GB,en;q=0.8,en-US;q=0.6,en-AU;q=0.4    MY      Kuala Lumpur  wcndER   
26       ro-RO,ro;q=0.8,en-US;q=0.6,en;q=0.4    CY           Nicosia  wcndER   
27                            en-US,en;q=0.8    BR            SPaulo  zCaLwp   
28                                     en-us  None               NaN  vNJS4H   
29                                     en-us  None               NaN  FPX0IM   
...                                      ...   ...               ...     ...   
3530                          en-US,en;q=0.8    US     San Francisco  xVZg4P   
3531                                   en-US  None               NaN  wcndER   
3532                          en-us,en;q=0.5    US        Washington  Au3aUS   
3533                                   en-us    US      Jacksonville  b2UtUJ   
3534                                   en-us    US            Frisco  vNJS4H   
3535                                   en-us    US           Houston  zIgLx8   
3536                          en-US,en;q=0.5  None               NaN  xIcyim   
3537     es-es,es;q=0.8,en-us;q=0.5,en;q=0.3    HN       Tegucigalpa  zCaLwp   
3538                                   en-us    US       Los Angeles  qMac9k   
3539                                     NaN    US          Bellevue  zu2M5o   
3540                          en-US,en;q=0.8    US            Payson  wcndER   
3541                                     NaN    US          Bellevue  zu2M5o   
3542                                   en-us    US         Pittsburg  y3reI1   
3543                                     NaN   NaN               NaN     NaN   
3544                          en-us,en;q=0.5    US        Wentzville  vNJS4H   
3545                          en-us,en;q=0.5    US     Saint Charles  vNJS4H   
3546                                   en-us    US       Los Angeles  qMac9k   
3547                                   en-us    US     Silver Spring  y0jYkg   
3548                                   en-us    US           Mcgehee  y5rMac   
3549     sv-SE,sv;q=0.8,en-US;q=0.6,en;q=0.4    SE          Sollefte   eH8wu   
3550                                   en-us    US      Conshohocken  A00b72   
3551                          en-US,en;q=0.8  None               NaN  wcndER   
3552                                     NaN    US           Decatur  rqgJuE   
3553                                   en-us    US        Shrewsbury  9b6kNl   
3554                                   en-us    US        Shrewsbury  axNK8c   
3555                                      en    US           Paramus  e5SvKE   
3556                          en-US,en;q=0.8    US     Oklahoma City  jQLtP4   
3557                                     NaN    US             Provo  mwszkS   
3558                                     NaN    US     Mountain View  zjtI4X   
3559                                   en-US    US           Mc Lean  qxKrTK   

       gr       h            hc           hh   kw              l  \
0      MA  wfLQtf  1.331823e+09    1.usa.gov  NaN        orofrog   
1      UT  mwszkS  1.308262e+09         j.mp  NaN          bitly   
2      DC  xxr3Qb  1.331920e+09    1.usa.gov  NaN          bitly   
3      27  zUtuOu  1.331923e+09    1.usa.gov  NaN       alelex88   
4      MA  9b6kNl  1.273672e+09       bit.ly  NaN          bitly   
5      MA  axNK8c  1.273673e+09       bit.ly  NaN          bitly   
6      77  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
7     NaN  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
8     NaN  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
9     NaN  zUtuOu  1.331923e+09    1.usa.gov  NaN       alelex88   
10     WA  u0uD9q  1.319564e+09    1.usa.gov  NaN   o_4us71ccioa   
11     DC  A0nRz4  1.331816e+09    1.usa.gov  NaN    darrellissa   
12     VA  u0uD9q  1.319564e+09    1.usa.gov  NaN   o_4us71ccioa   
13    NaN     NaN           NaN          NaN  NaN            NaN   
14     GA  2rOUYc  1.255770e+09    1.usa.gov  NaN          bitly   
15     00  rtrrth  1.317318e+09         j.mp  NaN     walkeryuen   
16     00  qWkgbq  1.317318e+09         j.mp  NaN     walkeryuen   
17     ME  x3jOIv  1.331840e+09    1.usa.gov  NaN  andyzieminski   
18     UT  mwszkS  1.308262e+09    1.usa.gov  NaN          bitly   
19     20  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
20     51  ytZYWR  1.331671e+09    bitly.com  NaN        jplnews   
21     MD  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
22     DE  y3ZImz  1.331064e+09    1.usa.gov  NaN          bitly   
23     PA  wWiOiD  1.330218e+09    1.usa.gov  NaN          bitly   
24     59  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
25     14  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
26     04  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
27     27  zUtuOu  1.331923e+09    1.usa.gov  NaN       alelex88   
28    NaN  u0uD9q  1.319564e+09    1.usa.gov  NaN   o_4us71ccioa   
29    NaN  FPX0IL  1.331923e+09    1.usa.gov  NaN   twittershare   
...   ...     ...           ...          ...  ...            ...   
3530   CA  wqUkTo  1.331908e+09  go.nasa.gov  NaN    nasatwitter   
3531  NaN  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
3532   DC  A9ct6C  1.331926e+09    1.usa.gov  NaN          ncsha   
3533   FL  ieCdgH  1.301393e+09  go.nasa.gov  NaN    nasatwitter   
3534   TX  u0uD9q  1.319564e+09    1.usa.gov  NaN   o_4us71ccioa   
3535   TX  yrPaLt  1.331903e+09      aash.to  NaN         aashto   
3536  NaN  yG1TTf  1.331728e+09  go.nasa.gov  NaN    nasatwitter   
3537   08  w63FZW  1.331547e+09    1.usa.gov  NaN      bufferapp   
3538   CA  qds1Ge  1.310474e+09    1.usa.gov  NaN  healthypeople   
3539   WA  zDhdro  1.331586e+09       bit.ly  NaN       glimtwin   
3540   UT  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
3541   WA  zDhdro  1.331586e+09    1.usa.gov  NaN       glimtwin   
3542   CA  y3reI1  1.331926e+09    1.usa.gov  NaN          bitly   
3543  NaN     NaN           NaN          NaN  NaN            NaN   
3544   MO  u0uD9q  1.319564e+09    1.usa.gov  NaN   o_4us71ccioa   
3545   IL  u0uD9q  1.319564e+09    1.usa.gov  NaN   o_4us71ccioa   
3546   CA  qds1Ge  1.310474e+09    1.usa.gov  NaN  healthypeople   
3547   MD  y0jYkg  1.331852e+09    1.usa.gov  NaN          bitly   
3548   AR  xANY6O  1.331916e+09    1.usa.gov  NaN    twitterfeed   
3549   24  7dtjei  1.260316e+09    1.usa.gov  NaN   tweetdeckapi   
3550   PA  yGSwzn  1.331918e+09    1.usa.gov  NaN        addthis   
3551  NaN  zkpJBR  1.331923e+09    1.usa.gov  NaN       bnjacobs   
3552   AL  xcz8vt  1.331227e+09    1.usa.gov  NaN      bootsnall   
3553   MA  9b6kNl  1.273672e+09       bit.ly  NaN          bitly   
3554   MA  axNK8c  1.273673e+09       bit.ly  NaN          bitly   
3555   NJ  fqPSr9  1.301298e+09    1.usa.gov  NaN   tweetdeckapi   
3556   OK  jQLtP4  1.307530e+09    1.usa.gov  NaN          bitly   
3557   UT  mwszkS  1.308262e+09         j.mp  NaN          bitly   
3558   CA  zjtI4X  1.327529e+09    1.usa.gov  NaN          bitly   
3559   VA  qxKrTK  1.312898e+09    1.usa.gov  NaN          bitly   

                            ll   nk  \
0      [42.576698, -70.954903]  1.0   
1     [40.218102, -111.613297]  0.0   
2        [38.9007, -77.043098]  1.0   
3     [-23.549999, -46.616699]  0.0   
4      [42.286499, -71.714699]  0.0   
5      [42.286499, -71.714699]  0.0   
6         [51.116699, 15.2833]  0.0   
7                          NaN  0.0   
8                          NaN  0.0   
9                          NaN  0.0   
10      [47.5951, -122.332603]  1.0   
11     [38.937599, -77.092796]  0.0   
12     [38.790901, -77.094704]  1.0   
13                         NaN  NaN   
14       [33.953201, -84.5177]  1.0   
15       [22.2833, 114.150002]  1.0   
16       [22.2833, 114.150002]  1.0   
17     [44.299702, -70.369797]  0.0   
18    [40.218102, -111.613297]  0.0   
19        [45.438599, 12.3267]  0.0   
20        [37.516701, -5.9833]  0.0   
21     [38.939201, -76.635002]  0.0   
22        [39.785, -75.682297]  0.0   
23       [40.174999, -76.3078]  0.0   
24            [43.25, -2.9667]  0.0   
25        [3.1667, 101.699997]  0.0   
26      [35.166698, 33.366699]  0.0   
27      [-23.5333, -46.616699]  0.0   
28                         NaN  0.0   
29                         NaN  1.0   
...                        ...  ...   
3530    [37.7645, -122.429398]  0.0   
3531                       NaN  0.0   
3532   [38.904202, -77.031998]  1.0   
3533   [30.279301, -81.585098]  1.0   
3534   [33.149899, -96.855499]  1.0   
3535   [29.775499, -95.415199]  1.0   
3536                       NaN  0.0   
3537        [14.1, -87.216698]  0.0   
3538  [34.041599, -118.298798]  0.0   
3539  [47.615398, -122.210297]  0.0   
3540  [40.014198, -111.738899]  0.0   
3541  [47.615398, -122.210297]  0.0   
3542    [38.0051, -121.838699]  0.0   
3543                       NaN  NaN   
3544   [38.790001, -90.854897]  1.0   
3545     [41.9352, -88.290901]  1.0   
3546  [34.041599, -118.298798]  1.0   
3547   [39.052101, -77.014999]  1.0   
3548   [33.628399, -91.356903]  1.0   
3549    [63.166698, 17.266701]  1.0   
3550       [40.0798, -75.2855]  0.0   
3551                       NaN  0.0   
3552   [34.572701, -86.940598]  0.0   
3553   [42.286499, -71.714699]  0.0   
3554   [42.286499, -71.714699]  0.0   
3555         [40.9445, -74.07]  1.0   
3556     [35.4715, -97.518997]  0.0   
3557  [40.218102, -111.613297]  0.0   
3558  [37.419201, -122.057404]  0.0   
3559   [38.935799, -77.162102]  0.0   

                                                      r             t  \
0     http://www.facebook.com/l/7AQEFzjSi/1.usa.gov/...  1.331923e+09   
1                              http://www.AwareMap.com/  1.331923e+09   
2                                  http://t.co/03elZC4Q  1.331923e+09   
3                                                direct  1.331923e+09   
4                   http://www.shrewsbury-ma.gov/selco/  1.331923e+09   
5                   http://www.shrewsbury-ma.gov/selco/  1.331923e+09   
6     http://plus.url.google.com/url?sa=z&amp;n=13319232...  1.331923e+09   
7                              http://www.facebook.com/  1.331923e+09   
8     http://www.facebook.com/l.php?u=http%3A%2F%2F1...  1.331923e+09   
9                                  http://t.co/o1Pd0WeV  1.331923e+09   
10                                               direct  1.331923e+09   
11                                 http://t.co/ND7SoPyo  1.331923e+09   
12                                               direct  1.331923e+09   
13                                                  NaN           NaN   
14                                               direct  1.331923e+09   
15    http://forum2.hkgolden.com/view.aspx?type=BW&amp;m...  1.331923e+09   
16    http://forum2.hkgolden.com/view.aspx?type=BW&amp;m...  1.331923e+09   
17                                 http://t.co/6Cx4ROLs  1.331923e+09   
18                             http://www.AwareMap.com/  1.331923e+09   
19                             http://www.facebook.com/  1.331923e+09   
20                             http://www.facebook.com/  1.331923e+09   
21                             http://www.facebook.com/  1.331923e+09   
22                                               direct  1.331923e+09   
23    http://www.facebook.com/l.php?u=http%3A%2F%2F1...  1.331923e+09   
24                             http://www.facebook.com/  1.331923e+09   
25                             http://www.facebook.com/  1.331923e+09   
26                 http://www.facebook.com/?ref=tn_tnmn  1.331923e+09   
27                                               direct  1.331923e+09   
28                                               direct  1.331923e+09   
29                                 http://t.co/5xlp0B34  1.331923e+09   
...                                                 ...           ...   
3530  http://www.facebook.com/l.php?u=http%3A%2F%2Fg...  1.331927e+09   
3531                                             direct  1.331927e+09   
3532                              http://www.ncsha.org/  1.331927e+09   
3533                                             direct  1.331927e+09   
3534                                             direct  1.331927e+09   
3535                                             direct  1.331927e+09   
3536                               http://t.co/g1VKE8zS  1.331927e+09   
3537                               http://t.co/A8TJyibE  1.331927e+09   
3538                                             direct  1.331927e+09   
3539                                             direct  1.331927e+09   
3540  http://www.facebook.com/l.php?u=http%3A%2F%2F1...  1.331927e+09   
3541                                             direct  1.331927e+09   
3542  http://www.facebook.com/l.php?u=http%3A%2F%2F1...  1.331927e+09   
3543                                                NaN           NaN   
3544                                             direct  1.331927e+09   
3545                                             direct  1.331927e+09   
3546                                             direct  1.331927e+09   
3547                                             direct  1.331927e+09   
3548  https://twitter.com/fdarecalls/status/18069759...  1.331927e+09   
3549                                             direct  1.331927e+09   
3550   http://www.linkedin.com/home?trk=hb_tab_home_top  1.331927e+09   
3551  http://plus.url.google.com/url?sa=z&amp;n=13319268...  1.331927e+09   
3552                                             direct  1.331927e+09   
3553                http://www.shrewsbury-ma.gov/selco/  1.331927e+09   
3554                http://www.shrewsbury-ma.gov/selco/  1.331927e+09   
3555                                             direct  1.331927e+09   
3556  http://www.facebook.com/l.php?u=http%3A%2F%2F1...  1.331927e+09   
3557                           http://www.AwareMap.com/  1.331927e+09   
3558                                             direct  1.331927e+09   
3559                               http://t.co/OEEEvwjU  1.331927e+09   

                       tz                                                  u  
0        America/New_York        http://www.ncbi.nlm.nih.gov/pubmed/22415991  
1          America/Denver        http://www.monroecounty.gov/etc/911/rss.php  
2        America/New_York  http://boxer.senate.gov/en/press/releases/0316...  
3       America/Sao_Paulo            http://apod.nasa.gov/apod/ap120312.html  
4        America/New_York  http://www.shrewsbury-ma.gov/egov/gallery/1341...  
5        America/New_York  http://www.shrewsbury-ma.gov/egov/gallery/1341...  
6           Europe/Warsaw  http://www.nasa.gov/mission_pages/nustar/main/...  
7                          http://www.nasa.gov/mission_pages/nustar/main/...  
8                          http://www.nasa.gov/mission_pages/nustar/main/...  
9                                    http://apod.nasa.gov/apod/ap120312.html  
10    America/Los_Angeles  https://www.nysdot.gov/rexdesign/design/commun...  
11       America/New_York  http://oversight.house.gov/wp-content/uploads/...  
12       America/New_York  https://www.nysdot.gov/rexdesign/design/commun...  
13                    NaN                                                NaN  
14       America/New_York               http://toxtown.nlm.nih.gov/index.php  
15         Asia/Hong_Kong  http://www.ssd.noaa.gov/PS/TROP/TCFP/data/curr...  
16         Asia/Hong_Kong  http://www.usno.navy.mil/NOOC/nmfc-ph/RSS/jtwc...  
17       America/New_York  http://www.usda.gov/wps/portal/usda/usdahome?c...  
18         America/Denver        http://www.monroecounty.gov/etc/911/rss.php  
19            Europe/Rome  http://www.nasa.gov/mission_pages/nustar/main/...  
20           Africa/Ceuta  http://voyager.jpl.nasa.gov/imagesvideo/uranus...  
21       America/New_York  http://www.nasa.gov/mission_pages/nustar/main/...  
22       America/New_York  http://portal.hud.gov/hudportal/documents/hudd...  
23       America/New_York  http://www.tricare.mil/mybenefit/ProfileFilter...  
24          Europe/Madrid  http://www.nasa.gov/mission_pages/nustar/main/...  
25      Asia/Kuala_Lumpur  http://www.nasa.gov/mission_pages/nustar/main/...  
26           Asia/Nicosia  http://www.nasa.gov/mission_pages/nustar/main/...  
27      America/Sao_Paulo            http://apod.nasa.gov/apod/ap120312.html  
28                         https://www.nysdot.gov/rexdesign/design/commun...  
29                         http://www.ed.gov/news/media-advisories/us-dep...  
...                   ...                                                ...  
3530  America/Los_Angeles  http://www.nasa.gov/multimedia/imagegallery/im...  
3531                       http://www.nasa.gov/mission_pages/nustar/main/...  
3532     America/New_York  http://portal.hud.gov/hudportal/HUD?src=/press...  
3533     America/New_York                         http://apod.nasa.gov/apod/  
3534      America/Chicago  https://www.nysdot.gov/rexdesign/design/commun...  
3535      America/Chicago  http://ntl.bts.gov/lib/44000/44300/44374/FHWA-...  
3536                       http://www.nasa.gov/mission_pages/hurricanes/a...  
3537  America/Tegucigalpa            http://apod.nasa.gov/apod/ap120312.html  
3538  America/Los_Angeles  http://healthypeople.gov/2020/connect/webinars...  
3539  America/Los_Angeles  http://www.federalreserve.gov/newsevents/press...  
3540       America/Denver  http://www.nasa.gov/mission_pages/nustar/main/...  
3541  America/Los_Angeles  http://www.federalreserve.gov/newsevents/press...  
3542  America/Los_Angeles  http://www.sba.gov/community/blogs/community-b...  
3543                  NaN                                                NaN  
3544      America/Chicago  https://www.nysdot.gov/rexdesign/design/commun...  
3545      America/Chicago  https://www.nysdot.gov/rexdesign/design/commun...  
3546  America/Los_Angeles  http://healthypeople.gov/2020/connect/webinars...  
3547     America/New_York  http://www.epa.gov/otaq/regs/fuels/additive/e1...  
3548      America/Chicago    http://www.fda.gov/Safety/Recalls/ucm296326.htm  
3549     Europe/Stockholm  http://www.nasa.gov/mission_pages/WISE/main/in...  
3550     America/New_York  http://www.nlm.nih.gov/medlineplus/news/fullst...  
3551                       http://www.nasa.gov/mission_pages/nustar/main/...  
3552      America/Chicago  http://travel.state.gov/passport/passport_5535...  
3553     America/New_York  http://www.shrewsbury-ma.gov/egov/gallery/1341...  
3554     America/New_York  http://www.shrewsbury-ma.gov/egov/gallery/1341...  
3555     America/New_York  http://www.fda.gov/AdvisoryCommittees/Committe...  
3556      America/Chicago  http://www.okc.gov/PublicNotificationSystem/Fo...  
3557       America/Denver        http://www.monroecounty.gov/etc/911/rss.php  
3558  America/Los_Angeles                http://www.ahrq.gov/qual/qitoolkit/  
3559     America/New_York  http://herndon-va.gov/Content/public_safety/Pu...  

[3560 rows x 18 columns]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印frame这个表中的‘tz’列的前10行</span></span><br><span class="line"><span class="comment"># 注意，这还是一个pandas对象，出了索引，还有Name：tz，dtype（数据类型）：object</span></span><br><span class="line">print(frame[<span class="string">'tz'</span>][:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>

<pre><code>0     America/New_York
1       America/Denver
2     America/New_York
3    America/Sao_Paulo
4     America/New_York
5     America/New_York
6        Europe/Warsaw
7                     
8                     
9                     
Name: tz, dtype: object</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计frame表格中‘tz’列的值的出现次数</span></span><br><span class="line">tz_counts = frame[<span class="string">'tz'</span>].value_counts()</span><br><span class="line"><span class="comment"># 输出前10个看看</span></span><br><span class="line"><span class="comment"># 空值出现了521次</span></span><br><span class="line">print(tz_counts[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>

<pre><code>America/New_York       1251
                        521
America/Chicago         400
America/Los_Angeles     382
America/Denver          191
Europe/London            74
Asia/Tokyo               37
Pacific/Honolulu         36
Europe/Madrid            35
America/Sao_Paulo        33
Name: tz, dtype: int64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空值处理起来会比较麻烦（直接进行操作容易报错）</span></span><br><span class="line"><span class="comment"># fillna（str）方法可以直接用str替代所有的空值</span></span><br><span class="line">clean_tz = frame[<span class="string">'tz'</span>].fillna(<span class="string">'Missing'</span>)</span><br><span class="line"><span class="comment"># 上边替代的不存在key的空值，但是还有另一种空值，key是存在的，但是value是空的（可以看作长度是0的字符串）</span></span><br><span class="line"><span class="comment"># 这里把所有value是‘’的替代成'Unknown'</span></span><br><span class="line">clean_tz[clean_tz == <span class="string">''</span>] = <span class="string">'Unknown'</span></span><br><span class="line"><span class="comment"># 我们再重新统计一遍看看</span></span><br><span class="line">tz_counts = clean_tz.value_counts()</span><br><span class="line">print(tz_counts[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>

<pre><code>America/New_York       1251
Unknown                 521
America/Chicago         400
America/Los_Angeles     382
America/Denver          191
Missing                 120
Europe/London            74
Asia/Tokyo               37
Pacific/Honolulu         36
Europe/Madrid            35
Name: tz, dtype: int64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义画布尺寸为10*4 单位是英寸</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;matplotlib.figure.Figure at 0x10d7ae940&gt;




&lt;matplotlib.figure.Figure at 0x10d7ae940&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把tz_counts的统计结果绘制成图，类型为柱状图bar，横向h（horizontal）</span></span><br><span class="line"><span class="comment"># kind : str</span></span><br><span class="line"><span class="comment"># ‘line’ : line plot (default)</span></span><br><span class="line"><span class="comment"># ‘bar’ : vertical bar plot</span></span><br><span class="line"><span class="comment"># ‘barh’ : horizontal bar plot</span></span><br><span class="line"><span class="comment"># ‘hist’ : histogram</span></span><br><span class="line"><span class="comment"># ‘box’ : boxplot</span></span><br><span class="line"><span class="comment"># ‘kde’ : Kernel Density Estimation plot</span></span><br><span class="line"><span class="comment"># ‘density’ : same as ‘kde’</span></span><br><span class="line"><span class="comment"># ‘area’ : area plot</span></span><br><span class="line"><span class="comment"># ‘pie’ : pie plot</span></span><br><span class="line"><span class="comment"># ‘scatter’ : scatter plot</span></span><br><span class="line"><span class="comment"># ‘hexbin’ : hexbin plot</span></span><br><span class="line"><span class="comment"># rot : int, default None. Rotation for ticks (xticks for vertical, yticks for horizontal plots)</span></span><br><span class="line">tz_counts[:<span class="number">10</span>].plot(kind=<span class="string">'barh'</span>, rot=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x10d784eb8&gt;</code></pre>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190415212511.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看看frame这个表格里‘a’列的第二行（index是1）是什么</span></span><br><span class="line">print(frame[<span class="string">'a'</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<pre><code>GoogleMaps/RochesterNY</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在jupyter里边直接写变量名会自动print出来，是一种不标准的简化写法</span></span><br><span class="line">frame[<span class="string">'a'</span>][<span class="number">50</span>]</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在jupyter里边直接写变量名会自动print出来，是一种不标准的简化写法</span></span><br><span class="line">frame[<span class="string">'a'</span>][<span class="number">51</span>]</span><br></pre></td></tr></table></figure>

<pre><code>&#39;Mozilla/5.0 (Linux; U; Android 2.2.2; en-us; LG-P925/V10e Build/FRG83G) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dropna()函数可以去掉包含有NaN值得item</span></span><br><span class="line"><span class="comment"># frame.a.drapna()就是提取frame表格里列表为a的那一列，去除掉NA值得那些行的值</span></span><br><span class="line"><span class="comment"># x.split(str) 通过指定分隔符str对字符串x进行切片，默认分隔符为空格，x.split(str)[0]意在取切完片的第一个值</span></span><br><span class="line"><span class="comment"># [x.split()[0] for x in frame.a.dropna()]就是提取frame表格里列表为a的那一列，去除掉NA值得那些行的值，并用split进行分割，并且最后保存分割后的第一个值，构成一个list</span></span><br><span class="line"><span class="comment"># Series是Pandas包中的方法，构建Series对象，添加索引</span></span><br><span class="line">results = Series([x.split()[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> frame.a.dropna()])</span><br><span class="line"><span class="comment"># 打印出来看看，后边的乱七八糟的信息已经没有了</span></span><br><span class="line">results[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<pre><code>0               Mozilla/5.0
1    GoogleMaps/RochesterNY
2               Mozilla/4.0
3               Mozilla/5.0
4               Mozilla/5.0
dtype: object</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pandas对象又可以直接通过value_counts方法做统计了，取出前8个看看</span></span><br><span class="line">results.value_counts()[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<pre><code>Mozilla/5.0                 2594
Mozilla/4.0                  601
GoogleMaps/RochesterNY       121
Opera/9.80                    34
TEST_INTERNET_AGENT           24
GoogleProducer                21
Mozilla/6.0                    5
BlackBerry8520/5.0.0.681       4
dtype: int64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frame.a.notnull()：frame表格的a列中，不是NaN就是true，是NaN就是False</span></span><br><span class="line"><span class="comment"># frame[frame.a.notnull()]：取出frame这个表格中所有a列不为NaN的行</span></span><br><span class="line">cframe = frame[frame.a.notnull()]</span><br><span class="line"><span class="comment"># 随便打几行看看，a列没有NaN（其他列暂时不管）</span></span><br><span class="line">cframe[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<pre><code>（表格太大了，略）</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cframe['a'].str 意思是将cframe表格中的‘a’列取出来，转化为padas 中string方法组成的列表，可以调用string相关的方法</span></span><br><span class="line"><span class="comment"># .contains('Windows') string中包含Windows返回True，不包含返回False</span></span><br><span class="line"><span class="comment"># 顺便输出前10行看看</span></span><br><span class="line">cframe[<span class="string">'a'</span>].str.contains(<span class="string">'Windows'</span>)[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<pre><code>0     True
1    False
2     True
3    False
4     True
5     True
6     True
7     True
8    False
9     True
Name: a, dtype: bool</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要理解np.where()这个函数，先看下边几行</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; a</span></span><br><span class="line"><span class="comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; np.where(a &lt; 5, 0, 1)</span></span><br><span class="line"><span class="comment"># array([ 0,  0,  0,  0,  0, 1, 1, 1, 1, 1])</span></span><br><span class="line"><span class="comment"># 也就是说，对于array a，满足&lt;5的项，用0代替，不满足&lt;5的项用1代替</span></span><br><span class="line"><span class="comment"># np.where(cframe['a'].str.contains('Windows'), 'Windows', 'Not Windows')，返回True的用Windows替代，返回False的用Not Windows替代</span></span><br><span class="line">operating_system = np.where(cframe[<span class="string">'a'</span>].str.contains(<span class="string">'Windows'</span>),</span><br><span class="line">                            <span class="string">'Windows'</span>, <span class="string">'Not Windows'</span>)</span><br><span class="line"><span class="comment"># 打印前五行，因通过numpy方法得到的结果，所以是一个numpy array</span></span><br><span class="line">operating_system[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<pre><code>array([&#39;Windows&#39;, &#39;Not Windows&#39;, &#39;Windows&#39;, &#39;Not Windows&#39;, &#39;Windows&#39;],
      dtype=&#39;&lt;U11&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cframe.groupby([key1, key2, ...])为将cframe表格中的数据按照key进行分组</span></span><br><span class="line"><span class="comment"># key可以是2种：1. cframe表格中的列名，2.长度和cframe表格相同的数组</span></span><br><span class="line"><span class="comment"># cframe.groupby(['tz', operating_system])的意思就是：</span></span><br><span class="line"><span class="comment"># 第一个分组维度为‘tz’列，改列值相同的为一组</span></span><br><span class="line"><span class="comment"># 第二个分组维度为operating_system数组，也就是Windows的一组，Not Windows的一组</span></span><br><span class="line"><span class="comment"># .size()为统计每个小组的数据量</span></span><br><span class="line"><span class="comment"># .unstack()为把堆叠的分组表格展开（把这个函数去掉试一下就知道区别了）</span></span><br><span class="line"><span class="comment"># .fillna(0)之前说了，把不存在值的格子填充上0</span></span><br><span class="line">agg_counts = cframe.groupby([<span class="string">'tz'</span>, operating_system]).size().unstack().fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 打出前10行看看</span></span><br><span class="line"><span class="comment"># 第一行不是总数，tz的值为空字符串‘’而已</span></span><br><span class="line">agg_counts[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe"><thead><tr style="text-align: right;"><th></th><th>Not Windows</th><th>Windows</th></tr><tr><th>tz</th><th></th><th></th></tr></thead><tbody><tr><th></th><td>245.0</td><td>276.0</td></tr><tr><th>Africa/Cairo</th><td>0.0</td><td>3.0</td></tr><tr><th>Africa/Casablanca</th><td>0.0</td><td>1.0</td></tr><tr><th>Africa/Ceuta</th><td>0.0</td><td>2.0</td></tr><tr><th>Africa/Johannesburg</th><td>0.0</td><td>1.0</td></tr><tr><th>Africa/Lusaka</th><td>0.0</td><td>1.0</td></tr><tr><th>America/Anchorage</th><td>4.0</td><td>1.0</td></tr><tr><th>America/Argentina/Buenos_Aires</th><td>1.0</td><td>0.0</td></tr><tr><th>America/Argentina/Cordoba</th><td>0.0</td><td>1.0</td></tr><tr><th>America/Argentina/Mendoza</th><td>0.0</td><td>1.0</td></tr></tbody></table></div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># agg_counts.sum(1) 意思是按照第二维方向相加，也就是把Windows和Not Windows加到一起</span></span><br><span class="line"><span class="comment"># 这里打印10行</span></span><br><span class="line">agg_counts_sum = agg_counts.sum(<span class="number">1</span>)</span><br><span class="line">agg_counts_sum[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<pre><code>tz
                                  521.0
Africa/Cairo                        3.0
Africa/Casablanca                   1.0
Africa/Ceuta                        2.0
Africa/Johannesburg                 1.0
Africa/Lusaka                       1.0
America/Anchorage                   5.0
America/Argentina/Buenos_Aires      1.0
America/Argentina/Cordoba           1.0
America/Argentina/Mendoza           1.0
dtype: float64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .argsort()：按照从小到大的顺序排列，返回排列后item在原数组中对应的index</span></span><br><span class="line">indexer = agg_counts_sum.argsort()</span><br><span class="line"><span class="comment"># 打出前10个，这个时候左边的tz和右边的数字已经没有对应关系了</span></span><br><span class="line"><span class="comment"># 第一个24表示，按照从小到大排序，排在第一位的应该是原本数组中排在第25个（index为24）的那个item</span></span><br><span class="line"><span class="comment"># 第二个20表示，按照从小到大排序，排在第二位的应该是原本数组中排在第21个（index为20）的那个item</span></span><br><span class="line"><span class="comment"># 以此类推</span></span><br><span class="line">indexer[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<pre><code>tz
                                  24
Africa/Cairo                      20
Africa/Casablanca                 21
Africa/Ceuta                      92
Africa/Johannesburg               87
Africa/Lusaka                     53
America/Anchorage                 54
America/Argentina/Buenos_Aires    57
America/Argentina/Cordoba         26
America/Argentina/Mendoza         55
dtype: int64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让原本的数字按照这个排好的indexer输出，我们就可以得到排序后的数据了</span></span><br><span class="line">agg_counts_sum[indexer]</span><br></pre></td></tr></table></figure>

<pre><code>tz
America/Mazatlan                     1.0
America/La_Paz                       1.0
America/Lima                         1.0
Europe/Volgograd                     1.0
Europe/Sofia                         1.0
Asia/Manila                          1.0
Asia/Nicosia                         1.0
Asia/Riyadh                          1.0
America/Monterrey                    1.0
Asia/Novosibirsk                     1.0
Australia/Queensland                 1.0
America/Santo_Domingo                1.0
Asia/Yekaterinburg                   1.0
America/St_Kitts                     1.0
America/Tegucigalpa                  1.0
America/Montevideo                   1.0
Europe/Ljubljana                     1.0
Asia/Pontianak                       1.0
Europe/Uzhgorod                      1.0
Africa/Casablanca                    1.0
Africa/Johannesburg                  1.0
Africa/Lusaka                        1.0
America/Argentina/Buenos_Aires       1.0
America/Argentina/Cordoba            1.0
America/Argentina/Mendoza            1.0
Europe/Skopje                        1.0
America/Caracas                      1.0
America/Costa_Rica                   1.0
Asia/Kuching                         1.0
Europe/Riga                          2.0
                                   ...  
America/Montreal                     9.0
Asia/Calcutta                        9.0
America/Puerto_Rico                 10.0
Asia/Hong_Kong                      10.0
Europe/Helsinki                     10.0
Europe/Prague                       10.0
Europe/Oslo                         10.0
Europe/Moscow                       10.0
Pacific/Auckland                    11.0
America/Vancouver                   12.0
Europe/Stockholm                    14.0
Europe/Paris                        14.0
America/Mexico_City                 15.0
Europe/Warsaw                       16.0
America/Phoenix                     20.0
America/Indianapolis                20.0
Europe/Amsterdam                    22.0
America/Rainy_River                 25.0
Europe/Rome                         27.0
Europe/Berlin                       28.0
America/Sao_Paulo                   33.0
Europe/Madrid                       35.0
Pacific/Honolulu                    36.0
Asia/Tokyo                          37.0
Europe/London                       74.0
America/Denver                     191.0
America/Los_Angeles                382.0
America/Chicago                    400.0
                                   521.0
America/New_York                  1251.0
Length: 97, dtype: float64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># agg_counts.take([index1, index2, ...], axis=0)：在axis维度（0为行，1为列）上，按照index顺序取出数据</span></span><br><span class="line"><span class="comment"># 这里没有输入axis的值，默认为0，按行取</span></span><br><span class="line"><span class="comment"># 顺序为按照indexer</span></span><br><span class="line"><span class="comment"># [-10:]：把最后10个取出来</span></span><br><span class="line">count_subset = agg_counts.take(indexer)[<span class="number">-10</span>:]</span><br><span class="line">count_subset</span><br></pre></td></tr></table></figure>

<div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe"><thead><tr style="text-align: right;"><th></th><th>Not Windows</th><th>Windows</th></tr><tr><th>tz</th><th></th><th></th></tr></thead><tbody><tr><th>America/Sao_Paulo</th><td>13.0</td><td>20.0</td></tr><tr><th>Europe/Madrid</th><td>16.0</td><td>19.0</td></tr><tr><th>Pacific/Honolulu</th><td>0.0</td><td>36.0</td></tr><tr><th>Asia/Tokyo</th><td>2.0</td><td>35.0</td></tr><tr><th>Europe/London</th><td>43.0</td><td>31.0</td></tr><tr><th>America/Denver</th><td>132.0</td><td>59.0</td></tr><tr><th>America/Los_Angeles</th><td>130.0</td><td>252.0</td></tr><tr><th>America/Chicago</th><td>115.0</td><td>285.0</td></tr><tr><th></th><td>245.0</td><td>276.0</td></tr><tr><th>America/New_York</th><td>339.0</td><td>912.0</td></tr></tbody></table></div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置一块自定义大小的画布，生成画布对象（这里没写残书就是默认）</span></span><br><span class="line">plt.figure()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;matplotlib.figure.Figure at 0x112f87e10&gt;




&lt;matplotlib.figure.Figure at 0x112f87e10&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把count_subset这个表格中的数据绘制成图，类型为柱状图bar，横向h（horizontal）</span></span><br><span class="line"><span class="comment"># stacked=True表示多个维度的数据堆叠显示（不明白的话改成False看看就知道了）</span></span><br><span class="line">count_subset.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1134d2630&gt;</code></pre>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190416211434.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置一块自定义大小的画布，生成画布对象（这里没写残书就是默认）</span></span><br><span class="line">plt.figure()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;matplotlib.figure.Figure at 0x1136fd2e8&gt;




&lt;matplotlib.figure.Figure at 0x1136fd2e8&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># count_subset.sum(1)：把count_subset按照第一维的方向相加</span></span><br><span class="line"><span class="comment"># count_subset.div(count_subset.sum(1),axis=0)：按行除以相加的结果</span></span><br><span class="line"><span class="comment"># 相当于把每一行所有数值变成了在当前行占的百分比</span></span><br><span class="line">normed_subset = count_subset.div(count_subset.sum(<span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># stacked=True表示多个维度的数据堆叠显示（不明白的话改成False看看就知道了）</span></span><br><span class="line">normed_subset.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1138b6fd0&gt;</code></pre>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190416211504.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机应用数学学习笔记（三）：通过稀疏表示进行图像修复（IMAGE INPAINTING VIA SPARSE REPRESENTATION）</title>
    <url>/2019/06/19/%E9%80%9A%E8%BF%87%E7%A8%80%E7%96%8F%E8%A1%A8%E7%A4%BA%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D%EF%BC%88IMAGE-INPAINTING-VIA-SPARSE-REPRESENTATION%EF%BC%89/</url>
    <content><![CDATA[<p>这篇文章提出了一种新的基于冗余字典的图像信号稀疏表示的补丁式图像修复算法，该算法保证低风险的条件下，在处理大的孔的同时，保存图像细节。</p>
<p>与现有的所有工作不同，这篇文章假设每个图像块在冗余字典上允许稀疏表示的假设下，从连续不完全信号恢复的角度考虑图像修复问题。为了保证填充孔与周围环境之间的视觉合理性和一致性约束，这篇文章建议直接从当前图像的完整源区域采样，构造一个冗余信号字典。然后，我们依次计算出孔边界上每个不完整补片的稀疏表示，并将其恢复到整个孔被填满为止。</p>
<p>实验结果表明，该方法能够有效地填充视觉上可信的信息，并降低引入不需要的对象的风险。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一般而言，文献中有两种主要的图像修复方法：基于PDE的方法和基于范例的方法。</p>
<ul>
<li>基于PDE的方法目的是将已知区域中的线或边缘延伸到用户指定的区域，这些区域充分注意结构传播，但由于其情况下的模糊效应而不适合处理大区域。</li>
<li>基于范例的方法采用纹理合成方法来合成用户指定区域中的像素。</li>
</ul>
<p>这篇文章主要的贡献是借用信号稀疏表示技术来解决修复问题，并弥合稀疏表示和纹理合成之间的差距。</p>
<p>信号稀疏表示意味着信号允许在冗余字典上进行稀疏表示，我们将在下一节中进行讨论。在这篇文章中，我们将此问题视为不完整图像信号的恢复，每个信号对应一个补丁。他们根据每个补丁的稀疏表示智能地填补漏洞。</p>
<h1 id="稀疏表示"><a href="#稀疏表示" class="headerlink" title="稀疏表示"></a>稀疏表示</h1><p>Donoho证明了L1范数是L0范数的良好近似。因此，许多技术得到了支持。</p>
<p>Tibshirani提出了一种回归方法：Lasso。他在普通最小二乘回归的损失函数中加入了L1范数罚分，导致系数的稀疏性。</p>
<p>给定字典 $\mathbf{x}=\left[\mathbf{x}^{1}, \mathbf{x}^{2}, \ldots, \mathbf{x}^{\mathbf{N}}\right]$ 以及输入信号 $\mathbf{y}=\left[y_{1}, y_{2}, \dots, y_{p}\right]^{T}$ ，并假定两者都已经进行了正则化。Lasso算法是用来在给定字典情况下估算一个信号的系数 $\beta$ 通过公式：</p>
<p>$\widehat{\boldsymbol{\beta}}=\arg\min\lbrace||\mathbf{y}-\mathbf{x} \boldsymbol{\beta}||_2^2+\lambda||\boldsymbol{\beta}||_1\rbrace$</p>
<p>$||\boldsymbol{\beta}||_{1}$ 引入拟合系数向量的稀疏性，参数 $\lambda$ 控制重构误差与稀疏性之间的权衡。这个公式基于模型 $\mathbf{y}=\mathbf{x} \boldsymbol{\beta}$ 且 $\boldsymbol{\beta}$ 需要是稀疏的。</p>
<p>更有趣的是，当信号的某些组件被破坏时，这意味着模型被修改为</p>
<p>$\mathbf{y}=\mathbf{x} \boldsymbol{\beta}+\mathbf{e}$</p>
<p>其中 $\mathbf{e}$ 代表误差，当且仅当 $y_i$ 是损坏的情况下， $e_i$ 非零。这可以用来帮助我们找到损坏的信号。但是在这篇应用中，需要被修正的区域已经被用户标记，因此我们可以直接判断像素点是否已经被损坏。</p>
<p>我们将损坏的信号的索引集标记为 $I,I=\lbrace i|e_i\neq0\rbrace$ 。 $\boldsymbol{y}_{|I}$ 表示从 $\boldsymbol{y}$ 中去掉索引在 $I$ 中部分剩下的向量。 $\boldsymbol{x}_{|I}$ 是对应的词典矩阵，从去掉了 $\boldsymbol{x}$ 中所有索引在 $I$ 中部分剩下的列得到。 现在稀疏系数 $\boldsymbol{\beta}$ 可以通过下边公式来进行计算：</p>
<p>$\widehat{\boldsymbol{\beta}} = \arg \min\lbrace || \mathbf{y}_{|I}-\mathbf{x}_{|I}\boldsymbol{\beta}||_2^2+\lambda||\boldsymbol{\beta}||_1\rbrace$</p>
<p>然后我们通过计算出的 $\widehat{\boldsymbol{\beta}}$ 来修复受损的信号：</p>
<p>$\hat{y}_{i}=\left\lbrace\begin{array}{ll}{y_i,} &amp; {\text { if } i \notin I} \\ {(\mathbf{x} \hat{\boldsymbol{\beta}})_i,} &amp; {\text { if } i \in I}\end{array}\right.$</p>
<h1 id="图像修复算法"><a href="#图像修复算法" class="headerlink" title="图像修复算法"></a>图像修复算法</h1><h2 id="填补顺序"><a href="#填补顺序" class="headerlink" title="填补顺序"></a>填补顺序</h2><p>给定输入图像，用户选择要移除和填充的目标区域。然后通常将丢失的部分视为目标区域。当然，它也可以由用户指定。我们用 $\Omega$ 表示目标区域，用 $\Phi$ 表示源区域，用 $\delta\Omega$ 表示目标区域的边缘。</p>
<p>这篇文章从孔的边界向内部生成图像。这篇工作里按照<a href="http://vision.csee.wvu.edu/~doretto/courses/2017-fall-cp/reading/ObjectRemovalByExemplar-BasedInpainting_CVPR2003.pdf" target="_blank" rel="noopener">[6]</a>来确定填充顺序，因为它有效地保留了结构信息。</p>
<p>在每次迭代过程中，我们计算边缘 $\delta\Omega$ 上的每个像素 $p$ 的优先级 $P(p)$ ，并选择优先级最高的像素设为 $p_m$ 。以 $p_m$ 为中心的补丁将在当前迭代中解决。由于不定的中心在边界上，补丁的一部分像素在目标区域中。因此这个补丁可以被看作是一个不完整的信号，现有部分的信号来自源区域，而缺失的部分来自目标区域。接下来通过稀疏表示来补全这个信号即可。当前不定补全之后再更新边界，进行下一轮迭代即可。</p>
<h2 id="信号恢复"><a href="#信号恢复" class="headerlink" title="信号恢复"></a>信号恢复</h2><p>现在我们已经定位了像素 $p_m$ 。用一个k维向量 $\Psi_{P_m}$ 表示以 $p_m$ 为中心的补丁。显然 k=nxn ，这里n表示补丁的宽和高。现在根据之前讲的通过稀疏表示，将 $\Psi_{P_m}$ 看作 $\boldsymbol{y}$ ，也就是需要恢复的信号，更加直观地说， $\boldsymbol{y}$ 中属于目标区域的部分的索引集可以被看作  $\boldsymbol{I}$ 。</p>
<p>因此现在，我们可以通过以下两个公式来计算稀疏表示：</p>
<p>$\widehat{\boldsymbol{\beta}} = \arg \min\lbrace ||\Psi_{Pm|I}-\mathbf{x}_{|I} \boldsymbol{\beta}||_2^2+\lambda||\boldsymbol{\beta}||_1\rbrace$</p>
<p>$\hat{\Psi}_{p_m}^i=\left\lbrace\begin{array}{ll}{\Psi_{p_m}^i,} &amp; {\text { if } i \notin I} \\ {(\mathbf{x} \hat{\boldsymbol{\beta}})_i,} &amp; {\text { if } i \in I}\end{array}\right.$</p>
<h2 id="字典构建"><a href="#字典构建" class="headerlink" title="字典构建"></a>字典构建</h2><p>为了计算信号的稀疏表示，我们首先需要构造一个字典，并在此基础上求解拉索回归。可以采用许多技术来修复字典，例如匹配追踪、基追踪、或K-SVD。</p>
<p>根据我们的观察，填充的目标区域应该在视觉上与源区域一致，这样整个图像看起来似乎是可信的，这意味着不仅纹理应该一致，而且噪音也应该是相同的水平。因此，我们直接对源区域中的所有补丁进行采样，甚至使用它们来构造字典，而不需要进行任何预处理。</p>
<p>例如，如果我们从源区域获得m个补丁，那么固定字典应该有m列。每列对应一个补丁。这种将原始图像作为词典的技术已经应用于人脸识别、背景建模等领域，取得了令人鼓舞的效果。</p>
<h2 id="整体算法"><a href="#整体算法" class="headerlink" title="整体算法"></a>整体算法</h2><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190618131653.png"></p>
<blockquote>
<p>reference:<br><a href="https://www.mendeley.com/catalogue/image-inpainting-via-sparse-representation/" target="_blank" rel="noopener">https://www.mendeley.com/catalogue/image-inpainting-via-sparse-representation/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机应用数学</category>
      </categories>
      <tags>
        <tag>计算机应用数学</tag>
        <tag>Image Inpainting</tag>
        <tag>Sparse Representation</tag>
        <tag>稀疏表示</tag>
        <tag>图像修复</tag>
      </tags>
  </entry>
  <entry>
    <title>量子计算学习笔记</title>
    <url>/2021/10/11/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="向量表示"><a href="#向量表示" class="headerlink" title="向量表示"></a>向量表示</h1><p>量子计算的基本单位是量子比特，量子比特用向量 $|\psi\rangle$ (狄拉克Dirac符号)来描述。</p>
<p>基态: $|g\rangle=|1\rangle=\left[ \begin{matrix} 0 \\ 1 \end{matrix} \right]$</p>
<p>激发态: $∣e\rangle=|0\rangle=\left[ \begin{matrix} 1 \\ 0 \end{matrix} \right]$ </p>
<p>在量子理论中，描述量子态的向量称为态矢，态矢分为左矢和右矢。相同描述对象的左矢和右矢互为转置共轭。</p>
<blockquote>
<p>pyqpanda中，dagger()函数可用于对逻辑门进行转置共轭操作</p>
</blockquote>
<p>右失（ket）： $|\psi\rangle=\left[ \begin{matrix} c_1 &amp; c_2 &amp; \cdots &amp; c_n \end{matrix} \right]^T=\left[ \begin{matrix} c_1 \\ c_2 \\ \vdots \\ c_n \end{matrix} \right]$ </p>
<p>左失（bra）： $\langle\psi|=\left[ \begin{matrix} c_1^* &amp; c_2^* &amp; \cdots &amp; c_n^* \end{matrix} \right]$ </p>
<p>并不是任意的二维向量都能用来描述一个qubit的状态，描述量子态的向量的模长必须为1，所谓向量的模长定义如下：</p>
<p>​ $M(\alpha) = \sqrt{|a_{1}|^{2} + |a_{2}|^{2} + … + |a_{n}|^{2}}$ </p>
<p>量子比特各维度的平方为量子处于该状态的概率。</p>
<h1 id="向量计算"><a href="#向量计算" class="headerlink" title="向量计算"></a>向量计算</h1><h2 id="基"><a href="#基" class="headerlink" title="基"></a>基</h2><p>对于一组向量 $|u_1\rangle, |u_2\rangle, \cdots, |u_n\rangle$ 张成（spanning）的 $n$ 维空间 $C^n$ ，空间中的任意向量可以表示为： $|v\rangle=\sum_i x_i u_i$ ,这个集合 ${|u_1\rangle, |u_2\rangle, \cdots, |u_n\rangle}$ 就称为 $C^n$ 的基（basis）。</p>
<h2 id="内积"><a href="#内积" class="headerlink" title="内积"></a>内积</h2><p>在 $C^n$ 上的内积表示为（注意 $a_i^*$ 为 $a_i$ 的共轭！）：</p>
<p> $\langle \alpha | \beta \rangle = (|\alpha\rangle, |\beta\rangle) = ((a_1, \cdots ,a_n),(b_1, \cdots, b_n)) = \sum_{i=1}^{n}a_i^*b_i$ </p>
<p>可以看做 $\langle \alpha|$ 共轭转置后得到的 $1 \times n$ 的矩阵与 $| \beta \rangle$ 构成的 $n \times 1$ 的矩阵的积,内积的结果是一个值。</p>
<h2 id="外积"><a href="#外积" class="headerlink" title="外积"></a>外积</h2><p>外积 $| \alpha \rangle \langle \beta |$ 可以看做 $\langle \alpha|$ 的 $n \times 1$ 的矩阵与 $| \beta \rangle$ 共轭转置后构成的 $1 \times n$ 的矩阵的积,外积的结果是一个矩阵！</p>
<h2 id="张量积"><a href="#张量积" class="headerlink" title="张量积"></a>张量积</h2><p>向量 $|\alpha\rangle$ 、 $|\beta\rangle$ 在 $C^n$ 、 $C^m$ 中的张量积为 $C^{n\times m}$ 中的向量： $|\alpha\rangle\otimes|\beta\rangle=|\alpha\rangle|\beta\rangle=|\alpha\beta\rangle$ ，计算方法为：</p>
<p> $\left[ \begin{matrix} a_1 \\ a_2 \end{matrix} \right]\times\left[ \begin{matrix} b_1 \\ b_2 \end{matrix} \right] = \left[ \begin{matrix} a_1 b_1 \\ a_1 b_2 \\ a_2 b_1 \\ a_2 b_2 \end{matrix} \right]$  </p>
<h1 id="常用算子（常见量子逻辑门）矩阵形式"><a href="#常用算子（常见量子逻辑门）矩阵形式" class="headerlink" title="常用算子（常见量子逻辑门）矩阵形式"></a>常用算子（常见量子逻辑门）矩阵形式</h1><h2 id="单比特量子逻辑门"><a href="#单比特量子逻辑门" class="headerlink" title="单比特量子逻辑门"></a>单比特量子逻辑门</h2><p>当单比特量子逻辑门作用于量子比特时，为门在前比特在后进行矩阵相乘，进而改变比特状态。</p>
<p>其中: </p>
<ul>
<li>$I$ 门不改变比特状态</li>
<li>$Hadamard$ 门可以使量子比特进入混沌态，即激发与否的概率均为一半</li>
<li>$Pauli-X$ 会使量子状态翻转</li>
<li>量子的状态改变通常通过旋转实现</li>
</ul>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20211009103200.png"></p>
<h2 id="多比特量子逻辑门"><a href="#多比特量子逻辑门" class="headerlink" title="多比特量子逻辑门"></a>多比特量子逻辑门</h2><p>当多比特量子逻辑门作用于多个量子比特时，为门在前，多个量子比特的张量积在后，进行矩阵相乘。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20211009103250.png"></p>
<h1 id="量子线路图"><a href="#量子线路图" class="headerlink" title="量子线路图"></a>量子线路图</h1><h2 id="基本约定"><a href="#基本约定" class="headerlink" title="基本约定"></a>基本约定</h2><p>在关系图中，每条实线都描述一个量子比特，更常见地是描述一个量子比特寄存器。按照约定，最上面那根线是量子比特寄存器0，其余的按顺序标记。根据描述，上面的示例线路作用于两个量子比特（或等效为作用于两个寄存器，每个寄存器由一个量子比特组成）。作用于一个或多个量子比特寄存器的门用一个框表示。例如，符号</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20211009105059.png"></p>
<p>量子门按时间顺序排列，最左侧的门是应用于量子比特的第一个门。 也就是说，如果你将线描述为包含量子态，那么这些线将按图中从左到右的顺序带着量子态通过每个门。 也就是说</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20211009105131.png"></p>
<p>是酉矩阵 $CBA$ 。矩阵乘法遵守相反的约定，即最先应用最右侧的矩阵。不过，在量子线路图中，最先应用的是最左侧的门。这种差异有时可能会导致混淆，因此有必要记下线性代数表示法和量子关系图之间的这一明显差异。</p>
<h2 id="受控门"><a href="#受控门" class="headerlink" title="受控门"></a>受控门</h2><p>多量子比特量子线路图中内置的另一个构造是控制。量子单个受控门表示为 $\Lambda(G)$ ，其中单个量子比特的值控制 $G$ 的应用。要理解该受控门的操作，可查看下面的示例，它是一个乘积态输入 $\Lambda(G)(\alpha|0\rangle+\beta|1\rangle)|\psi\rangle=\alpha|0\rangle|\psi\rangle+\alpha|1\rangle G|\psi\rangle$ 。也就是说，当且仅当控制量子比特采用值时，该受控门才对包含 $\phi$ 的寄存器应用 $G$ 。通常，我们在线路图中将这种受控操作描述为</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20211009105733.png"></p>
<p>在这里，黑色圆圈表示门受控的量子位，垂直线表示当控制量子比特采用值1时应用的酉操作。对于 $G=X$ 和 $G=Z$ 的特殊情况，我们引入了以下表示法来描述门的受控版本（请注意，受控 $X$ 门是 $CNOT$ 门）：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20211009105856.png"></p>
<h2 id="测量运算符"><a href="#测量运算符" class="headerlink" title="测量运算符"></a>测量运算符</h2><p>在线路图中直观呈现的剩余操作是测量。测量采用量子比特寄存器、对其进行测量，然后以经典信息的形式输出结果。测量操作由计量符号表示，它始终将输入看做是一个量子比特寄存器（表示为实线），将输出看做是经典信息（表示为双线）。具体来说，这种子线路如下所示：</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20211009110009.png"></p>
<blockquote>
<p>References:<br><a href="https://blog.csdn.net/si_ying/article/details/108303988" target="_blank" rel="noopener">https://blog.csdn.net/si_ying/article/details/108303988</a><br><a href="https://pyqpanda-toturial.readthedocs.io/" target="_blank" rel="noopener">https://pyqpanda-toturial.readthedocs.io/</a><br><a href="https://docs.microsoft.com/zh-cn/azure/quantum/concepts-circuits" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/azure/quantum/concepts-circuits</a><br><a href="https://www.cxyzjd.com/article/qq_43391414/118766778" target="_blank" rel="noopener">https://www.cxyzjd.com/article/qq_43391414/118766778</a><br><a href="https://swardsman.github.io/learning-q-sharp/" target="_blank" rel="noopener">https://swardsman.github.io/learning-q-sharp/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Quantum Computing</category>
      </categories>
      <tags>
        <tag>Quantum Computing</tag>
      </tags>
  </entry>
  <entry>
    <title>意大利语学习（四）：我的家（上）</title>
    <url>/2019/07/01/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%88%91%E7%9A%84%E5%AE%B6%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h1><h2 id="对话1"><a href="#对话1" class="headerlink" title="对话1"></a>对话1</h2><p>Anna：Che bella foto, Mario! È la tua famiglia? 这张照片真好看，Mario！这是你的家人吗？</p>
<p>Mario：Sì, la mia è una famiglia abbastanza numerosa 是的，我家里人挺多的</p>
<p>Anna：In quanti siete? 你们有几口人？</p>
<p>Mario：Siamo in cinque. Mio padre, mia madre, mio fratello, mia sorella, ed io 有五个。我爸爸，我妈妈，我哥哥，我妹妹，和我</p>
<p>Anna：Tuo padre, che lavoro fa? È un professore? 你爸爸是做什么工作的？是老师么？</p>
<p>Mario：No. È un ingegnere. Lavora in una fabbrica 不。他是个工程师。在工厂上班</p>
<p>Anna：Anche tua madre lavora? 你妈妈呢？也工作么？</p>
<p>Mario：Non, è già pensionata 不，他已经退休了</p>
<p>Anna：Questa la tua sorellina? È davvero carina! 这是你的妹妹？她真可爱！</p>
<p>Mario：Grazie. Si chiama Federica, frequenta ancora il liceo 谢谢！她叫Federica。还在上高中</p>
<p>Anna：Tuo fratello invece? 那你的哥哥呢？</p>
<p>Mario：Mio fratello si è laureato 4 anni fa in giurisprudenza. Ora fa il giornalista 我哥哥四年前就从法律专业毕业了。他现在是一名记者</p>
<p>Anna：È molto fortunato! 真幸运！</p>
<p>Mario：Direi! Lavora molto, e guadagna di più! 那可不！他工作很多，赚的更多！</p>
<h2 id="段落1"><a href="#段落1" class="headerlink" title="段落1"></a>段落1</h2><p>Ciao, mi chiamo Stefano. 你好，我叫Stefano</p>
<p>La mia famiglia ed io abitiamo in città in una casa piccola ma comoda 我的家人和我住在城里，房子很小，但是很舒适</p>
<p>Mio padre lavora in banca e mia madre è casalinga 我的爸爸在银行工作，我的妈妈是一个家庭主妇</p>
<p>Ho una sorella ed un fratello più grandi di me: 我有一个姐姐，还有一个哥哥：</p>
<p>mia sorella ha 23 (ventitré) anni e mio fratello 19 (diciannove) 我的姐姐今年23岁，我的哥哥今年19岁</p>
<p>Tutti e due studiano all’università 他们俩都在大学读书</p>
<p>La mattina, dopo colazione, andiamo tutti a studiare 每天早上，吃过早饭，我们就都去上课</p>
<p>La domenica stiamo insieme ai miei zii e ai loro figli 周日我们会和我们的叔叔们和他们的孩子们在一起</p>
<p>Cioè i miei cugini 我的堂弟们</p>
<p>che abitano insieme al nonno in una grande casa in campagna 和爷爷一起住在乡下的一个大房子</p>
<p>Non vedo l’ora di andare al lago a pescare con mio nonno 我迫不及待要和我爷爷一起去湖边钓鱼</p>
<p>O fare anche una lunga passeggiata con mio cugino Pietro e la mia cugina Caterina 或者是和我的表哥Pietro还有我的表妹Caterina一起散步</p>
<p>Mio nonno dice che la casa è più bella quando ci sono i suoi nipoti 我爷爷说，自己的孙子们来了，家就更美好了</p>
<p>Io dico invece, che è bella perché la mia cara nonna prepara dei dolci buonissimi! 不过我却觉得，因为我亲爱的奶奶会给我们做特别好吃的甜点，所以家才更美好！</p>
]]></content>
      <categories>
        <category>意大利语学习</category>
      </categories>
      <tags>
        <tag>意大利语</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]阿里业务中台架构详解</title>
    <url>/2019/08/08/%E9%98%BF%E9%87%8C%E4%B8%9A%E5%8A%A1%E4%B8%AD%E5%8F%B0%E6%9E%B6%E6%9E%84%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>reference:<br><a href="https://mp.weixin.qq.com/s/eLI4vcBwi0Q96yRlzvN3BQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/eLI4vcBwi0Q96yRlzvN3BQ</a></p>
</blockquote>
<h1 id="阿里业务中台架构图"><a href="#阿里业务中台架构图" class="headerlink" title="阿里业务中台架构图"></a>阿里业务中台架构图</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808205642.png"></p>
<p>基础设施服务，即IAAS层，提供硬件底层支持。</p>
<p>基础服务层，即PAAS层，包括分布式服务框架、分布式数据库、分布式消息、分布式存储、分布式事务、实时监控服务等等。</p>
<p>互联网业务中台，包括各服务中心的抽象出来的各种业务能力，包括交易中心、支付中心、营销中心、结算中心、用户中心、账户中心等等。也包括非业务类服务，如日志分析中心、配置中心、序列中心、基础中心。</p>
<p>业务应用，经过调取业务中台，组装形成独立业务服务能力的业务应用，如网银、手机银行。</p>
<p>交易来源，就是前台用户使用的各个端，如淘宝App、PC站等。</p>
<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808211326.png"></p>
<p>通过阿里云平台将技术中台进行部署，对集团内共享业务单元提供支撑，并最终对前台各业务线提供服务化能力输出。</p>
<h1 id="产品形态"><a href="#产品形态" class="headerlink" title="产品形态"></a>产品形态</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808210032.png"></p>
<p>从这张产品形态图上边我们可以看出来，阿里巴巴的开发者主要开发的是能力，然后构建内部的能力地图，这里的能力可以看作是一个原子服务。在接收新的需求后，将需求进行结构化，通过已有能力配置产生新的业务，组成业务列表和业务全景。最后给这个业务一个身份标识，进行业务度量。</p>
<h1 id="全剧架构"><a href="#全剧架构" class="headerlink" title="全剧架构"></a>全剧架构</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808210801.png"></p>
<h1 id="业务开发生命周期、业务创新和智能化"><a href="#业务开发生命周期、业务创新和智能化" class="headerlink" title="业务开发生命周期、业务创新和智能化"></a>业务开发生命周期、业务创新和智能化</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808211103.png"></p>
<p>能力地图下放到需求域，商业能力可沉淀。根据已有数据进行分析，持续进化。</p>
<h1 id="数据中台架构"><a href="#数据中台架构" class="headerlink" title="数据中台架构"></a>数据中台架构</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808211626.png"></p>
<p>数据中台本质上是在原有的<strong>计算存储平台</strong>与<strong>应用服务</strong>之间增加了一层<strong>统一数据服务中间件（OneService）</strong>。</p>
<p>形成了统一全域数据体系，实现了计算存储累计过亿的成本降低、响应业务效率多倍提升、为业务快速创新提供坚实保障。</p>
<p>全域数据采集与引入：以需求为驱动，以数据多样性的全域思想为指导，采集与引入全业务、多终端、多形态的数据；</p>
<p>标准规范数据架构与研发：统一基础层、公共中间层、百花齐放应用层的数据分层架构模式，通过数据指标结构化规范化的方式实现指标口径统一；</p>
<p>连接与深度萃取数据价值：形成以业务核心对象为中心的连接和标签体系，深度萃取数据价值；</p>
<p>统一数据资产管理：构建元数据中心，通过资产分析、应用、优化、运营四方面对看清数据资产、降低数据管理成本、追踪数据价值。</p>
<p>统一主题式服务：通过构建服务元数据中心和数据服务查询引擎，面向业务统一数据出口与数据查询逻辑，屏蔽多数据源与多物理表；</p>
<p>极大的丰富和完善了阿里巴巴大数据中心，OneData、OneID、OneService渐趋成熟并成为上至CEO、下至一线员工共识的方法论体系。</p>
<h1 id="阿里技术全栈全景图"><a href="#阿里技术全栈全景图" class="headerlink" title="阿里技术全栈全景图"></a>阿里技术全栈全景图</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808211932.png"></p>
<p>阿里技术全栈包含：移动中台、业务中台、数据中台、基本中间件、基础设施、前台业务、后台业务。</p>
<p>移动中台，包括移动网关、开发套件&amp;框架、消息推送、移动IM等等，提供了限流、负载、鉴权、消息推送、开发框架等等，使得移动端应用开发效率更高。</p>
<p>业务中台和数据中台，将业务、数据抽象和沉淀形成服务能力，对前台提供调用。</p>
<h1 id="阿里技术平台底座"><a href="#阿里技术平台底座" class="headerlink" title="阿里技术平台底座"></a>阿里技术平台底座</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808212101.png"></p>
<p>几百个业务应用，共享一个技术平台底座。</p>
<h1 id="大中台、小前台"><a href="#大中台、小前台" class="headerlink" title="大中台、小前台"></a>大中台、小前台</h1><p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20190808212213.png"></p>
<p>阿里巴巴集团在近期的组织结构调整中，组成由“小前台，大中台”互为协同的创新管理模式。<br>原阿里巴巴中国零售事业群总裁张建锋将担负起“中台”的重要工作，负责共享、数据、搜索，以及闲鱼、淘宝头条等创新孵化业务。</p>
]]></content>
      <tags>
        <tag>中台</tag>
        <tag>业务中台</tag>
        <tag>架构</tag>
        <tag>业务架构</tag>
      </tags>
  </entry>
  <entry>
    <title>泡利算符类与pyqpanda操作简介</title>
    <url>/2021/01/18/%E6%B3%A1%E5%88%A9%E7%AE%97%E7%AC%A6%E7%B1%BB%E4%B8%8Epyqpanda%E6%93%8D%E4%BD%9C%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="泡利算符类"><a href="#泡利算符类" class="headerlink" title="泡利算符类"></a>泡利算符类</h1><p>泡利算符是一组三个2×2的幺正厄米复矩阵，又称酉矩阵。我们一般都以希腊字母 $\sigma$ 来表示。 在 QPanda 中我们称它们为X门，Y门，Z门。它们对应的矩阵形式如下。</p>
<p>X:<br>$\sigma_x = \left[\begin{matrix}<br>    0 &amp; 1 \\<br>    1 &amp; 0<br>\end{matrix}\right]$</p>
<p>Y:<br>$\sigma_y = \left[\begin{matrix}<br>    0 &amp; -i \\<br>    i &amp; 0<br>\end{matrix}\right]$</p>
<p>Z:<br>$\sigma_z = \left[\begin{matrix}<br>    1 &amp; 0 \\<br>    0 &amp; -1<br>\end{matrix}\right]$</p>
<p>每个抛离矩阵有两个特征值，+1和-1，其对应的归一化特征向量为：</p>
<p>$\psi_{x+}=\frac{1}{\sqrt{2}}\left[\begin{matrix}<br>    1 \\<br>    1<br>\end{matrix}\right]$</p>
<p>$\psi_{x-}=\frac{1}{\sqrt{2}}\left[\begin{matrix}<br>    1 \\<br>    -1<br>\end{matrix}\right]$</p>
<p>$\psi_{y+}=\frac{1}{\sqrt{2}}\left[\begin{matrix}<br>    1 \\<br>    i<br>\end{matrix}\right]$</p>
<p>$\psi_{y-}=\frac{1}{\sqrt{2}}\left[\begin{matrix}<br>    1 \\<br>    -i<br>\end{matrix}\right]$</p>
<p>$\psi_{z+}=\left[\begin{matrix}<br>    1 \\<br>    0<br>\end{matrix}\right]$</p>
<p>$\psi_{z-}=\left[\begin{matrix}<br>    0 \\<br>    1<br>\end{matrix}\right]$</p>
<h1 id="泡利算符的运算规则"><a href="#泡利算符的运算规则" class="headerlink" title="泡利算符的运算规则"></a>泡利算符的运算规则</h1><ol>
<li>泡利算符与自身相乘得到是单位矩阵</li>
<li>泡利算符与单位矩阵相乘，无论是左乘还是右乘，其值不变</li>
<li>顺序相乘的两个泡利算符跟未参与计算的泡利算符是i倍的关系</li>
<li>逆序相乘的两个泡利算符跟未参与计算的泡利算符是−i倍的关系</li>
</ol>
<h1 id="接口介绍"><a href="#接口介绍" class="headerlink" title="接口介绍"></a>接口介绍</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyqpanda <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 构造一个空的泡利算符类</span></span><br><span class="line">    p1 = PauliOperator()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2倍的"泡利Z0"张乘"泡利Z1"</span></span><br><span class="line">    p2 = PauliOperator(<span class="string">"Z0 Z1"</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2倍的"泡利Z0"张乘"泡利Z1" + 3倍的"泡利X1"张乘"泡利Y2"</span></span><br><span class="line">    p3 = PauliOperator(&#123;<span class="string">"Z0 Z1"</span>: <span class="number">2</span>, <span class="string">"X1 Y2"</span>: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造一个单位矩阵，其系数为2，等价于p4 = PauliOperator("", 2)</span></span><br><span class="line">    p4 = PauliOperator(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>其中PauliOperator p2(“Z0 Z1”, 2)表示的是 $2\sigma_{0}^{z} \otimes \sigma_{1}^{z}$ ,这里的 $\otimes$ 表示<a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E7%BD%97%E5%86%85%E5%85%8B%E7%A7%AF" target="_blank" rel="noopener">克罗内克积（Kronecker product）</a>，也称作张量积、张乘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyqpanda <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    a = PauliOperator(<span class="string">"Z0 Z1"</span>, <span class="number">2</span>)</span><br><span class="line">    b = PauliOperator(<span class="string">"X5 Y6"</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    plus = a + b</span><br><span class="line">    minus = a - b</span><br><span class="line">    muliply = a * b</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"a + b = "</span>, plus)</span><br><span class="line">    print(<span class="string">"a - b = "</span>, minus)</span><br><span class="line">    print(<span class="string">"a * b = "</span>, muliply)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Index : "</span>, muliply.getMaxIndex())</span><br><span class="line"></span><br><span class="line">    index_map = &#123;&#125;</span><br><span class="line">    remap_pauli = muliply.remapQubitIndex(index_map)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"remap_pauli : "</span>, remap_pauli)</span><br><span class="line">    print(<span class="string">"Index : "</span>, remap_pauli.getMaxIndex())</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/imonce/imgs/master/20210118215817.png"></p>
<blockquote>
<p>reference:<br><a href="https://pyqpanda-toturial.readthedocs.io/zh/latest/PauliOperator.html" target="_blank" rel="noopener">https://pyqpanda-toturial.readthedocs.io/zh/latest/PauliOperator.html</a><br><a href="https://www.bilibili.com/video/BV124411b7bd?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/BV124411b7bd?p=3</a></p>
</blockquote>
]]></content>
      <categories>
        <category>量子计算</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>泡利算符</tag>
        <tag>pyqpanda</tag>
        <tag>量子计算</tag>
      </tags>
  </entry>
</search>
